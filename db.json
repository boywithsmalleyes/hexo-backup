{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/IMG_4730.JPG","path":"IMG_4730.JPG","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/center-quote.js","path":"js/center-quote.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1555420555868},{"_id":"source/CNAME","hash":"ea1b199ca19ae7e6468fae83751b424390dd16d3","modified":1555420502071},{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1555508921344},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1555508921344},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1555508921344},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1555508921344},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1555508921344},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1555508921350},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1555508921349},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1555508921350},{"_id":"themes/next/.gitignore","hash":"3558a8b174618c7a643aceb13233edd729813f9a","modified":1555508921349},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1555508921349},{"_id":"themes/next/_config.yml","hash":"5d1b6080573ab715502fbf63c04d739fb0de5548","modified":1561300276879},{"_id":"themes/next/bower.json","hash":"8fa4f26f5205cbc64d33318d1be5d35b2667398c","modified":1555508921351},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1555508921351},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1555508921358},{"_id":"themes/next/package.json","hash":"888bcacea284ec536a1428ad957a78dfb3ec255d","modified":1555508921397},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1556628438191},{"_id":"source/_posts/Android 内存管理.md","hash":"da2198c2da22618d018c624b65dce376759f684b","modified":1565348561000},{"_id":"source/_posts/Android-Studio-Dependencies-Library-Resolve.md","hash":"d1deccd6db326f18cc0197656098421fbf2e7f1d","modified":1555509309517},{"_id":"source/_posts/Android-中设置全屏的方法.md","hash":"337085ce9fd1a4a01629d6512397b7de41084c4e","modified":1555509303516},{"_id":"source/_posts/Android-在一个应用中启动另外一个应用.md","hash":"25c2bee6b313225072b9d96a7d2923bc18c98ed4","modified":1555509402354},{"_id":"source/_posts/Android-获取-IP-地址.md","hash":"15a866146d024a799a86e63954d8699b86b2b2e8","modified":1555509295501},{"_id":"source/_posts/Handler 线程通信基础流程.md","hash":"e26ac85e67e64e8ee05d453cefc6bba90a642f48","modified":1565856778000},{"_id":"source/IMG_4730.JPG","hash":"0226ccd67cb36f69ec5206e20e6fadefadd049fb","modified":1555422697000},{"_id":"source/_posts/Java 各引用之间的区别.md","hash":"f9aae9806047f0223343dd4693cd1cec608aceff","modified":1565086590000},{"_id":"source/_posts/Java-判断字符串是否是数字的方法.md","hash":"03bfba51e81dc6a58b5fcd47d33ef04d06623d67","modified":1555509355390},{"_id":"source/_posts/Jenkins-gradle-git-构建-Android-CI-构建环境.md","hash":"b7f6e2120071f345283e9f8b45935baf2cde8b6c","modified":1555509347632},{"_id":"source/_posts/adb-command.md","hash":"2c972bcebc4aebd213c928268e4ea1bbb22bf545","modified":1565623980865},{"_id":"source/_posts/git-command.md","hash":"533ecf4766faa9855fb442c691f0f82f04696064","modified":1565623980863},{"_id":"source/_posts/OkHttp-Intercept.md","hash":"6b4b8b0c81a7b9e196358e67255af1ccd9c8f9ff","modified":1561300563652},{"_id":"source/_posts/多个-ssh-公钥提交代码到不同平台.md","hash":"b1e763e7da5a755c6f562fdec5fe2f167671f0f2","modified":1561300550288},{"_id":"source/_posts/事件分发.md","hash":"c2c0a62cd0211723560477d4bddc0c9983e628bd","modified":1561300606747},{"_id":"source/_posts/开发一个Android-IoT-App.md","hash":"8f066cbf22cf134f0950c88992d2de5ade473809","modified":1555509259361},{"_id":"source/_posts/清香木养殖（一）.md","hash":"d494063f64a382a49d7454ef4a68e4500aa583a7","modified":1556981571315},{"_id":"source/_posts/清香木养殖（二）.md","hash":"44359418d21d74d8c46f69b404cf4f0edc4e042d","modified":1561300439121},{"_id":"source/_posts/清香木养殖（三）.md","hash":"baa556a32bd405db13fd14f4de78a26dafacdcf9","modified":1561300443441},{"_id":"source/schedule/index.md","hash":"341d6005087022541cf0f3d6b36f879b59ac1bc1","modified":1556116092403},{"_id":"source/sitemap/index.md","hash":"b7ee8261c172311ffdd7d2876ad48b56db940392","modified":1556116136524},{"_id":"source/tags/index.md","hash":"e808b1592f8b5b16b41ee1a652f4aea5105522e1","modified":1556114463217},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1555508921345},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"285a95aca36e0ac770bcde2b35e3b572d45d1518","modified":1555508921345},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1555508921346},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"492b2c159d871e5b5d4c70d259f36e603afe192d","modified":1555508921347},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1555508921347},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1555508921347},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1555508921348},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1555508921348},{"_id":"themes/next/.github/mergeable.yml","hash":"8e3a6abc74b5cba57f9586fe6d98762fd4fc9b04","modified":1555508921348},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1555508921348},{"_id":"themes/next/.github/release-drafter.yml","hash":"b4476ada5c62ee7d63ba2e59ead2ec4897086e3c","modified":1555508921348},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1555508921348},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1555508921349},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1555508921349},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1555508921352},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1555508921352},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1555508921352},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1555508921352},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1555508921352},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1555508921353},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1555508921353},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1555508921353},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1555508921353},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1555508921358},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1555508921359},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1555508921359},{"_id":"themes/next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1555508921359},{"_id":"themes/next/languages/fr.yml","hash":"7005c2b42c2c6e82bd7a1be5cc2f443b5fc79105","modified":1555508921359},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1555508921360},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1555508921360},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1555508921360},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1555508921360},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1555508921361},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1555508921361},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1555508921361},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1555508921362},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1555508921362},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1555508921362},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1555508921362},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1555508921363},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1555508921363},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1555508921363},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1555508921365},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1555508921393},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1555508921393},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1555508921394},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1555508921394},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1555508921395},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1555508921395},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1555508921396},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1555508921400},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1555508921401},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1555508921459},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1555508921459},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1555508921459},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555508921437},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1555508921346},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1555508921346},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1555508921346},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1555508921347},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1555508921354},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1555508921354},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1555508921354},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1555508921354},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1555508921355},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1555508921355},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bc43beb3af74d64fbd3920539d08861e4cadb9a0","modified":1555508921355},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1555508921356},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1555508921356},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1555508921357},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1555508921356},{"_id":"themes/next/docs/zh-CN/README.md","hash":"1b5bd6ae5781137d81dc8667e912d3df6eeab260","modified":1555508921357},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b76ccbc658024e86639cfa5f8a3817647fc8d651","modified":1555508921357},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1555508921364},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1555508921364},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1555508921364},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1555508921366},{"_id":"themes/next/layout/_macro/post.swig","hash":"10187fafe566b3e5bfa4e7e10c77ea9026d9081d","modified":1555508921366},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1555508921367},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5352f96f4544c1520babf1cec7b44ddf2f8057b3","modified":1555508921367},{"_id":"themes/next/layout/_partials/footer.swig","hash":"589f545333e21a8c7823bce89ab45cf1eb7db6e2","modified":1555508921368},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1555508921368},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1555508921371},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1555508921372},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1555508921375},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1555508921375},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1555508921376},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1555508921376},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1555508921378},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1555508921378},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1555508921383},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1555508921383},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1555508921383},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"01ded5e1bad89a6f8d64cd063e3e4e42c20d33bc","modified":1555508921386},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1555508921387},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1555508921387},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1555508921388},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1555508921388},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5db80e8d7ea3f29e998320f79508f7e14342a33c","modified":1555508921388},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1555508921389},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1555508921389},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1555508921392},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1555508921398},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1555508921399},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1555508921399},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1555508921401},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1555508921402},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1555508921402},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1555508921402},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1555508921402},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1555508921403},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1555508921403},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1555508921403},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1555508921403},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1555508921404},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1555508921404},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1555508921404},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1555508921437},{"_id":"themes/next/source/js/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1555518021687},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1555508921443},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1555508921443},{"_id":"themes/next/source/js/center-quote.js","hash":"e4bc6f92b18fc410cfa2df6e7368055449fc75cf","modified":1555517797502},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1555508921443},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1555508921444},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1555508921444},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1555508921444},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1555508921445},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1555508921446},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1555508921446},{"_id":"themes/next/source/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1555508921446},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1555508921438},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555508921438},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1555508921438},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1555508921438},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1555508921439},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1555508921439},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1555508921439},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1555508921440},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1555508921440},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1555508921440},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555508921441},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555508921441},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555508921441},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1555508921441},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555508921442},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1555508921442},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1555508921442},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1555508921442},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555508921427},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555508921428},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555508921428},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555508921436},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555508921437},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1555508921365},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1555508921365},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1555508921368},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1555508921369},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"36eae78a4d7160a1c5e59ca3f7333f00b43d359b","modified":1555508921369},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1555508921369},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1555508921370},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1555508921370},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1555508921370},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1555508921371},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1555508921371},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1555508921372},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1555508921372},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1555508921372},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1555508921372},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1555508921373},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1555508921373},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1555508921373},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1555508921374},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1555508921374},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1555508921374},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1555508921375},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1555508921376},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1555508921376},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1555508921377},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1555508921377},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1555508921377},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1555508921378},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1555508921379},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1555508921379},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1555508921379},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1555508921380},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1555508921380},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1555508921380},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"d422beaf35a5d2646feaa098bc3e5adf691c7565","modified":1555508921380},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1555508921381},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1555508921381},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1555508921382},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1555508921382},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1555508921382},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1555508921382},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1555508921383},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1555508921384},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c77a2e7ef5f449a445fb4d36b055721fba4a81af","modified":1555508921384},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1555508921384},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1555508921385},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1555508921385},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1555508921385},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1555508921386},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1555508921387},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1555508921386},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1555508921387},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1555508921390},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1555508921391},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1555508921391},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1555508921427},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1555508921427},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1555508921428},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"2036bbb73afd43251982ce824f06c6e88d35a2ef","modified":1555508921428},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1555508921436},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1555508921436},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1555508921436},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1555508921445},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1555508921445},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1555508921447},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1555508921447},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1555508921447},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1555508921447},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1555508921448},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1555508921458},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1555508921458},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1555508921459},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1555508921437},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1555508921455},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1555508921405},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1555508921405},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1555508921405},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1555508921406},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1555508921406},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1555508921411},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1555508921416},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1555508921417},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1555508921425},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1555508921425},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1555508921426},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"a5305a2fa0b03b1dc1dfd156bb1a590b4819f1f3","modified":1555508921426},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1555508921426},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1555508921426},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1555508921427},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1555508921429},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1555508921429},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1555508921430},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1555508921430},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1555508921430},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1555508921430},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1555508921431},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1555508921431},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1555508921432},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1555508921432},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1555508921433},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1555508921433},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1555508921433},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1555508921434},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1555508921434},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1555508921435},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1555508921435},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1555508921435},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1555508921435},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1555508921448},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1555508921449},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1555508921449},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555508921454},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1555508921457},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1555508921406},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1555508921407},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1555508921407},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1555508921407},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1555508921407},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1555508921408},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1555508921408},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1555508921409},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1555508921410},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1555508921410},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1555508921410},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1555508921410},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1555508921411},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1555508921411},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1555508921408},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1555508921409},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1555508921409},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1555508921412},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1555508921412},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1555508921413},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1555508921413},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1555508921413},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1555508921413},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1555508921414},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1555508921414},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1555508921414},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1555508921415},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1555508921415},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1555508921415},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1555508921416},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1555508921415},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1555508921416},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1555508921416},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1555508921417},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1555508921417},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1555508921417},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1555508921418},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1555508921418},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1555508921418},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1555508921419},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1555508921419},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1555508921419},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1555508921419},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1555508921422},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1555508921422},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1555508921423},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1555508921423},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1555508921423},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1555508921423},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1555508921424},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1555508921424},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1555508921424},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1555508921424},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1555508921420},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1555508921420},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1555508921420},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1555508921421},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1555508921421},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1555508921421},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"fcda60fecff1479adaf6521cf629cda2506337a8","modified":1555508921421},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1555508921422},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1555508921431},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1555508921432},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1555508921433},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555508921453},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555508921452},{"_id":"source/_posts/2019-5-23 MQTT 协议 154011.pdf","hash":"dc0d000046e4e3695fd331a40427ea1ab99e85a6","modified":1563266692000},{"_id":"public/atom.xml","hash":"424c811469c1ee2d1d8215ad838b1a3131fbb870","modified":1565871341887},{"_id":"public/search.xml","hash":"96cf8f44c70ecd7d7176c3af8f8e7fadd43e5859","modified":1565871341910},{"_id":"public/sitemap.xml","hash":"db4f913374a5de6412fd103ad4e7134ddcd5faae","modified":1565871341911},{"_id":"public/schedule/index.html","hash":"70fefb49916eea14c16f709cd6c0029be776bdbd","modified":1565871341936},{"_id":"public/sitemap/index.html","hash":"42b03007e79f4a96986d792997195c59b66afe60","modified":1565871341936},{"_id":"public/tags/index.html","hash":"19f9cacdc9b460923b4a1f3f364e6ce8cabc3fa6","modified":1565871341936},{"_id":"public/2019/08/09/Android 内存管理/index.html","hash":"47f0d7f3d5bc9e257222987798ed41a8584ace8d","modified":1565871341937},{"_id":"public/2019/08/06/Java 各引用之间的区别/index.html","hash":"e0eed29aa3369aed3f47ce9cdcc1f35ea6b0b0c9","modified":1565871341937},{"_id":"public/2019/08/01/Handler 线程通信基础流程/index.html","hash":"3039af7f327221b3c1de36439dd0babc1a5df3b3","modified":1565871341937},{"_id":"public/2019/05/08/清香木养殖（二）/index.html","hash":"761b83c324b6fac81128ecf981ec7828c630f2a9","modified":1565871341938},{"_id":"public/2019/06/23/清香木养殖（三）/index.html","hash":"4271b326c2969e0f5d69981994bc97d21808be2c","modified":1565871341938},{"_id":"public/2019/05/04/清香木养殖（一）/index.html","hash":"a5d567a3767d12220633e108fd91d00e8756beea","modified":1565871341938},{"_id":"public/2019/04/30/OkHttp-Intercept/index.html","hash":"70bcb71865e2f7ff61d22398a8b6933ffb67fc82","modified":1565871341938},{"_id":"public/2019/04/17/多个-ssh-公钥提交代码到不同平台/index.html","hash":"cc4f0c6a7ba9aa774164825350184239a5c66baf","modified":1565871341938},{"_id":"public/2019/04/16/Java-判断字符串是否是数字的方法/index.html","hash":"698de1b024ce754c7ce15a493c55f9520eed3ae1","modified":1565871341938},{"_id":"public/2019/04/16/Android-中设置全屏的方法/index.html","hash":"2abea2a58e06ad16311835e1e31dce6bfea3f669","modified":1565871341938},{"_id":"public/2019/04/16/Android-获取-IP-地址/index.html","hash":"882e5e9fbd0aef9cdfe93132c1eccdc060f6d278","modified":1565871341938},{"_id":"public/2019/04/16/事件分发/index.html","hash":"dd6185d1357051fca2d19aca6c4a1aabe37ddae4","modified":1565871341938},{"_id":"public/2019/04/16/Android-在一个应用中启动另外一个应用/index.html","hash":"649570e7920ce0c89f28539e7aa76574669835f5","modified":1565871341939},{"_id":"public/2019/04/16/Android-Studio-Dependencies-Library-Resolve/index.html","hash":"26220635bea33c6a113019f765ad5f41d63756cd","modified":1565871341939},{"_id":"public/2019/04/16/git-command/index.html","hash":"05f4715710926f6ff11f31235dc4d5dae9b335f3","modified":1565871341939},{"_id":"public/2019/04/16/开发一个Android-IoT-App/index.html","hash":"9cee045b56921502cbb5def95b259a2057110d52","modified":1565871341939},{"_id":"public/2019/04/16/Jenkins-gradle-git-构建-Android-CI-构建环境/index.html","hash":"24b8fa0fe6234fc1fe9c59d5438f3c4febf7e2c2","modified":1565871341939},{"_id":"public/2019/04/16/adb-command/index.html","hash":"258c08cb7547d96e2c0fc18b70e9ff48f64c3770","modified":1565871341939},{"_id":"public/archives/index.html","hash":"9b9759bbc3cbd50e56c8a131a1b6af7911b6a4c1","modified":1565871341939},{"_id":"public/archives/2019/index.html","hash":"f9f37fd9e54f81bd9fa816e65f410dd8dc6f93a7","modified":1565871341939},{"_id":"public/archives/2019/04/index.html","hash":"1f1c8bd6a906365fdec8ce850a645c9927d90bc8","modified":1565871341940},{"_id":"public/archives/2019/05/index.html","hash":"b0e040e3390c800772e0f53565dbb0bb513224cf","modified":1565871341942},{"_id":"public/archives/2019/06/index.html","hash":"db0917ee971a4822c810273455fb81d9f8ac726e","modified":1565871341943},{"_id":"public/archives/2019/08/index.html","hash":"83fac2256a152e72e52b94f5c6fd8287eb4dc365","modified":1565871341943},{"_id":"public/index.html","hash":"341a019703b9da32d08fd9ef07bb8048e457b33e","modified":1565871341943},{"_id":"public/page/2/index.html","hash":"6460cb33db43cabffa8659f72b73aef37a93cee3","modified":1565871341944},{"_id":"public/tags/Android/index.html","hash":"dcdf8904c2e129eda69d284b81cae28c3f45bba9","modified":1565871341944},{"_id":"public/tags/Java/index.html","hash":"401bed9d556121deda109466e8f37c2a1c8fdccc","modified":1565871341944},{"_id":"public/tags/Git/index.html","hash":"84f422a5b2ca6ff03290e083cc524eb3f4a2a429","modified":1565871341944},{"_id":"public/tags/OkHttp/index.html","hash":"e83a5cc91b21b4c2ba83df1d2c9f17d20e522aac","modified":1565871341949},{"_id":"public/tags/绿植/index.html","hash":"a99388600dbf9c95e576b43ff75607462d0ce1b1","modified":1565871341954},{"_id":"public/tags/Android-Things/index.html","hash":"0058f08ba9dd7d35b54c42cc8f98aae8e757afb1","modified":1565871341955},{"_id":"public/CNAME","hash":"ea1b199ca19ae7e6468fae83751b424390dd16d3","modified":1565871341963},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1565871341963},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1565871341963},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1565871341964},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1565871341964},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1565871341965},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1565871341965},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1565871341965},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1565871341965},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1565871341965},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1565871341965},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1565871341965},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1565871341965},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1565871341965},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1565871341965},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1565871341965},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1565871341965},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1565871341965},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1565871341965},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1565871341966},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1565871341966},{"_id":"public/css/prism.css","hash":"fcbf639881632fcdfa5f6724e614766af0ed736b","modified":1565871341966},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1565871343416},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1565871343420},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1565871343455},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1565871343455},{"_id":"public/js/center-quote.js","hash":"e4bc6f92b18fc410cfa2df6e7368055449fc75cf","modified":1565871343455},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1565871343456},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1565871343456},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1565871343456},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1565871343457},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1565871343457},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1565871343457},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1565871343457},{"_id":"public/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1565871343457},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1565871343459},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1565871343460},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1565871343473},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1565871343476},{"_id":"public/css/main.css","hash":"e2dbb227503d16c665c82f75eac2eff62073b457","modified":1565871343478},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1565871343481},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1565871343482},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1565871343482},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1565871343483},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1565871343491},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1565871343491},{"_id":"public/IMG_4730.JPG","hash":"0226ccd67cb36f69ec5206e20e6fadefadd049fb","modified":1565871343522},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1565871343522}],"Category":[],"Data":[],"Page":[{"title":"schedule","date":"2019-04-24T14:28:12.000Z","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2019-04-24 22:28:12\n---\n","updated":"2019-04-24T14:28:12.403Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cjzcncz95000116y9hzrdbmho","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"sitemap","date":"2019-04-24T14:28:56.000Z","_content":"","source":"sitemap/index.md","raw":"---\ntitle: sitemap\ndate: 2019-04-24 22:28:56\n---\n","updated":"2019-04-24T14:28:56.524Z","path":"sitemap/index.html","comments":1,"layout":"page","_id":"cjzcncza5000316y9eloyp59r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","date":"2019-04-24T14:00:26.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\ndate: 2019-04-24 22:00:26\n---\n","updated":"2019-04-24T14:01:03.217Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjzcnczaf000516y952jb69gc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"_content":"# Android 内存管理\n\n\n\n内存管理的目的就是我们在开发中怎么有效的避免我们的应用程序出现内存泄露问题。内存泄露简短粗俗的讲，就是该被释放的对象没有释放，一直被某个或某些实例所持有却不被使用，导致 GC 不能回收。\n\n\n\n## Java 内存分配策略\n\nJava 程序运行时的内存分配策略有三种，分别是静态分配、栈式分配和堆式分配。对应的三种存储策略使用的内存空间主要分别是静态存储区（方法区）、栈区和堆区。\n\n* 静态存储区（方法区）：主要存放静态数据，全局 static 数据和常量。这块内存在程序编译时就已经分配好，并且在程序整个运行期间都存在。\n* 栈区：当方法被执行时，方法体内的局部变量（其中包括基础数据类型、对象引用）都在栈上创建，并在方法执行结束时这些局部变量所持有的内存将会自动被释放。因此栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。\n* 堆区：又称动态内存分配，通常就是在程序运行时直接 new 出来的内存，也就是对象的实例。这部分内存在不使用时，将会由 Java 垃圾回收器负责回收。\n\n## 堆与栈的区别：\n\n在方法体内定义的（局部变量）一些基本类型的变量和对象的引用都是在方法的栈内存中分配的。当在一段方法块中定义一个变量时，Java 就会在栈中为该变量分配内存空间，当超过该变量的作用域后，该变量也就无效了，分配给它的内存空间也将被释放掉，该内存空间可以被重新使用。\n\n堆内存用来存放所有由 new 创建的对象（包括该对象其中的所有成员变量）和数组。在堆中分配的内存，将由 Java 垃圾回收器来自动管理。在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊变量，这个变量的取值等于数组或者对象在内存中的首地址，这个特殊的变量就是我们上面说的引用变量。我们可以通过这个引用变量来访问堆中的对象或者数组。\n\n举例：\n\n```Java\npublic class Sample {\n    int s1 = 0;\n    Sample sample1 = new Sample();\n    \n    public void method () {\n        int s2 = 1;\n        Sample sample2 = new Sample();\n    }\n}\n\n\nSample sample3 = new Sample();\n```\n\nSample 类的局部变量 s2 和引用变量 sample2 都是存在于栈中，但 smaple2 指向的对象是存在于堆中。 sample3 指向的对象存放在堆中，包括这个对象的所有成员变量 s1 和 sample1， 而它自己存在与栈中。\n\n**结论：**\n\n* 局部变量的脚本数据类型和引用存储在栈中，引用的对象实体存储于堆中。—— 因为他们属于方法中的变量，生命周期随方法而结束\n* 成员变量全部存储于堆中（包括基本数据类型，引用和引用的对象实体）。—— 因为他们属于类，类对象终究是要被 new 出来使用的。\n\n\n\n## Java 是如何管理内存\n\nJava 的内存管理就是对象的分配和释放的问题。在 Java 中，coder 需要通过关键字 new 为每一个对象申请新的存储空间（基本类型除外），所有的对象都在 堆（Heap）中分配空间。另外对象的释放是由 GC 决定和执行的，在 Java 中，内存分配是由 coder 完成的，而内存释放是由 GC 完成的。这种收支两条线的方法简化了 coder 的工作。同时也加重了 JVM 的工作。也是 Java 程序运行速度慢的原因之一。因为 GC 为了能够正确释放对象， GC 必须监控每一个对象的运行状态，包括对象的申请、引用、被引用、赋值等，GC 都需要监控。\n\n\n\n监控对象状态是为了更准确、及时地释放对象，而释放对象的根本原则就是该对象不在被引用。\n\n\n\n![](https://camo.githubusercontent.com/ba01b8ae9af4a5e588251316c826bf3e0e695f35/687474703a2f2f7777772e69626d2e636f6d2f646576656c6f706572776f726b732f636e2f6a6176612f6c2d4a6176614d656d6f72794c65616b2f312e676966)\n\nJava 使用有向图的方式进行内存管理，可以消除引用循环的问题，例如有三个对象，相互引用，只要他们和根进程不可达，那么 GC 就可以回收他。这种管理方式的有点是管理内存的精度高，但是效率低。\n\n\n\n## 什么是 Java 中的内存泄露\n\n在 Java 中，内存泄露就是存在一些被分配的对象，这些对象有两个特点。\n\n* 这些对象是可达的，即在有向图中，存在通路与其相连\n* 这些对象是无用的，即程序以后不会在使用这些对象。\n\n如果满足这两个条件，这些对象就可以判定为 Java 中的内存泄露，这些对象不会被 GC 回收，但却是占用着内存。\n\n对于程序猿来说， GC 基本是透明的，不可见的。虽然我们只有几个函数可以方位 GC， 例如运行 GC 的函数 `System.gc()`，但是根据 Java 语言规范定义，该函数不保证 JVM 的垃圾回收器一定会执行。因为，不同的 JVM 实现着可能使用不同的算法管理 GC。 通常 GC 的线程优先级比较低。 JVM 调用 GC 的策略也有很多种，有的是内存使用达到一定成都时， GC 才开始工作；也有定时执行，有的是平缓执行 GC， 有的是中断式执行 GC。 通常来说，我们不需要关心这些。除非在一些特定的场合， GC 的执行影响应用程序的性能，例如对于基于 Web 的实时系统，如网络游戏等，用户不希望 GC 突然终端应用程序执行而进行垃圾回收，那么我们需要调整 GC 的参数，让 GC 能够通过平缓的方式释放内存，例如将垃圾回收分解为一系列的小步骤执行， Sun 提供了 HotSpot JVM 支持这一特性。\n\n同样给出一个 Java 内存泄露的典型例子\n\n```java\nVector v = new Vector(10);\nfor (int i = 1; i < 100; i++) {\n    Object o = new Object();\n    v.add(o);\n    o = null;\n}\n```\n\n在这个例子中，我们循环申请 Object 对象，并将所申请的对象放入一个 Vector 中，如果我们仅仅释放引用本身，那么 Vector 仍然应用该对象，所以这个对象对 GC 来说是不可回收的。因此，如果对象加入到 Vector 后，还必须从 Vector 中删除，最简单的方法就是将 Vector 对象设置为 null。\n\n\n\n\n\n## 详细的 Java 中的内存泄露\n\n### Java 内存回收机制\n\n不论那种语言的内存分配方式，都需要返回所分配的真实地址，也就是返回一个指针到内存块的首地址。Java 中对象是采用 new 或者反射的方法创建的，这些对象的创建都是在堆（Heap）中分配的。所有对象的回收都是由 Java 虚拟机通过垃圾回收机制完成。 GC 为了能够正确释放对象，会监控每个对象的运行状态，对他们的申请、引用、被引用、赋值等状况进行监控， Java 会使用有向图的方式进行管理内存，实时监控对象是否可以到达，如果不可以到达，则将其回收，这样也可以消除引用的循环问题。在 Java 语言中，判断一个内存空间是否符合垃圾回收标准有两个：\n\n \t1. 给对象赋予了空值 null\n \t2. 给对象赋予了新值，这样重新分配了内存空间。\n\n\n\n### Java 内存泄漏引起的原因\n\n内存泄露是指无用对象（不再使用的对象）持续占有内存活无用对象的内存得不到及时释放，从而造成内存空间的浪费称为内存泄漏。内存泄漏有时不严重，不易察觉，这样开发者就不知道存在内存泄漏，但有时也很严重，会提示 Out of memory。\n\nJava 内存泄漏的根本原因是什么呢？长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏，尽管短生命周期对象已经不再需要，但是因为长生命周期持有它的引用而导致不能被释放回收，这就是 Java 中内存泄漏的发生场景，主要有一下几大类：\n\n1. 静态集合类引起的内存泄漏：\n\n   像 HashMap、Vector 等的使用最容易出现内存泄漏，这些静态变量的生命周期和应用程序一致，他们所引用的所有的对象 Object 也不能被释放，因为他们也将一直被 Vector 等引用着。\n\n   例如：\n\n   ```java\n   Static Vector v = new Vercor(10);\n   for (int i = 1; i < 100; i++) {\n       Object o = new Object();\n       v.add(o);\n       o = null;\n   }\n   ```\n\n   在这个例子中，循环申请 `Object` 对象，并将所申请的对象放入一个 Vector 中，如果仅仅释放引用本身（o = null），那么 Vector 仍然引用该对象，所以这个对象对 GC 来说是不可会说的。因此对象加入到 Vector 后， 还必须从 Vector 中删除，最简单的是将 Vector 设置为 null。\n\n2. 当集合里面的对象属性被修改后，再调用 remove() 方法时，不起作用\n\n   例如：\n\n   ```java\n   public static void main(String[] args) {\n       Set<Person> set = new HashSet<Person>();\n       Person p1 = new Person(\"唐僧\", \"pwd1\", 25);\n       Person p2 = new Person(\"孙悟空\", \"pwd2\", 24);\n       Person p3 = new Person(\"猪八戒\", \"pwd3\", 26);\n       \n       set.add(p1);\n       set.add(p2);\n       set.add(p3);\n   \n       System.out.println(\"总共有：\" + set.size() + \" 个元素\");// 结果： 总共有 3 个元素\n       p3.setAge(2); // 修改 p3 的年龄，此时 p3 元素对应的 hashcode 值发生改变\n       \n       set.remove(p3); // remove 掉，造成内存泄露\n       \n       set.add(p3); // 重新添加，成功\n       \n      \tSystem.out.println(\"总共有：\" + set.size() + \" 个元素\"); // 结果：总共有 4 个元素\n       for (Person person : set) {\n           System.out.println(person);\n       }\n   }\n   ```\n\n3. 监听器\n\n   在 Java 变成中，我们需要和监听器打交道，通常一个应用当中会有多个监听器，我们会调用一个控件的例如`addXXXXListener()` 等方法来增加监听器，但往往在释放对象的时候，却没有记住去删除这些监听器，从而增加了内存泄漏的机会。\n\n4. 各种连接\n\n   比如数据库连接（dataSourse.getConnection()）、 网络连接(socket) 和 io 连接，除非其显示的调用了其 `close()` 方法将其连接关闭，否则是不会自动被 GC 回收的。对于 Resultset 和 Statement 对象可以不进行显示回收，但 Connection 一定要显示回收，因为 Connection 在任何时候都无法自动回收，而 Connection 一旦回收， Resultset 和 Statement 对象就会立即2为 NULL。 但是如果使用连接池，情况就不一样了，除了要显示地关闭链接，还必须显示地关闭 Resultset 和 Statement 对象（关闭其中一个， 另外一个也会关闭），否则就会造成大量的 Statement 对象无法释放，从而引起内存泄漏。这种情况下一般都会在 try 里面去连接，在 finally 里面释放连接。\n\n5. 内部类和外部模块的引用\n\n   内部类的引用是比较容易遗忘的一种，而且一旦没释放可能导致一系列的后续类对象没有释放。此外 coder 还要小心外部模块不经意的引用，例如 coder A 负责 A 模块，调用了 B 模块的一个方法： `public void registerMsg(Object b);` 这种调用就要小心，传入了一个对象，很可能模块 B 就保持了对该对象的引用，这时候就需要注意模块 B 是否提供响应的操作去除引用。\n\n6. 单例模式\n\n   不正确的使用单例模式是引起内存泄漏的一个常见问题，单利对象在初始化后，将在 JVM 的整个生命周期中存在（以静态变量的方式），如果单例对象持有外部的引用，那么这个对象将不能被 JVM 正常回收，导致内存泄漏。\n\n   ```java\n   class A {\n       public A () {\n           B.getInstance().setA(this);\n       }\n       ...\n   }\n   \n   // B 采用单例模式\n   class B {\n       private A a;\n       private static B instance = new B();\n       private b (){}\n       public static B getInstance(){\n           return instacne;\n       }\n   \t\n   \tpublic void setA (A a) {\n           this.a = a;\n   \t}\n   \t\n   \t// .........\n   }\n   ```\n\n   显然 B 采用 singleton 模式， 它持有一个 A 对象的引用，而这个类的对象将不能被回收。想象下如果 A 是个比较复杂的对象或者集合类型会发生什么。\n\n\n\n## Android  中常见的内存泄漏汇总\n\n\n\n### 集合类泄漏\n\n集合类如果仅仅有添加元素的方法，而没有相应的删除机制，导致内存被占用。如果这个集合类是全局性的变量（比如类中的静态属性，全局性的 map 等即有静态引用或 final 一直指向它），那么没有相应的删除机制，很可能导致集合所占用的内存只增不减。比如上面的例子中就是其中一种情况，当然实际上我们在项目中肯定不会这样谢代码，但稍不注意还是很容易出现这种情况。\n\n\n\n### 单例造成的内存泄露\n\n由于单利的静态特性使得其生命周期跟应用一样长，所以如果使用不恰当的话，很容易造成内存泄漏。\n\n```java\npublic class AppManager {\n    private static AppManager instance;\n    private Context context;\n    private AppManager(Context context) {\n        this.connect = connect;\n    }\n    public static AppManager getInstance(Context context) {\n        if (instance == null) {\n            instance = new AppManager(context);\n        }\n        return instance;\n    }\n}\n```\n\n这是一个普通的单例模式，当创建这个单例的时候，由于需要传入一个 Context， 所以这个 Context 的生命周期的长短至关重要：\n\n1. 如果此时传入的是 Application 的 Context， 因为 Application 的生命周期就是这个应用的生命周期，所以这将没有任何问题。\n2. 如果此时传入的是 Activity 的 Context，当这个 Context 所对应的 Activity 退出时，由于该 Context 的应用被单例对象所持有，其生命周期等于整个应用程序的生命周期，所以当前 Activity 退出时，它的内存并不会被释放，就会造成泄漏。\n\n**正确的方式应修改为：**\n\n```java\npublic class AppManager { \n    private static AppManager instance;\n    private Context context;\n    private AppManager (Context context) {\n        this.context = context.getApplicationContext();// 使用 Application 的 context\n    }\n    \n    public static AppManager getInstance(Context context) {\n        if (instance == null) {\n            instance = new AppManager(context);\n        }\n        return instance;\n    }\n}\n```\n\n或者这样写，连 Context 都不用传进来：\n\n```java\n在你的 Application 中添加一个静态方法， getContext() 返回 Application 的 context\n\n...\n\ncontext = getApplicationContext();\n\n...\n\n/**\n * 获取全局的 Context\n * @return 返回全局的 context 对象\n */\n \npublic static Context getContext(){\n    reutnr context;\n}\n\npublic class AppManager {\n    private static AppManager instance;\n    private Context context;\n    private AppManager () {\n        this.context = MyApplication.getContext();// 使用 Application 的 context\n    }\n    \n    public staitc AppManager getInstance() {\n        if (instance == null) {\n            instance = new AppManager();\n        }\n        return instance;\n    }\n}\n```\n\n\n\n### 匿名内部类/非静态内部类和异步线程\n\n非静态内部类创建静态实例造成的内存泄漏\n\n有的时候我们可能会在启动频繁的 Activity 中，为了避免重复创建相同资源，可能会出现这种写法\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    private staitc TestResource mResource = null;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        if(mResource == null) {\n            mResource = new TestResource();\n        }\n        //....\n    }\n        \n    class TestResource {\n            //....\n            \n    }\n}\n```\n\n这样就在 Activity 内部创建了一个非静态内部类的单例，每次启动 Activity 都会使用该单利的数据，这样虽然避免了资源的重复创建，不过这种写法却造成了内存写泄漏，因为**非静态内部类默认会持有外部类的引用**，而该非静态内部类又创建了一个静态实例，该实例的生命周期和应用一样长，这就导致了该静态实例一直会持有该 Activity 的引用，导致 Activity 的内存资源不能正常回收。正确的做法：\n\n将该内部类设为静态内部类或者将该内部类抽取出来封装成单例，如果需要使用 Context， 按照上一个方法推荐使用 Application 中的 Context。 当然 Application 的 Context 不是万能的，所以也不能随便乱用，对于有些地方则是必须使用 Activity 的 Context ，对于 Application，Service， Activity 三者的 Context 的应用场景如下：\n\n![Application, Service, Activity 的 Context 使用场景](https://camo.githubusercontent.com/dee4aecb8a80c4e73337b56ee01cbffa2a8049dd/687474703a2f2f696d672e626c6f672e6373646e2e6e65742f32303135313132333134343232363334393f73706d3d353137362e3130303233392e626c6f67636f6e742e392e437455316334)\n\n其中：NO1 表示 Application 和 Service 可以启动一个 Activity，不过需要创建一个新的 task 任务队列。而对于 Dialog 而言，只有在 Activity 中才能创建。\n\n\n\n### 匿名内部类\n\nAndroid 开发经常会继承实现 Activity/Fragment/View， 此时如果你使用了匿名类，并被异步线程持有，如果没有任何措施这样一定会导致泄漏\n\n```java\npublic class MainActivity extends Activity {\n    ...\n    Runnable ref1 = new MyRunnable();\n    Runnable ref2 = new Runnable (){\n       @Override\n       public void run() {\n           ....\n       }\n    };\n    ...\n}\n```\n\n\n\nref1 和 ref2 的区别是， ref2 使用了匿名内部类。我们看一下运行时，这两个引用的内存：\n\n![](https://camo.githubusercontent.com/2b1a52551d828d9640f23ee7c2802476b02ccec3/687474703a2f2f696d67322e746263646e2e636e2f4c312f3436312f312f666230356666366432653638663330396239346464383433353263383161636665306165383339653f73706d3d353137362e3130303233392e626c6f67636f6e742e31302e437455316334)\n\n可以看到 ref1 没什么特别的。\n\n但 ref2 这个匿名类的实现对象里面多了一个引用：\n\nthis$0 这个引用指向 MainActivity.this， 也就是说当前的 MainActivity 实例会被 ref2 持有，如果将这个引用再传入一个异步线程，此线程和此 Activity 生命周期不一致的时候，就会造成内存泄漏。\n\n\n\n###  Handler 造成的内存泄漏\n\nHandler 的使用造成的内存泄漏问题应该说是最常见的，但很多时候我们为了避免 ANR 而不在主线程中进行耗时操作，在处理网络任务或者封装一些请求回调等 api 都借助 Handler 来处理，但 Handler 不是万能的，对于 Handler 的使用代码编写不规范就有可能造成内存泄漏。另外，我们知道 Handler、Message 和 MessageQueue 都是相互关联在一起的，万一 Handler 发送的 Message 尚未被处理，则该 Message 及发送它的 Handler 对象将被线程 MessageQueue 一直持有。\n\n由于 Handler 属于 TLS（Thread Local Storage）变量，生命周期和 Activity 是不一致的。因此这种实现方式一般很难保证跟 View 或者 Activity 的生命周期保持一致，很容易导致无法正确释放。\n\n```java\npublic class MainActivity extends Activity {\n    private final Handler mLeakyHandler = new Handerl(){\n        @Override\n        public void handleMessage(Message msg) {\n            ...\n        }\n    };\n    \n    @Override\n    protected void onCreate(Bundler savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // post a message and delay its execution for 10 minutes.\n        mLeakHandler.postDelayed(new Runnable(){\n           @Override\n            public void run(){\n                ...\n            }\n        }, 1000 * 6 * 10);\n        \n        // go back to the previous Activity\n        finish();\n    }\n}\n```\n\n在该例中，生命了一个延时 10 分钟执行的消息 Message， mLeakyHandler 将其 push 进了消息队列 MessageQueue 中。当 Activity 被 finish() 掉，延时任务的 Message 还会继续存在于主线程中，它持有该 Activity 的 Handler 引用，此时 finish() 掉的 Activity 就不会被回收，从而造成内存泄漏（**因 Handler 为非静态内部类，会持有外部类的引用，在这里就是 MainActivity**）.\n\n修复方法：在 Activity 中避免使用非静态内部类，比如上面我们将 Handler 生命为静态的，则其存活期和 Activity的 生命周期无关了，同时通过弱引用的方式引入 Activity，避免直接将 Activity 作为 Context 传入， 如下：\n\n```java\npublic class SampleActivity extends Activity {\n    /**\n    * Instence of static inner classes do not bold an implicit reference to their outer class\n    */\n    \n    private static class MyHandler extends Handler {\n        private final WeakReference<SampleActivity> mActivity;\n        \n        public MyHandler (SampleActivity activity) {\n            mActivity = new WeakReference<SampleActivity>(activity);\n        }\n        \n        @Override\n        public void handleMessage (Message msg) {\n            SampleActivity activity = mActivity.get();\n            if(activity != null) {\n                //....\n            }\n        }\n    }\n    \n    private final MyHandler mHandler = new MyHandler(this);\n    \n    /**\n    * Instance of anonymous classes do not hold an implicit \n    * reference to their outer class when they are \"static\"\n    */\n    private static final Runnable sRunnable = new Runnable ()\t{\n     \t@Override\n        public void run(){\n            ...\n        }\n    };\n    \n    @Override\n    protected void onCreate(Bundler savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        \n        // Post a message and delay its execution for 10 mintues.\n        mHandler.postDelay(sRunnable, 1000 * 60 * 10);\n        \n        // go back to the previous Activity\n        finish();\n    }\n    \n}\n```\n\n综述， 即推荐使用静态内部类 + WeakReference 这种方式。每次使用前注意判空。\n\n前面提到的 WeakReference，所以这里简单说下 Java 中对象的几种引用类型。\n\nJava 对引用分为 StrongReference， SoftReference， WeakReference和 PhantomReference 四种。\n\n| 级别                   | 回收时机     | 用途                                                         | 生存时间           |\n| ---------------------- | :----------- | :----------------------------------------------------------- | ------------------ |\n| 强(StrongReference)    | 从来不会     | 对象的一般状态                                               | JVM 停止运行时终止 |\n| 软(SoftReference)      | 在内存不足时 | 联合 ReferenceQueue 构造有效期短/占内存大/生命周期长的对象的二级高速缓冲器(内存不足才清空) | 内存不足时终止     |\n| 弱（WeakReference）    | 在垃圾回收时 | 联合 ReferenceQueue 构造有效期短/占内存大/生命周期长的对象的一级高速缓冲器(系统发生 gc 则清空) | gc 运行后终止      |\n| 虚（PhantomReference） | 在垃圾回收时 | 联合 ReferenceQueue 来跟踪对象被垃圾回收器回收的活动         | gc 运行后终止      |\n\n\n\n在 Android 应用开发中，为了防止内存溢出，在处理一些占用内存大而且生命周期较长的对象时候，可以尽量应用软引用和弱引用技术。\n\n软/弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java 虚拟机就会把这个软引用加入到与之关联得的引用队列中。利用这个队列可以得知被回收的软/弱引用的对象列表，从而为缓冲器清楚已失效的软/弱引用。\n\n假设我们的应用会用到大量的默认图片，比如应用中有默认的头像，默认游戏图标等等，这些图片很多地方会用到。如果每次去读取图片，由于读取文件需要硬件操作，速度很慢，会导致性能较低。所以我们考虑将图片缓存起来，需要的时候直接从内存中读取。但是由于图片占用空间比较大，缓存很多图片需要很多的内存，就可能比较容易发生 OutOfMemery 异常。这时我们可以考虑使用软/弱引用技术来避免这个问题发生。以下是高速缓冲器的雏形：\n\n首先定义一个 HashMap，保存软引用对象：\n\n```\nprivate Map<String, SoftReference<Bitmap>> imageCache = new HashMap<String, SoftReference<Bitmap>>();\n```\n\n再定义一个方法，保存 bitmap 的软引用到 HashMap。\n\n```Java\npublic class CacheBySoftRef {\n    // 先定义一个 HashMap，保存软引用对象\n    private Map<String, SoftReference<Bitmap>> imageCache = new HashMap<String, SoftReference<Bitmap>>();\n    \n    // 再定义一个方法，保存 bitmap 的软引用到 HashMap。\n    public void addBitmapToCache(String path) {\n        // 强引用的 Bitmap 对象\n        Bitmap bitmap = BitmapFactory.decodeFile(path);\n        // 软引用的 bitmap 对象\n        SoftReference<Bitmap> softBitmap = new SoftReference<Bitmap>(bitmap);\n        imageCache.put(path, softBitmap);\n    }\n    \n    // 获取的时候，可以通过 SoftReference 的 get() 方法得到 bitmap 对象\n    public Bitmap getBitmapByPath(String path) {\n        // 从缓存中取软引用的 bitmap 对象\n        SoftReference<Bitmap> softBitmap = imageCache.get(path);\n        // 判断是否存在软引用\n        if (softBitmap == null)  return;\n        // 通过软引用取出 bitmap 对象，如果由于内存不足 Bitmap 被回收，将取到空，如果未被回收，则可重复使用，提高速度\n        Bitmap bitmap = softBitmap.get();\n        return bitmap;\n    }\n}\n```\n\n","source":"_posts/Android 内存管理.md","raw":"# Android 内存管理\n\n\n\n内存管理的目的就是我们在开发中怎么有效的避免我们的应用程序出现内存泄露问题。内存泄露简短粗俗的讲，就是该被释放的对象没有释放，一直被某个或某些实例所持有却不被使用，导致 GC 不能回收。\n\n\n\n## Java 内存分配策略\n\nJava 程序运行时的内存分配策略有三种，分别是静态分配、栈式分配和堆式分配。对应的三种存储策略使用的内存空间主要分别是静态存储区（方法区）、栈区和堆区。\n\n* 静态存储区（方法区）：主要存放静态数据，全局 static 数据和常量。这块内存在程序编译时就已经分配好，并且在程序整个运行期间都存在。\n* 栈区：当方法被执行时，方法体内的局部变量（其中包括基础数据类型、对象引用）都在栈上创建，并在方法执行结束时这些局部变量所持有的内存将会自动被释放。因此栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。\n* 堆区：又称动态内存分配，通常就是在程序运行时直接 new 出来的内存，也就是对象的实例。这部分内存在不使用时，将会由 Java 垃圾回收器负责回收。\n\n## 堆与栈的区别：\n\n在方法体内定义的（局部变量）一些基本类型的变量和对象的引用都是在方法的栈内存中分配的。当在一段方法块中定义一个变量时，Java 就会在栈中为该变量分配内存空间，当超过该变量的作用域后，该变量也就无效了，分配给它的内存空间也将被释放掉，该内存空间可以被重新使用。\n\n堆内存用来存放所有由 new 创建的对象（包括该对象其中的所有成员变量）和数组。在堆中分配的内存，将由 Java 垃圾回收器来自动管理。在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊变量，这个变量的取值等于数组或者对象在内存中的首地址，这个特殊的变量就是我们上面说的引用变量。我们可以通过这个引用变量来访问堆中的对象或者数组。\n\n举例：\n\n```Java\npublic class Sample {\n    int s1 = 0;\n    Sample sample1 = new Sample();\n    \n    public void method () {\n        int s2 = 1;\n        Sample sample2 = new Sample();\n    }\n}\n\n\nSample sample3 = new Sample();\n```\n\nSample 类的局部变量 s2 和引用变量 sample2 都是存在于栈中，但 smaple2 指向的对象是存在于堆中。 sample3 指向的对象存放在堆中，包括这个对象的所有成员变量 s1 和 sample1， 而它自己存在与栈中。\n\n**结论：**\n\n* 局部变量的脚本数据类型和引用存储在栈中，引用的对象实体存储于堆中。—— 因为他们属于方法中的变量，生命周期随方法而结束\n* 成员变量全部存储于堆中（包括基本数据类型，引用和引用的对象实体）。—— 因为他们属于类，类对象终究是要被 new 出来使用的。\n\n\n\n## Java 是如何管理内存\n\nJava 的内存管理就是对象的分配和释放的问题。在 Java 中，coder 需要通过关键字 new 为每一个对象申请新的存储空间（基本类型除外），所有的对象都在 堆（Heap）中分配空间。另外对象的释放是由 GC 决定和执行的，在 Java 中，内存分配是由 coder 完成的，而内存释放是由 GC 完成的。这种收支两条线的方法简化了 coder 的工作。同时也加重了 JVM 的工作。也是 Java 程序运行速度慢的原因之一。因为 GC 为了能够正确释放对象， GC 必须监控每一个对象的运行状态，包括对象的申请、引用、被引用、赋值等，GC 都需要监控。\n\n\n\n监控对象状态是为了更准确、及时地释放对象，而释放对象的根本原则就是该对象不在被引用。\n\n\n\n![](https://camo.githubusercontent.com/ba01b8ae9af4a5e588251316c826bf3e0e695f35/687474703a2f2f7777772e69626d2e636f6d2f646576656c6f706572776f726b732f636e2f6a6176612f6c2d4a6176614d656d6f72794c65616b2f312e676966)\n\nJava 使用有向图的方式进行内存管理，可以消除引用循环的问题，例如有三个对象，相互引用，只要他们和根进程不可达，那么 GC 就可以回收他。这种管理方式的有点是管理内存的精度高，但是效率低。\n\n\n\n## 什么是 Java 中的内存泄露\n\n在 Java 中，内存泄露就是存在一些被分配的对象，这些对象有两个特点。\n\n* 这些对象是可达的，即在有向图中，存在通路与其相连\n* 这些对象是无用的，即程序以后不会在使用这些对象。\n\n如果满足这两个条件，这些对象就可以判定为 Java 中的内存泄露，这些对象不会被 GC 回收，但却是占用着内存。\n\n对于程序猿来说， GC 基本是透明的，不可见的。虽然我们只有几个函数可以方位 GC， 例如运行 GC 的函数 `System.gc()`，但是根据 Java 语言规范定义，该函数不保证 JVM 的垃圾回收器一定会执行。因为，不同的 JVM 实现着可能使用不同的算法管理 GC。 通常 GC 的线程优先级比较低。 JVM 调用 GC 的策略也有很多种，有的是内存使用达到一定成都时， GC 才开始工作；也有定时执行，有的是平缓执行 GC， 有的是中断式执行 GC。 通常来说，我们不需要关心这些。除非在一些特定的场合， GC 的执行影响应用程序的性能，例如对于基于 Web 的实时系统，如网络游戏等，用户不希望 GC 突然终端应用程序执行而进行垃圾回收，那么我们需要调整 GC 的参数，让 GC 能够通过平缓的方式释放内存，例如将垃圾回收分解为一系列的小步骤执行， Sun 提供了 HotSpot JVM 支持这一特性。\n\n同样给出一个 Java 内存泄露的典型例子\n\n```java\nVector v = new Vector(10);\nfor (int i = 1; i < 100; i++) {\n    Object o = new Object();\n    v.add(o);\n    o = null;\n}\n```\n\n在这个例子中，我们循环申请 Object 对象，并将所申请的对象放入一个 Vector 中，如果我们仅仅释放引用本身，那么 Vector 仍然应用该对象，所以这个对象对 GC 来说是不可回收的。因此，如果对象加入到 Vector 后，还必须从 Vector 中删除，最简单的方法就是将 Vector 对象设置为 null。\n\n\n\n\n\n## 详细的 Java 中的内存泄露\n\n### Java 内存回收机制\n\n不论那种语言的内存分配方式，都需要返回所分配的真实地址，也就是返回一个指针到内存块的首地址。Java 中对象是采用 new 或者反射的方法创建的，这些对象的创建都是在堆（Heap）中分配的。所有对象的回收都是由 Java 虚拟机通过垃圾回收机制完成。 GC 为了能够正确释放对象，会监控每个对象的运行状态，对他们的申请、引用、被引用、赋值等状况进行监控， Java 会使用有向图的方式进行管理内存，实时监控对象是否可以到达，如果不可以到达，则将其回收，这样也可以消除引用的循环问题。在 Java 语言中，判断一个内存空间是否符合垃圾回收标准有两个：\n\n \t1. 给对象赋予了空值 null\n \t2. 给对象赋予了新值，这样重新分配了内存空间。\n\n\n\n### Java 内存泄漏引起的原因\n\n内存泄露是指无用对象（不再使用的对象）持续占有内存活无用对象的内存得不到及时释放，从而造成内存空间的浪费称为内存泄漏。内存泄漏有时不严重，不易察觉，这样开发者就不知道存在内存泄漏，但有时也很严重，会提示 Out of memory。\n\nJava 内存泄漏的根本原因是什么呢？长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏，尽管短生命周期对象已经不再需要，但是因为长生命周期持有它的引用而导致不能被释放回收，这就是 Java 中内存泄漏的发生场景，主要有一下几大类：\n\n1. 静态集合类引起的内存泄漏：\n\n   像 HashMap、Vector 等的使用最容易出现内存泄漏，这些静态变量的生命周期和应用程序一致，他们所引用的所有的对象 Object 也不能被释放，因为他们也将一直被 Vector 等引用着。\n\n   例如：\n\n   ```java\n   Static Vector v = new Vercor(10);\n   for (int i = 1; i < 100; i++) {\n       Object o = new Object();\n       v.add(o);\n       o = null;\n   }\n   ```\n\n   在这个例子中，循环申请 `Object` 对象，并将所申请的对象放入一个 Vector 中，如果仅仅释放引用本身（o = null），那么 Vector 仍然引用该对象，所以这个对象对 GC 来说是不可会说的。因此对象加入到 Vector 后， 还必须从 Vector 中删除，最简单的是将 Vector 设置为 null。\n\n2. 当集合里面的对象属性被修改后，再调用 remove() 方法时，不起作用\n\n   例如：\n\n   ```java\n   public static void main(String[] args) {\n       Set<Person> set = new HashSet<Person>();\n       Person p1 = new Person(\"唐僧\", \"pwd1\", 25);\n       Person p2 = new Person(\"孙悟空\", \"pwd2\", 24);\n       Person p3 = new Person(\"猪八戒\", \"pwd3\", 26);\n       \n       set.add(p1);\n       set.add(p2);\n       set.add(p3);\n   \n       System.out.println(\"总共有：\" + set.size() + \" 个元素\");// 结果： 总共有 3 个元素\n       p3.setAge(2); // 修改 p3 的年龄，此时 p3 元素对应的 hashcode 值发生改变\n       \n       set.remove(p3); // remove 掉，造成内存泄露\n       \n       set.add(p3); // 重新添加，成功\n       \n      \tSystem.out.println(\"总共有：\" + set.size() + \" 个元素\"); // 结果：总共有 4 个元素\n       for (Person person : set) {\n           System.out.println(person);\n       }\n   }\n   ```\n\n3. 监听器\n\n   在 Java 变成中，我们需要和监听器打交道，通常一个应用当中会有多个监听器，我们会调用一个控件的例如`addXXXXListener()` 等方法来增加监听器，但往往在释放对象的时候，却没有记住去删除这些监听器，从而增加了内存泄漏的机会。\n\n4. 各种连接\n\n   比如数据库连接（dataSourse.getConnection()）、 网络连接(socket) 和 io 连接，除非其显示的调用了其 `close()` 方法将其连接关闭，否则是不会自动被 GC 回收的。对于 Resultset 和 Statement 对象可以不进行显示回收，但 Connection 一定要显示回收，因为 Connection 在任何时候都无法自动回收，而 Connection 一旦回收， Resultset 和 Statement 对象就会立即2为 NULL。 但是如果使用连接池，情况就不一样了，除了要显示地关闭链接，还必须显示地关闭 Resultset 和 Statement 对象（关闭其中一个， 另外一个也会关闭），否则就会造成大量的 Statement 对象无法释放，从而引起内存泄漏。这种情况下一般都会在 try 里面去连接，在 finally 里面释放连接。\n\n5. 内部类和外部模块的引用\n\n   内部类的引用是比较容易遗忘的一种，而且一旦没释放可能导致一系列的后续类对象没有释放。此外 coder 还要小心外部模块不经意的引用，例如 coder A 负责 A 模块，调用了 B 模块的一个方法： `public void registerMsg(Object b);` 这种调用就要小心，传入了一个对象，很可能模块 B 就保持了对该对象的引用，这时候就需要注意模块 B 是否提供响应的操作去除引用。\n\n6. 单例模式\n\n   不正确的使用单例模式是引起内存泄漏的一个常见问题，单利对象在初始化后，将在 JVM 的整个生命周期中存在（以静态变量的方式），如果单例对象持有外部的引用，那么这个对象将不能被 JVM 正常回收，导致内存泄漏。\n\n   ```java\n   class A {\n       public A () {\n           B.getInstance().setA(this);\n       }\n       ...\n   }\n   \n   // B 采用单例模式\n   class B {\n       private A a;\n       private static B instance = new B();\n       private b (){}\n       public static B getInstance(){\n           return instacne;\n       }\n   \t\n   \tpublic void setA (A a) {\n           this.a = a;\n   \t}\n   \t\n   \t// .........\n   }\n   ```\n\n   显然 B 采用 singleton 模式， 它持有一个 A 对象的引用，而这个类的对象将不能被回收。想象下如果 A 是个比较复杂的对象或者集合类型会发生什么。\n\n\n\n## Android  中常见的内存泄漏汇总\n\n\n\n### 集合类泄漏\n\n集合类如果仅仅有添加元素的方法，而没有相应的删除机制，导致内存被占用。如果这个集合类是全局性的变量（比如类中的静态属性，全局性的 map 等即有静态引用或 final 一直指向它），那么没有相应的删除机制，很可能导致集合所占用的内存只增不减。比如上面的例子中就是其中一种情况，当然实际上我们在项目中肯定不会这样谢代码，但稍不注意还是很容易出现这种情况。\n\n\n\n### 单例造成的内存泄露\n\n由于单利的静态特性使得其生命周期跟应用一样长，所以如果使用不恰当的话，很容易造成内存泄漏。\n\n```java\npublic class AppManager {\n    private static AppManager instance;\n    private Context context;\n    private AppManager(Context context) {\n        this.connect = connect;\n    }\n    public static AppManager getInstance(Context context) {\n        if (instance == null) {\n            instance = new AppManager(context);\n        }\n        return instance;\n    }\n}\n```\n\n这是一个普通的单例模式，当创建这个单例的时候，由于需要传入一个 Context， 所以这个 Context 的生命周期的长短至关重要：\n\n1. 如果此时传入的是 Application 的 Context， 因为 Application 的生命周期就是这个应用的生命周期，所以这将没有任何问题。\n2. 如果此时传入的是 Activity 的 Context，当这个 Context 所对应的 Activity 退出时，由于该 Context 的应用被单例对象所持有，其生命周期等于整个应用程序的生命周期，所以当前 Activity 退出时，它的内存并不会被释放，就会造成泄漏。\n\n**正确的方式应修改为：**\n\n```java\npublic class AppManager { \n    private static AppManager instance;\n    private Context context;\n    private AppManager (Context context) {\n        this.context = context.getApplicationContext();// 使用 Application 的 context\n    }\n    \n    public static AppManager getInstance(Context context) {\n        if (instance == null) {\n            instance = new AppManager(context);\n        }\n        return instance;\n    }\n}\n```\n\n或者这样写，连 Context 都不用传进来：\n\n```java\n在你的 Application 中添加一个静态方法， getContext() 返回 Application 的 context\n\n...\n\ncontext = getApplicationContext();\n\n...\n\n/**\n * 获取全局的 Context\n * @return 返回全局的 context 对象\n */\n \npublic static Context getContext(){\n    reutnr context;\n}\n\npublic class AppManager {\n    private static AppManager instance;\n    private Context context;\n    private AppManager () {\n        this.context = MyApplication.getContext();// 使用 Application 的 context\n    }\n    \n    public staitc AppManager getInstance() {\n        if (instance == null) {\n            instance = new AppManager();\n        }\n        return instance;\n    }\n}\n```\n\n\n\n### 匿名内部类/非静态内部类和异步线程\n\n非静态内部类创建静态实例造成的内存泄漏\n\n有的时候我们可能会在启动频繁的 Activity 中，为了避免重复创建相同资源，可能会出现这种写法\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    private staitc TestResource mResource = null;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        if(mResource == null) {\n            mResource = new TestResource();\n        }\n        //....\n    }\n        \n    class TestResource {\n            //....\n            \n    }\n}\n```\n\n这样就在 Activity 内部创建了一个非静态内部类的单例，每次启动 Activity 都会使用该单利的数据，这样虽然避免了资源的重复创建，不过这种写法却造成了内存写泄漏，因为**非静态内部类默认会持有外部类的引用**，而该非静态内部类又创建了一个静态实例，该实例的生命周期和应用一样长，这就导致了该静态实例一直会持有该 Activity 的引用，导致 Activity 的内存资源不能正常回收。正确的做法：\n\n将该内部类设为静态内部类或者将该内部类抽取出来封装成单例，如果需要使用 Context， 按照上一个方法推荐使用 Application 中的 Context。 当然 Application 的 Context 不是万能的，所以也不能随便乱用，对于有些地方则是必须使用 Activity 的 Context ，对于 Application，Service， Activity 三者的 Context 的应用场景如下：\n\n![Application, Service, Activity 的 Context 使用场景](https://camo.githubusercontent.com/dee4aecb8a80c4e73337b56ee01cbffa2a8049dd/687474703a2f2f696d672e626c6f672e6373646e2e6e65742f32303135313132333134343232363334393f73706d3d353137362e3130303233392e626c6f67636f6e742e392e437455316334)\n\n其中：NO1 表示 Application 和 Service 可以启动一个 Activity，不过需要创建一个新的 task 任务队列。而对于 Dialog 而言，只有在 Activity 中才能创建。\n\n\n\n### 匿名内部类\n\nAndroid 开发经常会继承实现 Activity/Fragment/View， 此时如果你使用了匿名类，并被异步线程持有，如果没有任何措施这样一定会导致泄漏\n\n```java\npublic class MainActivity extends Activity {\n    ...\n    Runnable ref1 = new MyRunnable();\n    Runnable ref2 = new Runnable (){\n       @Override\n       public void run() {\n           ....\n       }\n    };\n    ...\n}\n```\n\n\n\nref1 和 ref2 的区别是， ref2 使用了匿名内部类。我们看一下运行时，这两个引用的内存：\n\n![](https://camo.githubusercontent.com/2b1a52551d828d9640f23ee7c2802476b02ccec3/687474703a2f2f696d67322e746263646e2e636e2f4c312f3436312f312f666230356666366432653638663330396239346464383433353263383161636665306165383339653f73706d3d353137362e3130303233392e626c6f67636f6e742e31302e437455316334)\n\n可以看到 ref1 没什么特别的。\n\n但 ref2 这个匿名类的实现对象里面多了一个引用：\n\nthis$0 这个引用指向 MainActivity.this， 也就是说当前的 MainActivity 实例会被 ref2 持有，如果将这个引用再传入一个异步线程，此线程和此 Activity 生命周期不一致的时候，就会造成内存泄漏。\n\n\n\n###  Handler 造成的内存泄漏\n\nHandler 的使用造成的内存泄漏问题应该说是最常见的，但很多时候我们为了避免 ANR 而不在主线程中进行耗时操作，在处理网络任务或者封装一些请求回调等 api 都借助 Handler 来处理，但 Handler 不是万能的，对于 Handler 的使用代码编写不规范就有可能造成内存泄漏。另外，我们知道 Handler、Message 和 MessageQueue 都是相互关联在一起的，万一 Handler 发送的 Message 尚未被处理，则该 Message 及发送它的 Handler 对象将被线程 MessageQueue 一直持有。\n\n由于 Handler 属于 TLS（Thread Local Storage）变量，生命周期和 Activity 是不一致的。因此这种实现方式一般很难保证跟 View 或者 Activity 的生命周期保持一致，很容易导致无法正确释放。\n\n```java\npublic class MainActivity extends Activity {\n    private final Handler mLeakyHandler = new Handerl(){\n        @Override\n        public void handleMessage(Message msg) {\n            ...\n        }\n    };\n    \n    @Override\n    protected void onCreate(Bundler savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // post a message and delay its execution for 10 minutes.\n        mLeakHandler.postDelayed(new Runnable(){\n           @Override\n            public void run(){\n                ...\n            }\n        }, 1000 * 6 * 10);\n        \n        // go back to the previous Activity\n        finish();\n    }\n}\n```\n\n在该例中，生命了一个延时 10 分钟执行的消息 Message， mLeakyHandler 将其 push 进了消息队列 MessageQueue 中。当 Activity 被 finish() 掉，延时任务的 Message 还会继续存在于主线程中，它持有该 Activity 的 Handler 引用，此时 finish() 掉的 Activity 就不会被回收，从而造成内存泄漏（**因 Handler 为非静态内部类，会持有外部类的引用，在这里就是 MainActivity**）.\n\n修复方法：在 Activity 中避免使用非静态内部类，比如上面我们将 Handler 生命为静态的，则其存活期和 Activity的 生命周期无关了，同时通过弱引用的方式引入 Activity，避免直接将 Activity 作为 Context 传入， 如下：\n\n```java\npublic class SampleActivity extends Activity {\n    /**\n    * Instence of static inner classes do not bold an implicit reference to their outer class\n    */\n    \n    private static class MyHandler extends Handler {\n        private final WeakReference<SampleActivity> mActivity;\n        \n        public MyHandler (SampleActivity activity) {\n            mActivity = new WeakReference<SampleActivity>(activity);\n        }\n        \n        @Override\n        public void handleMessage (Message msg) {\n            SampleActivity activity = mActivity.get();\n            if(activity != null) {\n                //....\n            }\n        }\n    }\n    \n    private final MyHandler mHandler = new MyHandler(this);\n    \n    /**\n    * Instance of anonymous classes do not hold an implicit \n    * reference to their outer class when they are \"static\"\n    */\n    private static final Runnable sRunnable = new Runnable ()\t{\n     \t@Override\n        public void run(){\n            ...\n        }\n    };\n    \n    @Override\n    protected void onCreate(Bundler savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        \n        // Post a message and delay its execution for 10 mintues.\n        mHandler.postDelay(sRunnable, 1000 * 60 * 10);\n        \n        // go back to the previous Activity\n        finish();\n    }\n    \n}\n```\n\n综述， 即推荐使用静态内部类 + WeakReference 这种方式。每次使用前注意判空。\n\n前面提到的 WeakReference，所以这里简单说下 Java 中对象的几种引用类型。\n\nJava 对引用分为 StrongReference， SoftReference， WeakReference和 PhantomReference 四种。\n\n| 级别                   | 回收时机     | 用途                                                         | 生存时间           |\n| ---------------------- | :----------- | :----------------------------------------------------------- | ------------------ |\n| 强(StrongReference)    | 从来不会     | 对象的一般状态                                               | JVM 停止运行时终止 |\n| 软(SoftReference)      | 在内存不足时 | 联合 ReferenceQueue 构造有效期短/占内存大/生命周期长的对象的二级高速缓冲器(内存不足才清空) | 内存不足时终止     |\n| 弱（WeakReference）    | 在垃圾回收时 | 联合 ReferenceQueue 构造有效期短/占内存大/生命周期长的对象的一级高速缓冲器(系统发生 gc 则清空) | gc 运行后终止      |\n| 虚（PhantomReference） | 在垃圾回收时 | 联合 ReferenceQueue 来跟踪对象被垃圾回收器回收的活动         | gc 运行后终止      |\n\n\n\n在 Android 应用开发中，为了防止内存溢出，在处理一些占用内存大而且生命周期较长的对象时候，可以尽量应用软引用和弱引用技术。\n\n软/弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java 虚拟机就会把这个软引用加入到与之关联得的引用队列中。利用这个队列可以得知被回收的软/弱引用的对象列表，从而为缓冲器清楚已失效的软/弱引用。\n\n假设我们的应用会用到大量的默认图片，比如应用中有默认的头像，默认游戏图标等等，这些图片很多地方会用到。如果每次去读取图片，由于读取文件需要硬件操作，速度很慢，会导致性能较低。所以我们考虑将图片缓存起来，需要的时候直接从内存中读取。但是由于图片占用空间比较大，缓存很多图片需要很多的内存，就可能比较容易发生 OutOfMemery 异常。这时我们可以考虑使用软/弱引用技术来避免这个问题发生。以下是高速缓冲器的雏形：\n\n首先定义一个 HashMap，保存软引用对象：\n\n```\nprivate Map<String, SoftReference<Bitmap>> imageCache = new HashMap<String, SoftReference<Bitmap>>();\n```\n\n再定义一个方法，保存 bitmap 的软引用到 HashMap。\n\n```Java\npublic class CacheBySoftRef {\n    // 先定义一个 HashMap，保存软引用对象\n    private Map<String, SoftReference<Bitmap>> imageCache = new HashMap<String, SoftReference<Bitmap>>();\n    \n    // 再定义一个方法，保存 bitmap 的软引用到 HashMap。\n    public void addBitmapToCache(String path) {\n        // 强引用的 Bitmap 对象\n        Bitmap bitmap = BitmapFactory.decodeFile(path);\n        // 软引用的 bitmap 对象\n        SoftReference<Bitmap> softBitmap = new SoftReference<Bitmap>(bitmap);\n        imageCache.put(path, softBitmap);\n    }\n    \n    // 获取的时候，可以通过 SoftReference 的 get() 方法得到 bitmap 对象\n    public Bitmap getBitmapByPath(String path) {\n        // 从缓存中取软引用的 bitmap 对象\n        SoftReference<Bitmap> softBitmap = imageCache.get(path);\n        // 判断是否存在软引用\n        if (softBitmap == null)  return;\n        // 通过软引用取出 bitmap 对象，如果由于内存不足 Bitmap 被回收，将取到空，如果未被回收，则可重复使用，提高速度\n        Bitmap bitmap = softBitmap.get();\n        return bitmap;\n    }\n}\n```\n\n","slug":"Android 内存管理","published":1,"date":"2019-08-09T11:02:41.000Z","updated":"2019-08-09T11:02:41.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcncz8f000016y9tkcc5dyi","content":"<h1 id=\"Android-内存管理\"><a href=\"#Android-内存管理\" class=\"headerlink\" title=\"Android 内存管理\"></a>Android 内存管理</h1><p>内存管理的目的就是我们在开发中怎么有效的避免我们的应用程序出现内存泄露问题。内存泄露简短粗俗的讲，就是该被释放的对象没有释放，一直被某个或某些实例所持有却不被使用，导致 GC 不能回收。</p>\n<h2 id=\"Java-内存分配策略\"><a href=\"#Java-内存分配策略\" class=\"headerlink\" title=\"Java 内存分配策略\"></a>Java 内存分配策略</h2><p>Java 程序运行时的内存分配策略有三种，分别是静态分配、栈式分配和堆式分配。对应的三种存储策略使用的内存空间主要分别是静态存储区（方法区）、栈区和堆区。</p>\n<ul>\n<li>静态存储区（方法区）：主要存放静态数据，全局 static 数据和常量。这块内存在程序编译时就已经分配好，并且在程序整个运行期间都存在。</li>\n<li>栈区：当方法被执行时，方法体内的局部变量（其中包括基础数据类型、对象引用）都在栈上创建，并在方法执行结束时这些局部变量所持有的内存将会自动被释放。因此栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。</li>\n<li>堆区：又称动态内存分配，通常就是在程序运行时直接 new 出来的内存，也就是对象的实例。这部分内存在不使用时，将会由 Java 垃圾回收器负责回收。</li>\n</ul>\n<h2 id=\"堆与栈的区别：\"><a href=\"#堆与栈的区别：\" class=\"headerlink\" title=\"堆与栈的区别：\"></a>堆与栈的区别：</h2><p>在方法体内定义的（局部变量）一些基本类型的变量和对象的引用都是在方法的栈内存中分配的。当在一段方法块中定义一个变量时，Java 就会在栈中为该变量分配内存空间，当超过该变量的作用域后，该变量也就无效了，分配给它的内存空间也将被释放掉，该内存空间可以被重新使用。</p>\n<p>堆内存用来存放所有由 new 创建的对象（包括该对象其中的所有成员变量）和数组。在堆中分配的内存，将由 Java 垃圾回收器来自动管理。在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊变量，这个变量的取值等于数组或者对象在内存中的首地址，这个特殊的变量就是我们上面说的引用变量。我们可以通过这个引用变量来访问堆中的对象或者数组。</p>\n<p>举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sample</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Sample sample1 = <span class=\"keyword\">new</span> Sample();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">        Sample sample2 = <span class=\"keyword\">new</span> Sample();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Sample sample3 = <span class=\"keyword\">new</span> Sample();</span><br></pre></td></tr></table></figure>\n<p>Sample 类的局部变量 s2 和引用变量 sample2 都是存在于栈中，但 smaple2 指向的对象是存在于堆中。 sample3 指向的对象存放在堆中，包括这个对象的所有成员变量 s1 和 sample1， 而它自己存在与栈中。</p>\n<p><strong>结论：</strong></p>\n<ul>\n<li>局部变量的脚本数据类型和引用存储在栈中，引用的对象实体存储于堆中。—— 因为他们属于方法中的变量，生命周期随方法而结束</li>\n<li>成员变量全部存储于堆中（包括基本数据类型，引用和引用的对象实体）。—— 因为他们属于类，类对象终究是要被 new 出来使用的。</li>\n</ul>\n<h2 id=\"Java-是如何管理内存\"><a href=\"#Java-是如何管理内存\" class=\"headerlink\" title=\"Java 是如何管理内存\"></a>Java 是如何管理内存</h2><p>Java 的内存管理就是对象的分配和释放的问题。在 Java 中，coder 需要通过关键字 new 为每一个对象申请新的存储空间（基本类型除外），所有的对象都在 堆（Heap）中分配空间。另外对象的释放是由 GC 决定和执行的，在 Java 中，内存分配是由 coder 完成的，而内存释放是由 GC 完成的。这种收支两条线的方法简化了 coder 的工作。同时也加重了 JVM 的工作。也是 Java 程序运行速度慢的原因之一。因为 GC 为了能够正确释放对象， GC 必须监控每一个对象的运行状态，包括对象的申请、引用、被引用、赋值等，GC 都需要监控。</p>\n<p>监控对象状态是为了更准确、及时地释放对象，而释放对象的根本原则就是该对象不在被引用。</p>\n<p><img src=\"https://camo.githubusercontent.com/ba01b8ae9af4a5e588251316c826bf3e0e695f35/687474703a2f2f7777772e69626d2e636f6d2f646576656c6f706572776f726b732f636e2f6a6176612f6c2d4a6176614d656d6f72794c65616b2f312e676966\" alt></p>\n<p>Java 使用有向图的方式进行内存管理，可以消除引用循环的问题，例如有三个对象，相互引用，只要他们和根进程不可达，那么 GC 就可以回收他。这种管理方式的有点是管理内存的精度高，但是效率低。</p>\n<h2 id=\"什么是-Java-中的内存泄露\"><a href=\"#什么是-Java-中的内存泄露\" class=\"headerlink\" title=\"什么是 Java 中的内存泄露\"></a>什么是 Java 中的内存泄露</h2><p>在 Java 中，内存泄露就是存在一些被分配的对象，这些对象有两个特点。</p>\n<ul>\n<li>这些对象是可达的，即在有向图中，存在通路与其相连</li>\n<li>这些对象是无用的，即程序以后不会在使用这些对象。</li>\n</ul>\n<p>如果满足这两个条件，这些对象就可以判定为 Java 中的内存泄露，这些对象不会被 GC 回收，但却是占用着内存。</p>\n<p>对于程序猿来说， GC 基本是透明的，不可见的。虽然我们只有几个函数可以方位 GC， 例如运行 GC 的函数 <code>System.gc()</code>，但是根据 Java 语言规范定义，该函数不保证 JVM 的垃圾回收器一定会执行。因为，不同的 JVM 实现着可能使用不同的算法管理 GC。 通常 GC 的线程优先级比较低。 JVM 调用 GC 的策略也有很多种，有的是内存使用达到一定成都时， GC 才开始工作；也有定时执行，有的是平缓执行 GC， 有的是中断式执行 GC。 通常来说，我们不需要关心这些。除非在一些特定的场合， GC 的执行影响应用程序的性能，例如对于基于 Web 的实时系统，如网络游戏等，用户不希望 GC 突然终端应用程序执行而进行垃圾回收，那么我们需要调整 GC 的参数，让 GC 能够通过平缓的方式释放内存，例如将垃圾回收分解为一系列的小步骤执行， Sun 提供了 HotSpot JVM 支持这一特性。</p>\n<p>同样给出一个 Java 内存泄露的典型例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector v = <span class=\"keyword\">new</span> Vector(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    Object o = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    v.add(o);</span><br><span class=\"line\">    o = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，我们循环申请 Object 对象，并将所申请的对象放入一个 Vector 中，如果我们仅仅释放引用本身，那么 Vector 仍然应用该对象，所以这个对象对 GC 来说是不可回收的。因此，如果对象加入到 Vector 后，还必须从 Vector 中删除，最简单的方法就是将 Vector 对象设置为 null。</p>\n<h2 id=\"详细的-Java-中的内存泄露\"><a href=\"#详细的-Java-中的内存泄露\" class=\"headerlink\" title=\"详细的 Java 中的内存泄露\"></a>详细的 Java 中的内存泄露</h2><h3 id=\"Java-内存回收机制\"><a href=\"#Java-内存回收机制\" class=\"headerlink\" title=\"Java 内存回收机制\"></a>Java 内存回收机制</h3><p>不论那种语言的内存分配方式，都需要返回所分配的真实地址，也就是返回一个指针到内存块的首地址。Java 中对象是采用 new 或者反射的方法创建的，这些对象的创建都是在堆（Heap）中分配的。所有对象的回收都是由 Java 虚拟机通过垃圾回收机制完成。 GC 为了能够正确释放对象，会监控每个对象的运行状态，对他们的申请、引用、被引用、赋值等状况进行监控， Java 会使用有向图的方式进行管理内存，实时监控对象是否可以到达，如果不可以到达，则将其回收，这样也可以消除引用的循环问题。在 Java 语言中，判断一个内存空间是否符合垃圾回收标准有两个：</p>\n<pre><code>1. 给对象赋予了空值 null\n2. 给对象赋予了新值，这样重新分配了内存空间。\n</code></pre><h3 id=\"Java-内存泄漏引起的原因\"><a href=\"#Java-内存泄漏引起的原因\" class=\"headerlink\" title=\"Java 内存泄漏引起的原因\"></a>Java 内存泄漏引起的原因</h3><p>内存泄露是指无用对象（不再使用的对象）持续占有内存活无用对象的内存得不到及时释放，从而造成内存空间的浪费称为内存泄漏。内存泄漏有时不严重，不易察觉，这样开发者就不知道存在内存泄漏，但有时也很严重，会提示 Out of memory。</p>\n<p>Java 内存泄漏的根本原因是什么呢？长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏，尽管短生命周期对象已经不再需要，但是因为长生命周期持有它的引用而导致不能被释放回收，这就是 Java 中内存泄漏的发生场景，主要有一下几大类：</p>\n<ol>\n<li><p>静态集合类引起的内存泄漏：</p>\n<p>像 HashMap、Vector 等的使用最容易出现内存泄漏，这些静态变量的生命周期和应用程序一致，他们所引用的所有的对象 Object 也不能被释放，因为他们也将一直被 Vector 等引用着。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Static Vector v = <span class=\"keyword\">new</span> Vercor(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    Object o = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    v.add(o);</span><br><span class=\"line\">    o = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，循环申请 <code>Object</code> 对象，并将所申请的对象放入一个 Vector 中，如果仅仅释放引用本身（o = null），那么 Vector 仍然引用该对象，所以这个对象对 GC 来说是不可会说的。因此对象加入到 Vector 后， 还必须从 Vector 中删除，最简单的是将 Vector 设置为 null。</p>\n</li>\n<li><p>当集合里面的对象属性被修改后，再调用 remove() 方法时，不起作用</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;Person&gt; set = <span class=\"keyword\">new</span> HashSet&lt;Person&gt;();</span><br><span class=\"line\">    Person p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"唐僧\"</span>, <span class=\"string\">\"pwd1\"</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\">    Person p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"孙悟空\"</span>, <span class=\"string\">\"pwd2\"</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\">    Person p3 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"猪八戒\"</span>, <span class=\"string\">\"pwd3\"</span>, <span class=\"number\">26</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    set.add(p1);</span><br><span class=\"line\">    set.add(p2);</span><br><span class=\"line\">    set.add(p3);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"总共有：\"</span> + set.size() + <span class=\"string\">\" 个元素\"</span>);<span class=\"comment\">// 结果： 总共有 3 个元素</span></span><br><span class=\"line\">    p3.setAge(<span class=\"number\">2</span>); <span class=\"comment\">// 修改 p3 的年龄，此时 p3 元素对应的 hashcode 值发生改变</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    set.remove(p3); <span class=\"comment\">// remove 掉，造成内存泄露</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    set.add(p3); <span class=\"comment\">// 重新添加，成功</span></span><br><span class=\"line\">    </span><br><span class=\"line\">   \tSystem.out.println(<span class=\"string\">\"总共有：\"</span> + set.size() + <span class=\"string\">\" 个元素\"</span>); <span class=\"comment\">// 结果：总共有 4 个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Person person : set) &#123;</span><br><span class=\"line\">        System.out.println(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>监听器</p>\n<p>在 Java 变成中，我们需要和监听器打交道，通常一个应用当中会有多个监听器，我们会调用一个控件的例如<code>addXXXXListener()</code> 等方法来增加监听器，但往往在释放对象的时候，却没有记住去删除这些监听器，从而增加了内存泄漏的机会。</p>\n</li>\n<li><p>各种连接</p>\n<p>比如数据库连接（dataSourse.getConnection()）、 网络连接(socket) 和 io 连接，除非其显示的调用了其 <code>close()</code> 方法将其连接关闭，否则是不会自动被 GC 回收的。对于 Resultset 和 Statement 对象可以不进行显示回收，但 Connection 一定要显示回收，因为 Connection 在任何时候都无法自动回收，而 Connection 一旦回收， Resultset 和 Statement 对象就会立即2为 NULL。 但是如果使用连接池，情况就不一样了，除了要显示地关闭链接，还必须显示地关闭 Resultset 和 Statement 对象（关闭其中一个， 另外一个也会关闭），否则就会造成大量的 Statement 对象无法释放，从而引起内存泄漏。这种情况下一般都会在 try 里面去连接，在 finally 里面释放连接。</p>\n</li>\n<li><p>内部类和外部模块的引用</p>\n<p>内部类的引用是比较容易遗忘的一种，而且一旦没释放可能导致一系列的后续类对象没有释放。此外 coder 还要小心外部模块不经意的引用，例如 coder A 负责 A 模块，调用了 B 模块的一个方法： <code>public void registerMsg(Object b);</code> 这种调用就要小心，传入了一个对象，很可能模块 B 就保持了对该对象的引用，这时候就需要注意模块 B 是否提供响应的操作去除引用。</p>\n</li>\n<li><p>单例模式</p>\n<p>不正确的使用单例模式是引起内存泄漏的一个常见问题，单利对象在初始化后，将在 JVM 的整个生命周期中存在（以静态变量的方式），如果单例对象持有外部的引用，那么这个对象将不能被 JVM 正常回收，导致内存泄漏。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">A</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        B.getInstance().setA(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// B 采用单例模式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> A a;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> B instance = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">b</span> <span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> B <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instacne;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setA</span> <span class=\"params\">(A a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = a;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// .........</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然 B 采用 singleton 模式， 它持有一个 A 对象的引用，而这个类的对象将不能被回收。想象下如果 A 是个比较复杂的对象或者集合类型会发生什么。</p>\n</li>\n</ol>\n<h2 id=\"Android-中常见的内存泄漏汇总\"><a href=\"#Android-中常见的内存泄漏汇总\" class=\"headerlink\" title=\"Android  中常见的内存泄漏汇总\"></a>Android  中常见的内存泄漏汇总</h2><h3 id=\"集合类泄漏\"><a href=\"#集合类泄漏\" class=\"headerlink\" title=\"集合类泄漏\"></a>集合类泄漏</h3><p>集合类如果仅仅有添加元素的方法，而没有相应的删除机制，导致内存被占用。如果这个集合类是全局性的变量（比如类中的静态属性，全局性的 map 等即有静态引用或 final 一直指向它），那么没有相应的删除机制，很可能导致集合所占用的内存只增不减。比如上面的例子中就是其中一种情况，当然实际上我们在项目中肯定不会这样谢代码，但稍不注意还是很容易出现这种情况。</p>\n<h3 id=\"单例造成的内存泄露\"><a href=\"#单例造成的内存泄露\" class=\"headerlink\" title=\"单例造成的内存泄露\"></a>单例造成的内存泄露</h3><p>由于单利的静态特性使得其生命周期跟应用一样长，所以如果使用不恰当的话，很容易造成内存泄漏。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AppManager instance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context context;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">AppManager</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.connect = connect;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AppManager <span class=\"title\">getInstance</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> AppManager(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个普通的单例模式，当创建这个单例的时候，由于需要传入一个 Context， 所以这个 Context 的生命周期的长短至关重要：</p>\n<ol>\n<li>如果此时传入的是 Application 的 Context， 因为 Application 的生命周期就是这个应用的生命周期，所以这将没有任何问题。</li>\n<li>如果此时传入的是 Activity 的 Context，当这个 Context 所对应的 Activity 退出时，由于该 Context 的应用被单例对象所持有，其生命周期等于整个应用程序的生命周期，所以当前 Activity 退出时，它的内存并不会被释放，就会造成泄漏。</li>\n</ol>\n<p><strong>正确的方式应修改为：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppManager</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AppManager instance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context context;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">AppManager</span> <span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.context = context.getApplicationContext();<span class=\"comment\">// 使用 Application 的 context</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AppManager <span class=\"title\">getInstance</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> AppManager(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者这样写，连 Context 都不用传进来：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在你的 Application 中添加一个静态方法， getContext() 返回 Application 的 context</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">context = getApplicationContext();</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取全局的 Context</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 返回全局的 context 对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Context <span class=\"title\">getContext</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    reutnr context;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AppManager instance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context context;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">AppManager</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.context = MyApplication.getContext();<span class=\"comment\">// 使用 Application 的 context</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> staitc AppManager <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> AppManager();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"匿名内部类-非静态内部类和异步线程\"><a href=\"#匿名内部类-非静态内部类和异步线程\" class=\"headerlink\" title=\"匿名内部类/非静态内部类和异步线程\"></a>匿名内部类/非静态内部类和异步线程</h3><p>非静态内部类创建静态实例造成的内存泄漏</p>\n<p>有的时候我们可能会在启动频繁的 Activity 中，为了避免重复创建相同资源，可能会出现这种写法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> staitc TestResource mResource = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mResource == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mResource = <span class=\"keyword\">new</span> TestResource();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestResource</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//....</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就在 Activity 内部创建了一个非静态内部类的单例，每次启动 Activity 都会使用该单利的数据，这样虽然避免了资源的重复创建，不过这种写法却造成了内存写泄漏，因为<strong>非静态内部类默认会持有外部类的引用</strong>，而该非静态内部类又创建了一个静态实例，该实例的生命周期和应用一样长，这就导致了该静态实例一直会持有该 Activity 的引用，导致 Activity 的内存资源不能正常回收。正确的做法：</p>\n<p>将该内部类设为静态内部类或者将该内部类抽取出来封装成单例，如果需要使用 Context， 按照上一个方法推荐使用 Application 中的 Context。 当然 Application 的 Context 不是万能的，所以也不能随便乱用，对于有些地方则是必须使用 Activity 的 Context ，对于 Application，Service， Activity 三者的 Context 的应用场景如下：</p>\n<p><img src=\"https://camo.githubusercontent.com/dee4aecb8a80c4e73337b56ee01cbffa2a8049dd/687474703a2f2f696d672e626c6f672e6373646e2e6e65742f32303135313132333134343232363334393f73706d3d353137362e3130303233392e626c6f67636f6e742e392e437455316334\" alt=\"Application, Service, Activity 的 Context 使用场景\"></p>\n<p>其中：NO1 表示 Application 和 Service 可以启动一个 Activity，不过需要创建一个新的 task 任务队列。而对于 Dialog 而言，只有在 Activity 中才能创建。</p>\n<h3 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h3><p>Android 开发经常会继承实现 Activity/Fragment/View， 此时如果你使用了匿名类，并被异步线程持有，如果没有任何措施这样一定会导致泄漏</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    Runnable ref1 = <span class=\"keyword\">new</span> MyRunnable();</span><br><span class=\"line\">    Runnable ref2 = <span class=\"keyword\">new</span> Runnable ()&#123;</span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           ....</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ref1 和 ref2 的区别是， ref2 使用了匿名内部类。我们看一下运行时，这两个引用的内存：</p>\n<p><img src=\"https://camo.githubusercontent.com/2b1a52551d828d9640f23ee7c2802476b02ccec3/687474703a2f2f696d67322e746263646e2e636e2f4c312f3436312f312f666230356666366432653638663330396239346464383433353263383161636665306165383339653f73706d3d353137362e3130303233392e626c6f67636f6e742e31302e437455316334\" alt></p>\n<p>可以看到 ref1 没什么特别的。</p>\n<p>但 ref2 这个匿名类的实现对象里面多了一个引用：</p>\n<p>this$0 这个引用指向 MainActivity.this， 也就是说当前的 MainActivity 实例会被 ref2 持有，如果将这个引用再传入一个异步线程，此线程和此 Activity 生命周期不一致的时候，就会造成内存泄漏。</p>\n<h3 id=\"Handler-造成的内存泄漏\"><a href=\"#Handler-造成的内存泄漏\" class=\"headerlink\" title=\"Handler 造成的内存泄漏\"></a>Handler 造成的内存泄漏</h3><p>Handler 的使用造成的内存泄漏问题应该说是最常见的，但很多时候我们为了避免 ANR 而不在主线程中进行耗时操作，在处理网络任务或者封装一些请求回调等 api 都借助 Handler 来处理，但 Handler 不是万能的，对于 Handler 的使用代码编写不规范就有可能造成内存泄漏。另外，我们知道 Handler、Message 和 MessageQueue 都是相互关联在一起的，万一 Handler 发送的 Message 尚未被处理，则该 Message 及发送它的 Handler 对象将被线程 MessageQueue 一直持有。</p>\n<p>由于 Handler 属于 TLS（Thread Local Storage）变量，生命周期和 Activity 是不一致的。因此这种实现方式一般很难保证跟 View 或者 Activity 的生命周期保持一致，很容易导致无法正确释放。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Handler mLeakyHandler = <span class=\"keyword\">new</span> Handerl()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundler savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"comment\">// post a message and delay its execution for 10 minutes.</span></span><br><span class=\"line\">        mLeakHandler.postDelayed(<span class=\"keyword\">new</span> Runnable()&#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span> * <span class=\"number\">6</span> * <span class=\"number\">10</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// go back to the previous Activity</span></span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在该例中，生命了一个延时 10 分钟执行的消息 Message， mLeakyHandler 将其 push 进了消息队列 MessageQueue 中。当 Activity 被 finish() 掉，延时任务的 Message 还会继续存在于主线程中，它持有该 Activity 的 Handler 引用，此时 finish() 掉的 Activity 就不会被回收，从而造成内存泄漏（<strong>因 Handler 为非静态内部类，会持有外部类的引用，在这里就是 MainActivity</strong>）.</p>\n<p>修复方法：在 Activity 中避免使用非静态内部类，比如上面我们将 Handler 生命为静态的，则其存活期和 Activity的 生命周期无关了，同时通过弱引用的方式引入 Activity，避免直接将 Activity 作为 Context 传入， 如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Instence of static inner classes do not bold an implicit reference to their outer class</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;SampleActivity&gt; mActivity;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyHandler</span> <span class=\"params\">(SampleActivity activity)</span> </span>&#123;</span><br><span class=\"line\">            mActivity = <span class=\"keyword\">new</span> WeakReference&lt;SampleActivity&gt;(activity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span> <span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">            SampleActivity activity = mActivity.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(activity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//....</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MyHandler mHandler = <span class=\"keyword\">new</span> MyHandler(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Instance of anonymous classes do not hold an implicit </span></span><br><span class=\"line\"><span class=\"comment\">    * reference to their outer class when they are \"static\"</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Runnable sRunnable = <span class=\"keyword\">new</span> Runnable ()\t&#123;</span><br><span class=\"line\">     \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundler savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Post a message and delay its execution for 10 mintues.</span></span><br><span class=\"line\">        mHandler.postDelay(sRunnable, <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">10</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// go back to the previous Activity</span></span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>综述， 即推荐使用静态内部类 + WeakReference 这种方式。每次使用前注意判空。</p>\n<p>前面提到的 WeakReference，所以这里简单说下 Java 中对象的几种引用类型。</p>\n<p>Java 对引用分为 StrongReference， SoftReference， WeakReference和 PhantomReference 四种。</p>\n<table>\n<thead>\n<tr>\n<th>级别</th>\n<th style=\"text-align:left\">回收时机</th>\n<th style=\"text-align:left\">用途</th>\n<th>生存时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>强(StrongReference)</td>\n<td style=\"text-align:left\">从来不会</td>\n<td style=\"text-align:left\">对象的一般状态</td>\n<td>JVM 停止运行时终止</td>\n</tr>\n<tr>\n<td>软(SoftReference)</td>\n<td style=\"text-align:left\">在内存不足时</td>\n<td style=\"text-align:left\">联合 ReferenceQueue 构造有效期短/占内存大/生命周期长的对象的二级高速缓冲器(内存不足才清空)</td>\n<td>内存不足时终止</td>\n</tr>\n<tr>\n<td>弱（WeakReference）</td>\n<td style=\"text-align:left\">在垃圾回收时</td>\n<td style=\"text-align:left\">联合 ReferenceQueue 构造有效期短/占内存大/生命周期长的对象的一级高速缓冲器(系统发生 gc 则清空)</td>\n<td>gc 运行后终止</td>\n</tr>\n<tr>\n<td>虚（PhantomReference）</td>\n<td style=\"text-align:left\">在垃圾回收时</td>\n<td style=\"text-align:left\">联合 ReferenceQueue 来跟踪对象被垃圾回收器回收的活动</td>\n<td>gc 运行后终止</td>\n</tr>\n</tbody>\n</table>\n<p>在 Android 应用开发中，为了防止内存溢出，在处理一些占用内存大而且生命周期较长的对象时候，可以尽量应用软引用和弱引用技术。</p>\n<p>软/弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java 虚拟机就会把这个软引用加入到与之关联得的引用队列中。利用这个队列可以得知被回收的软/弱引用的对象列表，从而为缓冲器清楚已失效的软/弱引用。</p>\n<p>假设我们的应用会用到大量的默认图片，比如应用中有默认的头像，默认游戏图标等等，这些图片很多地方会用到。如果每次去读取图片，由于读取文件需要硬件操作，速度很慢，会导致性能较低。所以我们考虑将图片缓存起来，需要的时候直接从内存中读取。但是由于图片占用空间比较大，缓存很多图片需要很多的内存，就可能比较容易发生 OutOfMemery 异常。这时我们可以考虑使用软/弱引用技术来避免这个问题发生。以下是高速缓冲器的雏形：</p>\n<p>首先定义一个 HashMap，保存软引用对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Map&lt;String, SoftReference&lt;Bitmap&gt;&gt; imageCache = new HashMap&lt;String, SoftReference&lt;Bitmap&gt;&gt;();</span><br></pre></td></tr></table></figure>\n<p>再定义一个方法，保存 bitmap 的软引用到 HashMap。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CacheBySoftRef</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先定义一个 HashMap，保存软引用对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, SoftReference&lt;Bitmap&gt;&gt; imageCache = <span class=\"keyword\">new</span> HashMap&lt;String, SoftReference&lt;Bitmap&gt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 再定义一个方法，保存 bitmap 的软引用到 HashMap。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBitmapToCache</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 强引用的 Bitmap 对象</span></span><br><span class=\"line\">        Bitmap bitmap = BitmapFactory.decodeFile(path);</span><br><span class=\"line\">        <span class=\"comment\">// 软引用的 bitmap 对象</span></span><br><span class=\"line\">        SoftReference&lt;Bitmap&gt; softBitmap = <span class=\"keyword\">new</span> SoftReference&lt;Bitmap&gt;(bitmap);</span><br><span class=\"line\">        imageCache.put(path, softBitmap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取的时候，可以通过 SoftReference 的 get() 方法得到 bitmap 对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmapByPath</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从缓存中取软引用的 bitmap 对象</span></span><br><span class=\"line\">        SoftReference&lt;Bitmap&gt; softBitmap = imageCache.get(path);</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否存在软引用</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (softBitmap == <span class=\"keyword\">null</span>)  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 通过软引用取出 bitmap 对象，如果由于内存不足 Bitmap 被回收，将取到空，如果未被回收，则可重复使用，提高速度</span></span><br><span class=\"line\">        Bitmap bitmap = softBitmap.get();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bitmap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Android-内存管理\"><a href=\"#Android-内存管理\" class=\"headerlink\" title=\"Android 内存管理\"></a>Android 内存管理</h1><p>内存管理的目的就是我们在开发中怎么有效的避免我们的应用程序出现内存泄露问题。内存泄露简短粗俗的讲，就是该被释放的对象没有释放，一直被某个或某些实例所持有却不被使用，导致 GC 不能回收。</p>\n<h2 id=\"Java-内存分配策略\"><a href=\"#Java-内存分配策略\" class=\"headerlink\" title=\"Java 内存分配策略\"></a>Java 内存分配策略</h2><p>Java 程序运行时的内存分配策略有三种，分别是静态分配、栈式分配和堆式分配。对应的三种存储策略使用的内存空间主要分别是静态存储区（方法区）、栈区和堆区。</p>\n<ul>\n<li>静态存储区（方法区）：主要存放静态数据，全局 static 数据和常量。这块内存在程序编译时就已经分配好，并且在程序整个运行期间都存在。</li>\n<li>栈区：当方法被执行时，方法体内的局部变量（其中包括基础数据类型、对象引用）都在栈上创建，并在方法执行结束时这些局部变量所持有的内存将会自动被释放。因此栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。</li>\n<li>堆区：又称动态内存分配，通常就是在程序运行时直接 new 出来的内存，也就是对象的实例。这部分内存在不使用时，将会由 Java 垃圾回收器负责回收。</li>\n</ul>\n<h2 id=\"堆与栈的区别：\"><a href=\"#堆与栈的区别：\" class=\"headerlink\" title=\"堆与栈的区别：\"></a>堆与栈的区别：</h2><p>在方法体内定义的（局部变量）一些基本类型的变量和对象的引用都是在方法的栈内存中分配的。当在一段方法块中定义一个变量时，Java 就会在栈中为该变量分配内存空间，当超过该变量的作用域后，该变量也就无效了，分配给它的内存空间也将被释放掉，该内存空间可以被重新使用。</p>\n<p>堆内存用来存放所有由 new 创建的对象（包括该对象其中的所有成员变量）和数组。在堆中分配的内存，将由 Java 垃圾回收器来自动管理。在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊变量，这个变量的取值等于数组或者对象在内存中的首地址，这个特殊的变量就是我们上面说的引用变量。我们可以通过这个引用变量来访问堆中的对象或者数组。</p>\n<p>举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sample</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Sample sample1 = <span class=\"keyword\">new</span> Sample();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">        Sample sample2 = <span class=\"keyword\">new</span> Sample();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Sample sample3 = <span class=\"keyword\">new</span> Sample();</span><br></pre></td></tr></table></figure>\n<p>Sample 类的局部变量 s2 和引用变量 sample2 都是存在于栈中，但 smaple2 指向的对象是存在于堆中。 sample3 指向的对象存放在堆中，包括这个对象的所有成员变量 s1 和 sample1， 而它自己存在与栈中。</p>\n<p><strong>结论：</strong></p>\n<ul>\n<li>局部变量的脚本数据类型和引用存储在栈中，引用的对象实体存储于堆中。—— 因为他们属于方法中的变量，生命周期随方法而结束</li>\n<li>成员变量全部存储于堆中（包括基本数据类型，引用和引用的对象实体）。—— 因为他们属于类，类对象终究是要被 new 出来使用的。</li>\n</ul>\n<h2 id=\"Java-是如何管理内存\"><a href=\"#Java-是如何管理内存\" class=\"headerlink\" title=\"Java 是如何管理内存\"></a>Java 是如何管理内存</h2><p>Java 的内存管理就是对象的分配和释放的问题。在 Java 中，coder 需要通过关键字 new 为每一个对象申请新的存储空间（基本类型除外），所有的对象都在 堆（Heap）中分配空间。另外对象的释放是由 GC 决定和执行的，在 Java 中，内存分配是由 coder 完成的，而内存释放是由 GC 完成的。这种收支两条线的方法简化了 coder 的工作。同时也加重了 JVM 的工作。也是 Java 程序运行速度慢的原因之一。因为 GC 为了能够正确释放对象， GC 必须监控每一个对象的运行状态，包括对象的申请、引用、被引用、赋值等，GC 都需要监控。</p>\n<p>监控对象状态是为了更准确、及时地释放对象，而释放对象的根本原则就是该对象不在被引用。</p>\n<p><img src=\"https://camo.githubusercontent.com/ba01b8ae9af4a5e588251316c826bf3e0e695f35/687474703a2f2f7777772e69626d2e636f6d2f646576656c6f706572776f726b732f636e2f6a6176612f6c2d4a6176614d656d6f72794c65616b2f312e676966\" alt></p>\n<p>Java 使用有向图的方式进行内存管理，可以消除引用循环的问题，例如有三个对象，相互引用，只要他们和根进程不可达，那么 GC 就可以回收他。这种管理方式的有点是管理内存的精度高，但是效率低。</p>\n<h2 id=\"什么是-Java-中的内存泄露\"><a href=\"#什么是-Java-中的内存泄露\" class=\"headerlink\" title=\"什么是 Java 中的内存泄露\"></a>什么是 Java 中的内存泄露</h2><p>在 Java 中，内存泄露就是存在一些被分配的对象，这些对象有两个特点。</p>\n<ul>\n<li>这些对象是可达的，即在有向图中，存在通路与其相连</li>\n<li>这些对象是无用的，即程序以后不会在使用这些对象。</li>\n</ul>\n<p>如果满足这两个条件，这些对象就可以判定为 Java 中的内存泄露，这些对象不会被 GC 回收，但却是占用着内存。</p>\n<p>对于程序猿来说， GC 基本是透明的，不可见的。虽然我们只有几个函数可以方位 GC， 例如运行 GC 的函数 <code>System.gc()</code>，但是根据 Java 语言规范定义，该函数不保证 JVM 的垃圾回收器一定会执行。因为，不同的 JVM 实现着可能使用不同的算法管理 GC。 通常 GC 的线程优先级比较低。 JVM 调用 GC 的策略也有很多种，有的是内存使用达到一定成都时， GC 才开始工作；也有定时执行，有的是平缓执行 GC， 有的是中断式执行 GC。 通常来说，我们不需要关心这些。除非在一些特定的场合， GC 的执行影响应用程序的性能，例如对于基于 Web 的实时系统，如网络游戏等，用户不希望 GC 突然终端应用程序执行而进行垃圾回收，那么我们需要调整 GC 的参数，让 GC 能够通过平缓的方式释放内存，例如将垃圾回收分解为一系列的小步骤执行， Sun 提供了 HotSpot JVM 支持这一特性。</p>\n<p>同样给出一个 Java 内存泄露的典型例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector v = <span class=\"keyword\">new</span> Vector(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    Object o = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    v.add(o);</span><br><span class=\"line\">    o = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，我们循环申请 Object 对象，并将所申请的对象放入一个 Vector 中，如果我们仅仅释放引用本身，那么 Vector 仍然应用该对象，所以这个对象对 GC 来说是不可回收的。因此，如果对象加入到 Vector 后，还必须从 Vector 中删除，最简单的方法就是将 Vector 对象设置为 null。</p>\n<h2 id=\"详细的-Java-中的内存泄露\"><a href=\"#详细的-Java-中的内存泄露\" class=\"headerlink\" title=\"详细的 Java 中的内存泄露\"></a>详细的 Java 中的内存泄露</h2><h3 id=\"Java-内存回收机制\"><a href=\"#Java-内存回收机制\" class=\"headerlink\" title=\"Java 内存回收机制\"></a>Java 内存回收机制</h3><p>不论那种语言的内存分配方式，都需要返回所分配的真实地址，也就是返回一个指针到内存块的首地址。Java 中对象是采用 new 或者反射的方法创建的，这些对象的创建都是在堆（Heap）中分配的。所有对象的回收都是由 Java 虚拟机通过垃圾回收机制完成。 GC 为了能够正确释放对象，会监控每个对象的运行状态，对他们的申请、引用、被引用、赋值等状况进行监控， Java 会使用有向图的方式进行管理内存，实时监控对象是否可以到达，如果不可以到达，则将其回收，这样也可以消除引用的循环问题。在 Java 语言中，判断一个内存空间是否符合垃圾回收标准有两个：</p>\n<pre><code>1. 给对象赋予了空值 null\n2. 给对象赋予了新值，这样重新分配了内存空间。\n</code></pre><h3 id=\"Java-内存泄漏引起的原因\"><a href=\"#Java-内存泄漏引起的原因\" class=\"headerlink\" title=\"Java 内存泄漏引起的原因\"></a>Java 内存泄漏引起的原因</h3><p>内存泄露是指无用对象（不再使用的对象）持续占有内存活无用对象的内存得不到及时释放，从而造成内存空间的浪费称为内存泄漏。内存泄漏有时不严重，不易察觉，这样开发者就不知道存在内存泄漏，但有时也很严重，会提示 Out of memory。</p>\n<p>Java 内存泄漏的根本原因是什么呢？长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏，尽管短生命周期对象已经不再需要，但是因为长生命周期持有它的引用而导致不能被释放回收，这就是 Java 中内存泄漏的发生场景，主要有一下几大类：</p>\n<ol>\n<li><p>静态集合类引起的内存泄漏：</p>\n<p>像 HashMap、Vector 等的使用最容易出现内存泄漏，这些静态变量的生命周期和应用程序一致，他们所引用的所有的对象 Object 也不能被释放，因为他们也将一直被 Vector 等引用着。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Static Vector v = <span class=\"keyword\">new</span> Vercor(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    Object o = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    v.add(o);</span><br><span class=\"line\">    o = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，循环申请 <code>Object</code> 对象，并将所申请的对象放入一个 Vector 中，如果仅仅释放引用本身（o = null），那么 Vector 仍然引用该对象，所以这个对象对 GC 来说是不可会说的。因此对象加入到 Vector 后， 还必须从 Vector 中删除，最简单的是将 Vector 设置为 null。</p>\n</li>\n<li><p>当集合里面的对象属性被修改后，再调用 remove() 方法时，不起作用</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;Person&gt; set = <span class=\"keyword\">new</span> HashSet&lt;Person&gt;();</span><br><span class=\"line\">    Person p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"唐僧\"</span>, <span class=\"string\">\"pwd1\"</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\">    Person p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"孙悟空\"</span>, <span class=\"string\">\"pwd2\"</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\">    Person p3 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"猪八戒\"</span>, <span class=\"string\">\"pwd3\"</span>, <span class=\"number\">26</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    set.add(p1);</span><br><span class=\"line\">    set.add(p2);</span><br><span class=\"line\">    set.add(p3);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"总共有：\"</span> + set.size() + <span class=\"string\">\" 个元素\"</span>);<span class=\"comment\">// 结果： 总共有 3 个元素</span></span><br><span class=\"line\">    p3.setAge(<span class=\"number\">2</span>); <span class=\"comment\">// 修改 p3 的年龄，此时 p3 元素对应的 hashcode 值发生改变</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    set.remove(p3); <span class=\"comment\">// remove 掉，造成内存泄露</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    set.add(p3); <span class=\"comment\">// 重新添加，成功</span></span><br><span class=\"line\">    </span><br><span class=\"line\">   \tSystem.out.println(<span class=\"string\">\"总共有：\"</span> + set.size() + <span class=\"string\">\" 个元素\"</span>); <span class=\"comment\">// 结果：总共有 4 个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Person person : set) &#123;</span><br><span class=\"line\">        System.out.println(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>监听器</p>\n<p>在 Java 变成中，我们需要和监听器打交道，通常一个应用当中会有多个监听器，我们会调用一个控件的例如<code>addXXXXListener()</code> 等方法来增加监听器，但往往在释放对象的时候，却没有记住去删除这些监听器，从而增加了内存泄漏的机会。</p>\n</li>\n<li><p>各种连接</p>\n<p>比如数据库连接（dataSourse.getConnection()）、 网络连接(socket) 和 io 连接，除非其显示的调用了其 <code>close()</code> 方法将其连接关闭，否则是不会自动被 GC 回收的。对于 Resultset 和 Statement 对象可以不进行显示回收，但 Connection 一定要显示回收，因为 Connection 在任何时候都无法自动回收，而 Connection 一旦回收， Resultset 和 Statement 对象就会立即2为 NULL。 但是如果使用连接池，情况就不一样了，除了要显示地关闭链接，还必须显示地关闭 Resultset 和 Statement 对象（关闭其中一个， 另外一个也会关闭），否则就会造成大量的 Statement 对象无法释放，从而引起内存泄漏。这种情况下一般都会在 try 里面去连接，在 finally 里面释放连接。</p>\n</li>\n<li><p>内部类和外部模块的引用</p>\n<p>内部类的引用是比较容易遗忘的一种，而且一旦没释放可能导致一系列的后续类对象没有释放。此外 coder 还要小心外部模块不经意的引用，例如 coder A 负责 A 模块，调用了 B 模块的一个方法： <code>public void registerMsg(Object b);</code> 这种调用就要小心，传入了一个对象，很可能模块 B 就保持了对该对象的引用，这时候就需要注意模块 B 是否提供响应的操作去除引用。</p>\n</li>\n<li><p>单例模式</p>\n<p>不正确的使用单例模式是引起内存泄漏的一个常见问题，单利对象在初始化后，将在 JVM 的整个生命周期中存在（以静态变量的方式），如果单例对象持有外部的引用，那么这个对象将不能被 JVM 正常回收，导致内存泄漏。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">A</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        B.getInstance().setA(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// B 采用单例模式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> A a;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> B instance = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">b</span> <span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> B <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instacne;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setA</span> <span class=\"params\">(A a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = a;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// .........</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然 B 采用 singleton 模式， 它持有一个 A 对象的引用，而这个类的对象将不能被回收。想象下如果 A 是个比较复杂的对象或者集合类型会发生什么。</p>\n</li>\n</ol>\n<h2 id=\"Android-中常见的内存泄漏汇总\"><a href=\"#Android-中常见的内存泄漏汇总\" class=\"headerlink\" title=\"Android  中常见的内存泄漏汇总\"></a>Android  中常见的内存泄漏汇总</h2><h3 id=\"集合类泄漏\"><a href=\"#集合类泄漏\" class=\"headerlink\" title=\"集合类泄漏\"></a>集合类泄漏</h3><p>集合类如果仅仅有添加元素的方法，而没有相应的删除机制，导致内存被占用。如果这个集合类是全局性的变量（比如类中的静态属性，全局性的 map 等即有静态引用或 final 一直指向它），那么没有相应的删除机制，很可能导致集合所占用的内存只增不减。比如上面的例子中就是其中一种情况，当然实际上我们在项目中肯定不会这样谢代码，但稍不注意还是很容易出现这种情况。</p>\n<h3 id=\"单例造成的内存泄露\"><a href=\"#单例造成的内存泄露\" class=\"headerlink\" title=\"单例造成的内存泄露\"></a>单例造成的内存泄露</h3><p>由于单利的静态特性使得其生命周期跟应用一样长，所以如果使用不恰当的话，很容易造成内存泄漏。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AppManager instance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context context;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">AppManager</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.connect = connect;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AppManager <span class=\"title\">getInstance</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> AppManager(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个普通的单例模式，当创建这个单例的时候，由于需要传入一个 Context， 所以这个 Context 的生命周期的长短至关重要：</p>\n<ol>\n<li>如果此时传入的是 Application 的 Context， 因为 Application 的生命周期就是这个应用的生命周期，所以这将没有任何问题。</li>\n<li>如果此时传入的是 Activity 的 Context，当这个 Context 所对应的 Activity 退出时，由于该 Context 的应用被单例对象所持有，其生命周期等于整个应用程序的生命周期，所以当前 Activity 退出时，它的内存并不会被释放，就会造成泄漏。</li>\n</ol>\n<p><strong>正确的方式应修改为：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppManager</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AppManager instance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context context;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">AppManager</span> <span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.context = context.getApplicationContext();<span class=\"comment\">// 使用 Application 的 context</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AppManager <span class=\"title\">getInstance</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> AppManager(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者这样写，连 Context 都不用传进来：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在你的 Application 中添加一个静态方法， getContext() 返回 Application 的 context</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">context = getApplicationContext();</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取全局的 Context</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 返回全局的 context 对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Context <span class=\"title\">getContext</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    reutnr context;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AppManager instance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context context;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">AppManager</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.context = MyApplication.getContext();<span class=\"comment\">// 使用 Application 的 context</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> staitc AppManager <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> AppManager();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"匿名内部类-非静态内部类和异步线程\"><a href=\"#匿名内部类-非静态内部类和异步线程\" class=\"headerlink\" title=\"匿名内部类/非静态内部类和异步线程\"></a>匿名内部类/非静态内部类和异步线程</h3><p>非静态内部类创建静态实例造成的内存泄漏</p>\n<p>有的时候我们可能会在启动频繁的 Activity 中，为了避免重复创建相同资源，可能会出现这种写法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> staitc TestResource mResource = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mResource == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mResource = <span class=\"keyword\">new</span> TestResource();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestResource</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//....</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就在 Activity 内部创建了一个非静态内部类的单例，每次启动 Activity 都会使用该单利的数据，这样虽然避免了资源的重复创建，不过这种写法却造成了内存写泄漏，因为<strong>非静态内部类默认会持有外部类的引用</strong>，而该非静态内部类又创建了一个静态实例，该实例的生命周期和应用一样长，这就导致了该静态实例一直会持有该 Activity 的引用，导致 Activity 的内存资源不能正常回收。正确的做法：</p>\n<p>将该内部类设为静态内部类或者将该内部类抽取出来封装成单例，如果需要使用 Context， 按照上一个方法推荐使用 Application 中的 Context。 当然 Application 的 Context 不是万能的，所以也不能随便乱用，对于有些地方则是必须使用 Activity 的 Context ，对于 Application，Service， Activity 三者的 Context 的应用场景如下：</p>\n<p><img src=\"https://camo.githubusercontent.com/dee4aecb8a80c4e73337b56ee01cbffa2a8049dd/687474703a2f2f696d672e626c6f672e6373646e2e6e65742f32303135313132333134343232363334393f73706d3d353137362e3130303233392e626c6f67636f6e742e392e437455316334\" alt=\"Application, Service, Activity 的 Context 使用场景\"></p>\n<p>其中：NO1 表示 Application 和 Service 可以启动一个 Activity，不过需要创建一个新的 task 任务队列。而对于 Dialog 而言，只有在 Activity 中才能创建。</p>\n<h3 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h3><p>Android 开发经常会继承实现 Activity/Fragment/View， 此时如果你使用了匿名类，并被异步线程持有，如果没有任何措施这样一定会导致泄漏</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    Runnable ref1 = <span class=\"keyword\">new</span> MyRunnable();</span><br><span class=\"line\">    Runnable ref2 = <span class=\"keyword\">new</span> Runnable ()&#123;</span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           ....</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ref1 和 ref2 的区别是， ref2 使用了匿名内部类。我们看一下运行时，这两个引用的内存：</p>\n<p><img src=\"https://camo.githubusercontent.com/2b1a52551d828d9640f23ee7c2802476b02ccec3/687474703a2f2f696d67322e746263646e2e636e2f4c312f3436312f312f666230356666366432653638663330396239346464383433353263383161636665306165383339653f73706d3d353137362e3130303233392e626c6f67636f6e742e31302e437455316334\" alt></p>\n<p>可以看到 ref1 没什么特别的。</p>\n<p>但 ref2 这个匿名类的实现对象里面多了一个引用：</p>\n<p>this$0 这个引用指向 MainActivity.this， 也就是说当前的 MainActivity 实例会被 ref2 持有，如果将这个引用再传入一个异步线程，此线程和此 Activity 生命周期不一致的时候，就会造成内存泄漏。</p>\n<h3 id=\"Handler-造成的内存泄漏\"><a href=\"#Handler-造成的内存泄漏\" class=\"headerlink\" title=\"Handler 造成的内存泄漏\"></a>Handler 造成的内存泄漏</h3><p>Handler 的使用造成的内存泄漏问题应该说是最常见的，但很多时候我们为了避免 ANR 而不在主线程中进行耗时操作，在处理网络任务或者封装一些请求回调等 api 都借助 Handler 来处理，但 Handler 不是万能的，对于 Handler 的使用代码编写不规范就有可能造成内存泄漏。另外，我们知道 Handler、Message 和 MessageQueue 都是相互关联在一起的，万一 Handler 发送的 Message 尚未被处理，则该 Message 及发送它的 Handler 对象将被线程 MessageQueue 一直持有。</p>\n<p>由于 Handler 属于 TLS（Thread Local Storage）变量，生命周期和 Activity 是不一致的。因此这种实现方式一般很难保证跟 View 或者 Activity 的生命周期保持一致，很容易导致无法正确释放。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Handler mLeakyHandler = <span class=\"keyword\">new</span> Handerl()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundler savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"comment\">// post a message and delay its execution for 10 minutes.</span></span><br><span class=\"line\">        mLeakHandler.postDelayed(<span class=\"keyword\">new</span> Runnable()&#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span> * <span class=\"number\">6</span> * <span class=\"number\">10</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// go back to the previous Activity</span></span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在该例中，生命了一个延时 10 分钟执行的消息 Message， mLeakyHandler 将其 push 进了消息队列 MessageQueue 中。当 Activity 被 finish() 掉，延时任务的 Message 还会继续存在于主线程中，它持有该 Activity 的 Handler 引用，此时 finish() 掉的 Activity 就不会被回收，从而造成内存泄漏（<strong>因 Handler 为非静态内部类，会持有外部类的引用，在这里就是 MainActivity</strong>）.</p>\n<p>修复方法：在 Activity 中避免使用非静态内部类，比如上面我们将 Handler 生命为静态的，则其存活期和 Activity的 生命周期无关了，同时通过弱引用的方式引入 Activity，避免直接将 Activity 作为 Context 传入， 如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Instence of static inner classes do not bold an implicit reference to their outer class</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;SampleActivity&gt; mActivity;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyHandler</span> <span class=\"params\">(SampleActivity activity)</span> </span>&#123;</span><br><span class=\"line\">            mActivity = <span class=\"keyword\">new</span> WeakReference&lt;SampleActivity&gt;(activity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span> <span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">            SampleActivity activity = mActivity.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(activity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//....</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MyHandler mHandler = <span class=\"keyword\">new</span> MyHandler(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Instance of anonymous classes do not hold an implicit </span></span><br><span class=\"line\"><span class=\"comment\">    * reference to their outer class when they are \"static\"</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Runnable sRunnable = <span class=\"keyword\">new</span> Runnable ()\t&#123;</span><br><span class=\"line\">     \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundler savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Post a message and delay its execution for 10 mintues.</span></span><br><span class=\"line\">        mHandler.postDelay(sRunnable, <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">10</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// go back to the previous Activity</span></span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>综述， 即推荐使用静态内部类 + WeakReference 这种方式。每次使用前注意判空。</p>\n<p>前面提到的 WeakReference，所以这里简单说下 Java 中对象的几种引用类型。</p>\n<p>Java 对引用分为 StrongReference， SoftReference， WeakReference和 PhantomReference 四种。</p>\n<table>\n<thead>\n<tr>\n<th>级别</th>\n<th style=\"text-align:left\">回收时机</th>\n<th style=\"text-align:left\">用途</th>\n<th>生存时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>强(StrongReference)</td>\n<td style=\"text-align:left\">从来不会</td>\n<td style=\"text-align:left\">对象的一般状态</td>\n<td>JVM 停止运行时终止</td>\n</tr>\n<tr>\n<td>软(SoftReference)</td>\n<td style=\"text-align:left\">在内存不足时</td>\n<td style=\"text-align:left\">联合 ReferenceQueue 构造有效期短/占内存大/生命周期长的对象的二级高速缓冲器(内存不足才清空)</td>\n<td>内存不足时终止</td>\n</tr>\n<tr>\n<td>弱（WeakReference）</td>\n<td style=\"text-align:left\">在垃圾回收时</td>\n<td style=\"text-align:left\">联合 ReferenceQueue 构造有效期短/占内存大/生命周期长的对象的一级高速缓冲器(系统发生 gc 则清空)</td>\n<td>gc 运行后终止</td>\n</tr>\n<tr>\n<td>虚（PhantomReference）</td>\n<td style=\"text-align:left\">在垃圾回收时</td>\n<td style=\"text-align:left\">联合 ReferenceQueue 来跟踪对象被垃圾回收器回收的活动</td>\n<td>gc 运行后终止</td>\n</tr>\n</tbody>\n</table>\n<p>在 Android 应用开发中，为了防止内存溢出，在处理一些占用内存大而且生命周期较长的对象时候，可以尽量应用软引用和弱引用技术。</p>\n<p>软/弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java 虚拟机就会把这个软引用加入到与之关联得的引用队列中。利用这个队列可以得知被回收的软/弱引用的对象列表，从而为缓冲器清楚已失效的软/弱引用。</p>\n<p>假设我们的应用会用到大量的默认图片，比如应用中有默认的头像，默认游戏图标等等，这些图片很多地方会用到。如果每次去读取图片，由于读取文件需要硬件操作，速度很慢，会导致性能较低。所以我们考虑将图片缓存起来，需要的时候直接从内存中读取。但是由于图片占用空间比较大，缓存很多图片需要很多的内存，就可能比较容易发生 OutOfMemery 异常。这时我们可以考虑使用软/弱引用技术来避免这个问题发生。以下是高速缓冲器的雏形：</p>\n<p>首先定义一个 HashMap，保存软引用对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Map&lt;String, SoftReference&lt;Bitmap&gt;&gt; imageCache = new HashMap&lt;String, SoftReference&lt;Bitmap&gt;&gt;();</span><br></pre></td></tr></table></figure>\n<p>再定义一个方法，保存 bitmap 的软引用到 HashMap。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CacheBySoftRef</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先定义一个 HashMap，保存软引用对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, SoftReference&lt;Bitmap&gt;&gt; imageCache = <span class=\"keyword\">new</span> HashMap&lt;String, SoftReference&lt;Bitmap&gt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 再定义一个方法，保存 bitmap 的软引用到 HashMap。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBitmapToCache</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 强引用的 Bitmap 对象</span></span><br><span class=\"line\">        Bitmap bitmap = BitmapFactory.decodeFile(path);</span><br><span class=\"line\">        <span class=\"comment\">// 软引用的 bitmap 对象</span></span><br><span class=\"line\">        SoftReference&lt;Bitmap&gt; softBitmap = <span class=\"keyword\">new</span> SoftReference&lt;Bitmap&gt;(bitmap);</span><br><span class=\"line\">        imageCache.put(path, softBitmap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取的时候，可以通过 SoftReference 的 get() 方法得到 bitmap 对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmapByPath</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从缓存中取软引用的 bitmap 对象</span></span><br><span class=\"line\">        SoftReference&lt;Bitmap&gt; softBitmap = imageCache.get(path);</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否存在软引用</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (softBitmap == <span class=\"keyword\">null</span>)  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 通过软引用取出 bitmap 对象，如果由于内存不足 Bitmap 被回收，将取到空，如果未被回收，则可重复使用，提高速度</span></span><br><span class=\"line\">        Bitmap bitmap = softBitmap.get();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bitmap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Android Studio Dependencies Library Resolve","date":"2019-04-16T09:44:39.000Z","_content":"\n在使用 Android Studio 开发时,使用 Gradle 脚本构建项目, 同 Maven 一样,所引用的包之间也存在着相互依赖的关系, 当你使用某个包之后,发现有包版本冲突, 那么解决方案就来了.\n\n\n先说点不正经的:\n1.  你可以把你自己引入的包去掉,使用依赖包\n2.  放弃治疗\n\n\n哈哈,言归正传:\n\n当我们引入的包之间存在冲突(不是同一个)的关系时, 也就是说,我们需要保留一个项目依赖包使用,那么我们需要在 `build.gradle` 中将我们不需要的包删除掉.\n\n## 举个栗子:\n\n当我使用 `com.squareup.retrofit2:adapter-rxjava:2.1.0` 时, 它默认依赖使用 `RxJava 1.5.0` 版本. 当我使用 `io.reactivex.rxjava2:rxjava:2.0.6` 时, 就会引起包冲突.\n\n## 解决方案:\n\nbuild.gradle\n\n```\n\n...\ndependencies {\n    compile fileTree(include: ['*.jar'], dir: 'libs')\n\n    compile ('com.squareup.retrofit2:adapter-rxjava:2.1.0'){\n        exclude group: 'io.reactivex'\n    }\n    compile 'io.reactivex.rxjava2:rxjava:2.0.6'\n    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'\n}\n```\n\n","source":"_posts/Android-Studio-Dependencies-Library-Resolve.md","raw":"---\ntitle: Android Studio Dependencies Library Resolve\ndate: 2019-04-16 17:44:39\ntags: Android\n---\n\n在使用 Android Studio 开发时,使用 Gradle 脚本构建项目, 同 Maven 一样,所引用的包之间也存在着相互依赖的关系, 当你使用某个包之后,发现有包版本冲突, 那么解决方案就来了.\n\n\n先说点不正经的:\n1.  你可以把你自己引入的包去掉,使用依赖包\n2.  放弃治疗\n\n\n哈哈,言归正传:\n\n当我们引入的包之间存在冲突(不是同一个)的关系时, 也就是说,我们需要保留一个项目依赖包使用,那么我们需要在 `build.gradle` 中将我们不需要的包删除掉.\n\n## 举个栗子:\n\n当我使用 `com.squareup.retrofit2:adapter-rxjava:2.1.0` 时, 它默认依赖使用 `RxJava 1.5.0` 版本. 当我使用 `io.reactivex.rxjava2:rxjava:2.0.6` 时, 就会引起包冲突.\n\n## 解决方案:\n\nbuild.gradle\n\n```\n\n...\ndependencies {\n    compile fileTree(include: ['*.jar'], dir: 'libs')\n\n    compile ('com.squareup.retrofit2:adapter-rxjava:2.1.0'){\n        exclude group: 'io.reactivex'\n    }\n    compile 'io.reactivex.rxjava2:rxjava:2.0.6'\n    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'\n}\n```\n\n","slug":"Android-Studio-Dependencies-Library-Resolve","published":1,"updated":"2019-04-17T13:55:09.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcncz9a000216y9ymja9h42","content":"<p>在使用 Android Studio 开发时,使用 Gradle 脚本构建项目, 同 Maven 一样,所引用的包之间也存在着相互依赖的关系, 当你使用某个包之后,发现有包版本冲突, 那么解决方案就来了.</p>\n<p>先说点不正经的:</p>\n<ol>\n<li>你可以把你自己引入的包去掉,使用依赖包</li>\n<li>放弃治疗</li>\n</ol>\n<p>哈哈,言归正传:</p>\n<p>当我们引入的包之间存在冲突(不是同一个)的关系时, 也就是说,我们需要保留一个项目依赖包使用,那么我们需要在 <code>build.gradle</code> 中将我们不需要的包删除掉.</p>\n<h2 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子:\"></a>举个栗子:</h2><p>当我使用 <code>com.squareup.retrofit2:adapter-rxjava:2.1.0</code> 时, 它默认依赖使用 <code>RxJava 1.5.0</code> 版本. 当我使用 <code>io.reactivex.rxjava2:rxjava:2.0.6</code> 时, 就会引起包冲突.</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案:\"></a>解决方案:</h2><p>build.gradle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    compile (&apos;com.squareup.retrofit2:adapter-rxjava:2.1.0&apos;)&#123;</span><br><span class=\"line\">        exclude group: &apos;io.reactivex&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    compile &apos;io.reactivex.rxjava2:rxjava:2.0.6&apos;</span><br><span class=\"line\">    compile &apos;io.reactivex.rxjava2:rxandroid:2.0.1&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用 Android Studio 开发时,使用 Gradle 脚本构建项目, 同 Maven 一样,所引用的包之间也存在着相互依赖的关系, 当你使用某个包之后,发现有包版本冲突, 那么解决方案就来了.</p>\n<p>先说点不正经的:</p>\n<ol>\n<li>你可以把你自己引入的包去掉,使用依赖包</li>\n<li>放弃治疗</li>\n</ol>\n<p>哈哈,言归正传:</p>\n<p>当我们引入的包之间存在冲突(不是同一个)的关系时, 也就是说,我们需要保留一个项目依赖包使用,那么我们需要在 <code>build.gradle</code> 中将我们不需要的包删除掉.</p>\n<h2 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子:\"></a>举个栗子:</h2><p>当我使用 <code>com.squareup.retrofit2:adapter-rxjava:2.1.0</code> 时, 它默认依赖使用 <code>RxJava 1.5.0</code> 版本. 当我使用 <code>io.reactivex.rxjava2:rxjava:2.0.6</code> 时, 就会引起包冲突.</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案:\"></a>解决方案:</h2><p>build.gradle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    compile (&apos;com.squareup.retrofit2:adapter-rxjava:2.1.0&apos;)&#123;</span><br><span class=\"line\">        exclude group: &apos;io.reactivex&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    compile &apos;io.reactivex.rxjava2:rxjava:2.0.6&apos;</span><br><span class=\"line\">    compile &apos;io.reactivex.rxjava2:rxandroid:2.0.1&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Android 中设置全屏的方法","date":"2019-04-16T09:46:31.000Z","_content":"\n在开发中,我们经常需要把我们的应用设置为全屏,这里有两种方式: 一是在代码中设置; 二是在配置文件中设置\n\n# 一. 在代码中设置\n\n```\npublic class BaseActivity extends Activity {\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(saveInstanceState);\n        // 无title\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n        // 全屏\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n        setContentView(R.layout.activity_main);\n    } \n}\n```\n\n强调一点: ** 设置全屏的两段代码,必须在 `setContentView()` 之前调用,不然会报错 **\n\n# 二. 在配置文件中修改\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest \n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  package=\"com.android.test\"\n  android:versionCode=\"1\"\n  ndroid:versionName=\"1.0\">\n  <application android:icon=\"@drawable/icon\"\n    android:lable=\"@string/app_name>\n    <activity android:name=\".BaseActivity\" \n        android:theme=\"@android:style/Theme.NotitleBar.Fullscreen\"\n        android:lable=\"@string/app_name\">\n        <intent-filter>\n            <action android:name=\"android.intent.action.MAIN\"/>\n            <category android:name=\"android.intent.category.LAUNCHER\"/>\n        </intent-filter>\n  </application>\n</manifest>\n```\n\n使用第一种方法,会在应用运行后,看到一个短暂的状态来, 然后才全屏, 而第二种方法是不会有这种情况的,大家根据需要自行选择.\n\n","source":"_posts/Android-中设置全屏的方法.md","raw":"---\ntitle: Android 中设置全屏的方法\ndate: 2019-04-16 17:46:31\ntags: Android\n---\n\n在开发中,我们经常需要把我们的应用设置为全屏,这里有两种方式: 一是在代码中设置; 二是在配置文件中设置\n\n# 一. 在代码中设置\n\n```\npublic class BaseActivity extends Activity {\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(saveInstanceState);\n        // 无title\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n        // 全屏\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n        setContentView(R.layout.activity_main);\n    } \n}\n```\n\n强调一点: ** 设置全屏的两段代码,必须在 `setContentView()` 之前调用,不然会报错 **\n\n# 二. 在配置文件中修改\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest \n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  package=\"com.android.test\"\n  android:versionCode=\"1\"\n  ndroid:versionName=\"1.0\">\n  <application android:icon=\"@drawable/icon\"\n    android:lable=\"@string/app_name>\n    <activity android:name=\".BaseActivity\" \n        android:theme=\"@android:style/Theme.NotitleBar.Fullscreen\"\n        android:lable=\"@string/app_name\">\n        <intent-filter>\n            <action android:name=\"android.intent.action.MAIN\"/>\n            <category android:name=\"android.intent.category.LAUNCHER\"/>\n        </intent-filter>\n  </application>\n</manifest>\n```\n\n使用第一种方法,会在应用运行后,看到一个短暂的状态来, 然后才全屏, 而第二种方法是不会有这种情况的,大家根据需要自行选择.\n\n","slug":"Android-中设置全屏的方法","published":1,"updated":"2019-04-17T13:55:03.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcnczab000416y9n9rwqzc9","content":"<p>在开发中,我们经常需要把我们的应用设置为全屏,这里有两种方式: 一是在代码中设置; 二是在配置文件中设置</p>\n<h1 id=\"一-在代码中设置\"><a href=\"#一-在代码中设置\" class=\"headerlink\" title=\"一. 在代码中设置\"></a>一. 在代码中设置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BaseActivity extends Activity &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(saveInstanceState);</span><br><span class=\"line\">        // 无title</span><br><span class=\"line\">        requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class=\"line\">        // 全屏</span><br><span class=\"line\">        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>强调一点: <strong> 设置全屏的两段代码,必须在 <code>setContentView()</code> 之前调用,不然会报错 </strong></p>\n<h1 id=\"二-在配置文件中修改\"><a href=\"#二-在配置文件中修改\" class=\"headerlink\" title=\"二. 在配置文件中修改\"></a>二. 在配置文件中修改</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;manifest </span><br><span class=\"line\">  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">  package=&quot;com.android.test&quot;</span><br><span class=\"line\">  android:versionCode=&quot;1&quot;</span><br><span class=\"line\">  ndroid:versionName=&quot;1.0&quot;&gt;</span><br><span class=\"line\">  &lt;application android:icon=&quot;@drawable/icon&quot;</span><br><span class=\"line\">    android:lable=&quot;@string/app_name&gt;</span><br><span class=\"line\">    &lt;activity android:name=&quot;.BaseActivity&quot; </span><br><span class=\"line\">        android:theme=&quot;@android:style/Theme.NotitleBar.Fullscreen&quot;</span><br><span class=\"line\">        android:lable=&quot;@string/app_name&quot;&gt;</span><br><span class=\"line\">        &lt;intent-filter&gt;</span><br><span class=\"line\">            &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</span><br><span class=\"line\">            &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</span><br><span class=\"line\">        &lt;/intent-filter&gt;</span><br><span class=\"line\">  &lt;/application&gt;</span><br><span class=\"line\">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>\n<p>使用第一种方法,会在应用运行后,看到一个短暂的状态来, 然后才全屏, 而第二种方法是不会有这种情况的,大家根据需要自行选择.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在开发中,我们经常需要把我们的应用设置为全屏,这里有两种方式: 一是在代码中设置; 二是在配置文件中设置</p>\n<h1 id=\"一-在代码中设置\"><a href=\"#一-在代码中设置\" class=\"headerlink\" title=\"一. 在代码中设置\"></a>一. 在代码中设置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BaseActivity extends Activity &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(saveInstanceState);</span><br><span class=\"line\">        // 无title</span><br><span class=\"line\">        requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class=\"line\">        // 全屏</span><br><span class=\"line\">        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>强调一点: <strong> 设置全屏的两段代码,必须在 <code>setContentView()</code> 之前调用,不然会报错 </strong></p>\n<h1 id=\"二-在配置文件中修改\"><a href=\"#二-在配置文件中修改\" class=\"headerlink\" title=\"二. 在配置文件中修改\"></a>二. 在配置文件中修改</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;manifest </span><br><span class=\"line\">  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">  package=&quot;com.android.test&quot;</span><br><span class=\"line\">  android:versionCode=&quot;1&quot;</span><br><span class=\"line\">  ndroid:versionName=&quot;1.0&quot;&gt;</span><br><span class=\"line\">  &lt;application android:icon=&quot;@drawable/icon&quot;</span><br><span class=\"line\">    android:lable=&quot;@string/app_name&gt;</span><br><span class=\"line\">    &lt;activity android:name=&quot;.BaseActivity&quot; </span><br><span class=\"line\">        android:theme=&quot;@android:style/Theme.NotitleBar.Fullscreen&quot;</span><br><span class=\"line\">        android:lable=&quot;@string/app_name&quot;&gt;</span><br><span class=\"line\">        &lt;intent-filter&gt;</span><br><span class=\"line\">            &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</span><br><span class=\"line\">            &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</span><br><span class=\"line\">        &lt;/intent-filter&gt;</span><br><span class=\"line\">  &lt;/application&gt;</span><br><span class=\"line\">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>\n<p>使用第一种方法,会在应用运行后,看到一个短暂的状态来, 然后才全屏, 而第二种方法是不会有这种情况的,大家根据需要自行选择.</p>\n"},{"title":"Android 在一个应用中启动另外一个应用","date":"2019-04-16T09:45:20.000Z","_content":"\n\n\n# Android 在一个应用中启动另外一个应用\nAndroid 中,从当前 APP 启动另外一个 APP 的需求,不是很常见, 但确实存在着,比如说在某宝还没有现在这么强大时,支付需要启动他们的 APP. 再比如说,某米的钱包系统,需要和他们的金融 APP 在某些业务上是相互依赖的,需要相互启动.\n\n综上所述, 从一个 APP 去启动另外一个 APP 的需求还是有它存在的价值.因此,一下是我在工作和学习中总结的如何通过一个 APP 去启动另外一个 APP 的方式.\n\n<!--more-->\n\n## 1. 通过 APP 启动另一个 APP\n\n```\n  String packageName = \"com.android.calendar\";\n  Intent intent = getPackageManager().getLaunchIntentForPackage(packageName);\n  intent.putExtra(\"type\", true);\n  startActivity(intent);\n```\n\n上面的代码,就可以完成从一个 APP 启动另一个 APP 的业务需求, 这里需要注意的是,我们需要检测一下要启动的 APP 是否已经安装,如果应用未安装, 则会 NullPointException.\n\n通过这种方式, Android 虚拟机会自己在目标 APP 下寻找标签为 `android.intent.action.MAIN` 的 Activity 启动.\n\n这里介绍两种方式,检测目标应用是否已经安装\n\n** 方法一: **\n\n```\nIntent intent = getPackageName().getLaunchIntentForPackage(packageName);\nif (intent == null) {\n  // 这里判断 Intent 为空, 说明应用不存在 \n}\n```\n\n**方法二:**\n\n```\n  PackageInfo packageInfo = getPackageManager(0.getPackageInfo(packageName, 0);\n  if (packageInfo == null) {\n      // 这里如果 packageInfo 为 null, 说明应用不存在\n  }\n```\n\n## 2. 打开另外一个 APP 指定的 Activity\n\n```\n    Intent intent = new Intent();\n    ComponentName componeneName = new ComponeneName(\"com.android.calendar\", \"com.android.calendar.LaunchActivity\");\n    intent.setComponent(componeneName);\n    startActivity(intent);\n```\n\n值得注意: \n\n*  需要将目标 Activity 的 android:export=\"true\" 属性在所属应用的 AndroidMainfest 里设置为 true, 意思是当前 Activity 允许被外部应用访问, 否则会报错\n\n```\n  Caused by: java.lang.SecurityException: Permission Denial: starting  Intent \n  { cmp=com.example.fm/.MainFragmentActivity (has extras) } from ProcessRecord\n  {39282a97 11545:com.xing.toolbardemo1/u0a71}  (pid=11545,     uid=10071) not exported from uid 10067\n```\n* 在 5.0 以前的设备上,需要在当前的 AndroidMainfest 里也生命目标Activity, 否则会报错; 但在 5.0 以后的设备上,就不会报错哦\n\n```\n  Caused by: android.content.ActivityNotFoundException: Unable to find explicit activity class {com.example.fm/com.example.fm.MainFragmentActivity}; \nhave you declared this activity in your AndroidManifest.xml?\n```\n\n\n\n","source":"_posts/Android-在一个应用中启动另外一个应用.md","raw":"---\ntitle: Android 在一个应用中启动另外一个应用\ndate: 2019-04-16 17:45:20\ntags: Android\n---\n\n\n\n# Android 在一个应用中启动另外一个应用\nAndroid 中,从当前 APP 启动另外一个 APP 的需求,不是很常见, 但确实存在着,比如说在某宝还没有现在这么强大时,支付需要启动他们的 APP. 再比如说,某米的钱包系统,需要和他们的金融 APP 在某些业务上是相互依赖的,需要相互启动.\n\n综上所述, 从一个 APP 去启动另外一个 APP 的需求还是有它存在的价值.因此,一下是我在工作和学习中总结的如何通过一个 APP 去启动另外一个 APP 的方式.\n\n<!--more-->\n\n## 1. 通过 APP 启动另一个 APP\n\n```\n  String packageName = \"com.android.calendar\";\n  Intent intent = getPackageManager().getLaunchIntentForPackage(packageName);\n  intent.putExtra(\"type\", true);\n  startActivity(intent);\n```\n\n上面的代码,就可以完成从一个 APP 启动另一个 APP 的业务需求, 这里需要注意的是,我们需要检测一下要启动的 APP 是否已经安装,如果应用未安装, 则会 NullPointException.\n\n通过这种方式, Android 虚拟机会自己在目标 APP 下寻找标签为 `android.intent.action.MAIN` 的 Activity 启动.\n\n这里介绍两种方式,检测目标应用是否已经安装\n\n** 方法一: **\n\n```\nIntent intent = getPackageName().getLaunchIntentForPackage(packageName);\nif (intent == null) {\n  // 这里判断 Intent 为空, 说明应用不存在 \n}\n```\n\n**方法二:**\n\n```\n  PackageInfo packageInfo = getPackageManager(0.getPackageInfo(packageName, 0);\n  if (packageInfo == null) {\n      // 这里如果 packageInfo 为 null, 说明应用不存在\n  }\n```\n\n## 2. 打开另外一个 APP 指定的 Activity\n\n```\n    Intent intent = new Intent();\n    ComponentName componeneName = new ComponeneName(\"com.android.calendar\", \"com.android.calendar.LaunchActivity\");\n    intent.setComponent(componeneName);\n    startActivity(intent);\n```\n\n值得注意: \n\n*  需要将目标 Activity 的 android:export=\"true\" 属性在所属应用的 AndroidMainfest 里设置为 true, 意思是当前 Activity 允许被外部应用访问, 否则会报错\n\n```\n  Caused by: java.lang.SecurityException: Permission Denial: starting  Intent \n  { cmp=com.example.fm/.MainFragmentActivity (has extras) } from ProcessRecord\n  {39282a97 11545:com.xing.toolbardemo1/u0a71}  (pid=11545,     uid=10071) not exported from uid 10067\n```\n* 在 5.0 以前的设备上,需要在当前的 AndroidMainfest 里也生命目标Activity, 否则会报错; 但在 5.0 以后的设备上,就不会报错哦\n\n```\n  Caused by: android.content.ActivityNotFoundException: Unable to find explicit activity class {com.example.fm/com.example.fm.MainFragmentActivity}; \nhave you declared this activity in your AndroidManifest.xml?\n```\n\n\n\n","slug":"Android-在一个应用中启动另外一个应用","published":1,"updated":"2019-04-17T13:56:42.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcnczbk000716y9g85c90rx","content":"<h1 id=\"Android-在一个应用中启动另外一个应用\"><a href=\"#Android-在一个应用中启动另外一个应用\" class=\"headerlink\" title=\"Android 在一个应用中启动另外一个应用\"></a>Android 在一个应用中启动另外一个应用</h1><p>Android 中,从当前 APP 启动另外一个 APP 的需求,不是很常见, 但确实存在着,比如说在某宝还没有现在这么强大时,支付需要启动他们的 APP. 再比如说,某米的钱包系统,需要和他们的金融 APP 在某些业务上是相互依赖的,需要相互启动.</p>\n<p>综上所述, 从一个 APP 去启动另外一个 APP 的需求还是有它存在的价值.因此,一下是我在工作和学习中总结的如何通过一个 APP 去启动另外一个 APP 的方式.</p>\n<a id=\"more\"></a>\n<h2 id=\"1-通过-APP-启动另一个-APP\"><a href=\"#1-通过-APP-启动另一个-APP\" class=\"headerlink\" title=\"1. 通过 APP 启动另一个 APP\"></a>1. 通过 APP 启动另一个 APP</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String packageName = &quot;com.android.calendar&quot;;</span><br><span class=\"line\">Intent intent = getPackageManager().getLaunchIntentForPackage(packageName);</span><br><span class=\"line\">intent.putExtra(&quot;type&quot;, true);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n<p>上面的代码,就可以完成从一个 APP 启动另一个 APP 的业务需求, 这里需要注意的是,我们需要检测一下要启动的 APP 是否已经安装,如果应用未安装, 则会 NullPointException.</p>\n<p>通过这种方式, Android 虚拟机会自己在目标 APP 下寻找标签为 <code>android.intent.action.MAIN</code> 的 Activity 启动.</p>\n<p>这里介绍两种方式,检测目标应用是否已经安装</p>\n<p><strong> 方法一: </strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = getPackageName().getLaunchIntentForPackage(packageName);</span><br><span class=\"line\">if (intent == null) &#123;</span><br><span class=\"line\">  // 这里判断 Intent 为空, 说明应用不存在 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>方法二:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PackageInfo packageInfo = getPackageManager(0.getPackageInfo(packageName, 0);</span><br><span class=\"line\">if (packageInfo == null) &#123;</span><br><span class=\"line\">    // 这里如果 packageInfo 为 null, 说明应用不存在</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-打开另外一个-APP-指定的-Activity\"><a href=\"#2-打开另外一个-APP-指定的-Activity\" class=\"headerlink\" title=\"2. 打开另外一个 APP 指定的 Activity\"></a>2. 打开另外一个 APP 指定的 Activity</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = new Intent();</span><br><span class=\"line\">ComponentName componeneName = new ComponeneName(&quot;com.android.calendar&quot;, &quot;com.android.calendar.LaunchActivity&quot;);</span><br><span class=\"line\">intent.setComponent(componeneName);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n<p>值得注意: </p>\n<ul>\n<li>需要将目标 Activity 的 android:export=”true” 属性在所属应用的 AndroidMainfest 里设置为 true, 意思是当前 Activity 允许被外部应用访问, 否则会报错</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: java.lang.SecurityException: Permission Denial: starting  Intent </span><br><span class=\"line\">&#123; cmp=com.example.fm/.MainFragmentActivity (has extras) &#125; from ProcessRecord</span><br><span class=\"line\">&#123;39282a97 11545:com.xing.toolbardemo1/u0a71&#125;  (pid=11545,     uid=10071) not exported from uid 10067</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 5.0 以前的设备上,需要在当前的 AndroidMainfest 里也生命目标Activity, 否则会报错; 但在 5.0 以后的设备上,就不会报错哦</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  Caused by: android.content.ActivityNotFoundException: Unable to find explicit activity class &#123;com.example.fm/com.example.fm.MainFragmentActivity&#125;; </span><br><span class=\"line\">have you declared this activity in your AndroidManifest.xml?</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"Android-在一个应用中启动另外一个应用\"><a href=\"#Android-在一个应用中启动另外一个应用\" class=\"headerlink\" title=\"Android 在一个应用中启动另外一个应用\"></a>Android 在一个应用中启动另外一个应用</h1><p>Android 中,从当前 APP 启动另外一个 APP 的需求,不是很常见, 但确实存在着,比如说在某宝还没有现在这么强大时,支付需要启动他们的 APP. 再比如说,某米的钱包系统,需要和他们的金融 APP 在某些业务上是相互依赖的,需要相互启动.</p>\n<p>综上所述, 从一个 APP 去启动另外一个 APP 的需求还是有它存在的价值.因此,一下是我在工作和学习中总结的如何通过一个 APP 去启动另外一个 APP 的方式.</p>","more":"<h2 id=\"1-通过-APP-启动另一个-APP\"><a href=\"#1-通过-APP-启动另一个-APP\" class=\"headerlink\" title=\"1. 通过 APP 启动另一个 APP\"></a>1. 通过 APP 启动另一个 APP</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String packageName = &quot;com.android.calendar&quot;;</span><br><span class=\"line\">Intent intent = getPackageManager().getLaunchIntentForPackage(packageName);</span><br><span class=\"line\">intent.putExtra(&quot;type&quot;, true);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n<p>上面的代码,就可以完成从一个 APP 启动另一个 APP 的业务需求, 这里需要注意的是,我们需要检测一下要启动的 APP 是否已经安装,如果应用未安装, 则会 NullPointException.</p>\n<p>通过这种方式, Android 虚拟机会自己在目标 APP 下寻找标签为 <code>android.intent.action.MAIN</code> 的 Activity 启动.</p>\n<p>这里介绍两种方式,检测目标应用是否已经安装</p>\n<p><strong> 方法一: </strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = getPackageName().getLaunchIntentForPackage(packageName);</span><br><span class=\"line\">if (intent == null) &#123;</span><br><span class=\"line\">  // 这里判断 Intent 为空, 说明应用不存在 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>方法二:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PackageInfo packageInfo = getPackageManager(0.getPackageInfo(packageName, 0);</span><br><span class=\"line\">if (packageInfo == null) &#123;</span><br><span class=\"line\">    // 这里如果 packageInfo 为 null, 说明应用不存在</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-打开另外一个-APP-指定的-Activity\"><a href=\"#2-打开另外一个-APP-指定的-Activity\" class=\"headerlink\" title=\"2. 打开另外一个 APP 指定的 Activity\"></a>2. 打开另外一个 APP 指定的 Activity</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = new Intent();</span><br><span class=\"line\">ComponentName componeneName = new ComponeneName(&quot;com.android.calendar&quot;, &quot;com.android.calendar.LaunchActivity&quot;);</span><br><span class=\"line\">intent.setComponent(componeneName);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n<p>值得注意: </p>\n<ul>\n<li>需要将目标 Activity 的 android:export=”true” 属性在所属应用的 AndroidMainfest 里设置为 true, 意思是当前 Activity 允许被外部应用访问, 否则会报错</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: java.lang.SecurityException: Permission Denial: starting  Intent </span><br><span class=\"line\">&#123; cmp=com.example.fm/.MainFragmentActivity (has extras) &#125; from ProcessRecord</span><br><span class=\"line\">&#123;39282a97 11545:com.xing.toolbardemo1/u0a71&#125;  (pid=11545,     uid=10071) not exported from uid 10067</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 5.0 以前的设备上,需要在当前的 AndroidMainfest 里也生命目标Activity, 否则会报错; 但在 5.0 以后的设备上,就不会报错哦</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  Caused by: android.content.ActivityNotFoundException: Unable to find explicit activity class &#123;com.example.fm/com.example.fm.MainFragmentActivity&#125;; </span><br><span class=\"line\">have you declared this activity in your AndroidManifest.xml?</span><br></pre></td></tr></table></figure>"},{"title":"Android 获取 IP 地址","date":"2019-04-16T09:46:00.000Z","_content":"\n开发中经常会需要判断当前是否连接网络, WiFi 或 移动数据连接判断的需求,\n\n\n**第一种方法: **\n\n``` java\n  WifiManager wifiManager = (WifiManager) getSystemService(WIFI_SERVICE);  \n  WifiInfo wifiInfo = wifiManager.getConnectionInfo();  \n  int ipAddress = wifiInfo.getIpAddress();  \n```\n\n通过这种方式获取到的 IP 地址为一串数字,我们并不能看懂,因此我们需要通过下面的方法进行转换:\n\n```\nString ip = (ipAddress & 0xff) + \".\" + (ipAddress>>8 & 0xff) + \".\" + (ipAddress>>16 & 0xff) + \".\" + (ipAddress >> 24 & 0xff);\n```\n\n这样转换之后,我们获取到的 IP 地址就是我们平时认识的, 比如: 192.168.1.108\n\n这种方法在飞行模式下获取到的 IP 地址为 0.0.0.0\n\n**第二种方法:**\n\n```\n  public String getLocalIpAddress() {  \n    try {  \n        for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {  \n            NetworkInterface intf = en.nextElement();  \n            for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {  \n                InetAddress inetAddress = enumIpAddr.nextElement();  \n                if (!inetAddress.isLoopbackAddress()) {  \n                    return inetAddress.getHostAddress().toString();  \n                }  \n            }  \n        }  \n    } catch (SocketException ex) {  \n        Log.e(LOG_TAG, ex.toString());  \n    }  \n    return null;  \n}  \n```\n\n第二种方式是比较通用的,在WiFi和3G/4G 状态下,都可以获取到正确的地址.比如: fe80::8e3a:e3ff:fe45:a018\n\n这种方法在手机处于飞行状态下时, 获取到的 IP 地址为 null\n\n","source":"_posts/Android-获取-IP-地址.md","raw":"---\ntitle: Android 获取 IP 地址\ndate: 2019-04-16 17:46:00\ntags: Android\n---\n\n开发中经常会需要判断当前是否连接网络, WiFi 或 移动数据连接判断的需求,\n\n\n**第一种方法: **\n\n``` java\n  WifiManager wifiManager = (WifiManager) getSystemService(WIFI_SERVICE);  \n  WifiInfo wifiInfo = wifiManager.getConnectionInfo();  \n  int ipAddress = wifiInfo.getIpAddress();  \n```\n\n通过这种方式获取到的 IP 地址为一串数字,我们并不能看懂,因此我们需要通过下面的方法进行转换:\n\n```\nString ip = (ipAddress & 0xff) + \".\" + (ipAddress>>8 & 0xff) + \".\" + (ipAddress>>16 & 0xff) + \".\" + (ipAddress >> 24 & 0xff);\n```\n\n这样转换之后,我们获取到的 IP 地址就是我们平时认识的, 比如: 192.168.1.108\n\n这种方法在飞行模式下获取到的 IP 地址为 0.0.0.0\n\n**第二种方法:**\n\n```\n  public String getLocalIpAddress() {  \n    try {  \n        for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {  \n            NetworkInterface intf = en.nextElement();  \n            for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {  \n                InetAddress inetAddress = enumIpAddr.nextElement();  \n                if (!inetAddress.isLoopbackAddress()) {  \n                    return inetAddress.getHostAddress().toString();  \n                }  \n            }  \n        }  \n    } catch (SocketException ex) {  \n        Log.e(LOG_TAG, ex.toString());  \n    }  \n    return null;  \n}  \n```\n\n第二种方式是比较通用的,在WiFi和3G/4G 状态下,都可以获取到正确的地址.比如: fe80::8e3a:e3ff:fe45:a018\n\n这种方法在手机处于飞行状态下时, 获取到的 IP 地址为 null\n\n","slug":"Android-获取-IP-地址","published":1,"updated":"2019-04-17T13:54:55.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcnczc5000816y9baqpke79","content":"<p>开发中经常会需要判断当前是否连接网络, WiFi 或 移动数据连接判断的需求,</p>\n<p><strong>第一种方法: </strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WifiManager wifiManager = (WifiManager) getSystemService(WIFI_SERVICE);  </span><br><span class=\"line\">WifiInfo wifiInfo = wifiManager.getConnectionInfo();  </span><br><span class=\"line\"><span class=\"keyword\">int</span> ipAddress = wifiInfo.getIpAddress();</span><br></pre></td></tr></table></figure>\n<p>通过这种方式获取到的 IP 地址为一串数字,我们并不能看懂,因此我们需要通过下面的方法进行转换:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String ip = (ipAddress &amp; 0xff) + &quot;.&quot; + (ipAddress&gt;&gt;8 &amp; 0xff) + &quot;.&quot; + (ipAddress&gt;&gt;16 &amp; 0xff) + &quot;.&quot; + (ipAddress &gt;&gt; 24 &amp; 0xff);</span><br></pre></td></tr></table></figure>\n<p>这样转换之后,我们获取到的 IP 地址就是我们平时认识的, 比如: 192.168.1.108</p>\n<p>这种方法在飞行模式下获取到的 IP 地址为 0.0.0.0</p>\n<p><strong>第二种方法:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  public String getLocalIpAddress() &#123;  </span><br><span class=\"line\">    try &#123;  </span><br><span class=\"line\">        for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) &#123;  </span><br><span class=\"line\">            NetworkInterface intf = en.nextElement();  </span><br><span class=\"line\">            for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) &#123;  </span><br><span class=\"line\">                InetAddress inetAddress = enumIpAddr.nextElement();  </span><br><span class=\"line\">                if (!inetAddress.isLoopbackAddress()) &#123;  </span><br><span class=\"line\">                    return inetAddress.getHostAddress().toString();  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125; catch (SocketException ex) &#123;  </span><br><span class=\"line\">        Log.e(LOG_TAG, ex.toString());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return null;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种方式是比较通用的,在WiFi和3G/4G 状态下,都可以获取到正确的地址.比如: fe80::8e3a:e3ff:fe45:a018</p>\n<p>这种方法在手机处于飞行状态下时, 获取到的 IP 地址为 null</p>\n","site":{"data":{}},"excerpt":"","more":"<p>开发中经常会需要判断当前是否连接网络, WiFi 或 移动数据连接判断的需求,</p>\n<p><strong>第一种方法: </strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WifiManager wifiManager = (WifiManager) getSystemService(WIFI_SERVICE);  </span><br><span class=\"line\">WifiInfo wifiInfo = wifiManager.getConnectionInfo();  </span><br><span class=\"line\"><span class=\"keyword\">int</span> ipAddress = wifiInfo.getIpAddress();</span><br></pre></td></tr></table></figure>\n<p>通过这种方式获取到的 IP 地址为一串数字,我们并不能看懂,因此我们需要通过下面的方法进行转换:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String ip = (ipAddress &amp; 0xff) + &quot;.&quot; + (ipAddress&gt;&gt;8 &amp; 0xff) + &quot;.&quot; + (ipAddress&gt;&gt;16 &amp; 0xff) + &quot;.&quot; + (ipAddress &gt;&gt; 24 &amp; 0xff);</span><br></pre></td></tr></table></figure>\n<p>这样转换之后,我们获取到的 IP 地址就是我们平时认识的, 比如: 192.168.1.108</p>\n<p>这种方法在飞行模式下获取到的 IP 地址为 0.0.0.0</p>\n<p><strong>第二种方法:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  public String getLocalIpAddress() &#123;  </span><br><span class=\"line\">    try &#123;  </span><br><span class=\"line\">        for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) &#123;  </span><br><span class=\"line\">            NetworkInterface intf = en.nextElement();  </span><br><span class=\"line\">            for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) &#123;  </span><br><span class=\"line\">                InetAddress inetAddress = enumIpAddr.nextElement();  </span><br><span class=\"line\">                if (!inetAddress.isLoopbackAddress()) &#123;  </span><br><span class=\"line\">                    return inetAddress.getHostAddress().toString();  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125; catch (SocketException ex) &#123;  </span><br><span class=\"line\">        Log.e(LOG_TAG, ex.toString());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return null;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种方式是比较通用的,在WiFi和3G/4G 状态下,都可以获取到正确的地址.比如: fe80::8e3a:e3ff:fe45:a018</p>\n<p>这种方法在手机处于飞行状态下时, 获取到的 IP 地址为 null</p>\n"},{"title":"线程通信基础流程","date":"2019-08-01T13:54:08.000Z","_content":"\n\n\n[TOC]\n\n\n\nAndroid 中线程通信靠的就是 Handler、Looper、Message、MessageQueue 这四个。\n\n\n\n## Looper \n\n在 Looper 中，维持一个 Thread 对象以及 MessageQueue， 通过 Looper 的构造函数可以看出\n\n```java\nprivate Looper(boolean quitAllowed) {\n    mQueue = new MessageQueue(quitAllowed);// 传入的参数代表这个 Queue 是否能够被退出\n    mThread = Thread.currentThread();\n}\n```\n\nLooper 在构造函数里做了两件事儿：\n\n1. 将线程对象指向了创建的 Looper 的线程\n2. 创建了一个新的  MessageQueue\n\n分析完构造函数后，看下面两个方法\n\n1. looper.loop()\n2. looper.prepare()\n\n<!--more-->\n\n### looper.loop()\n\n在当前线程中启动一个 Message loop 机制\n\n```Java\npublic static void loop(){\n    final Looper me = myLooper();// 获取当前线程绑定的 Looper\n    if(me == null) {\n\t\tthrow new RuntimeException(\"No Looper; Looper.prepare() wasn`t called on this thread\");        \n    }\n    final MessageQueue queue = me.mQueue();// 获取与 Looper 绑定的 MessageQueue\n    // make sure the identity of this thread is that of the local process,\n    // And keep track of what that identity token actuall is.\n    Binder.clearCallingIdentity();\n    fianl long ident = Binder.clearCallingIdentity();\n    \n    // 进入死循环，不断获取对象，分发对象到 Handler 中去消费\n    for(;;) {\n        Message msg = queue.next();// 不断获取下一个 message 对象，这里可能会造成阻塞。\n        if(msg == null) {\n            // No message idicates that the message queue is quittig.\n            return;\n        }\n        \n        // This must be in a local variable, in case a UI event sets the logger\n        Printer logging = me.mLogging;\n        if(logging != null) {\n            logging.println(\">>> Dispatching to \" + msg.target + \" \" + msg.callback _ \": \" + msg.what);\n        }\n        \n        // 在这里开始分发 Message \n        msg.target.dispatchMessage(msg);\n        \n        if(logging != null) {\n            logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n        }\n        \n        // Make sure that during the course of dispatching the identity of the thread wasn`t corrupted.\n        \n        final long newIdent = Binder.clearCallingIdentity();\n        if(ident != null) {\n            Log.wtf(TAG, \"Thread identity changed from 0x\"\n                        + Long.toHexString(ident) + \" to 0x\"\n                        + Long.toHexString(newIdent) + \" while dispatching to \"\n                        + msg.target.getClass().getName() + \" \"\n                        + msg.callback + \" what=\" + msg.what);\n        }\n        // 当分发完 Message 后，当然要标记将该 Message 为 “正在使用”\n        msg.recycleUnchecked();\n    }\n}\n```\n\n从上面的代码可以看出，最重要的方法是：\n\n1. `queue.next()`\n2. `msg.target.dispatchMessage(msg)`\n3. `msg.recycleUnchecked()`\n\n其实 Looper 中最重要的部分都是由 Message、MessageQueue 组成的，这段代码设计到的四个对象，他们彼此的关系如下:\n\n1. MessageQueue： 装食物的容器\n2. Message ：被装的食物\n3. Handler （msg.target 实际上就是 Handler）：食物的消费者\n4. Looper：负责分发食物的人\n\n\n\n### looper.prepare() 在当前线程关联一个 Lopper 对象\n\n```java\nprivate static void prepare(boolean quitAllowed) {\n    if(sThreadLocal.get() != null) {\n        throw new RuntimeException(\"Only one Lopper may be created per thread\");\n    }\n    \n    // 在当前线程绑定一个 looper\n    mThreadLocal.set(new Looper(quiteAllowed));\n}\n```\n\n在上面的代码中，做了两件事儿：\n\n1. 判断当前线程有没有 Looper，如果有则抛出异常（在这里我们就可以知道，Android 规定一个线程只能拥有一个与自己关联的 Looper。\n2. 如果有的话，那么就设置一个新的 Looper 到当前线程。\n\n### Handler 的使用\n\n```java\nHandler handler = new Handler (){\n    // \n    @Override\n    public void handleMessage(Message msg) {\n        // handle your message\n    }\n}\n```\n\n我们先来看下 Handler 的构造：\n\n```java\n// 空参构造与之对应\npublic Handler(Callback callbacck, boolean async) {\n    // 大姨泄漏提醒log\n    ...\n    // 获取与创建 Handler 线程的 Looper\n    mLooper = Looper.myLooper();\n    if(mLooper == null) {\n        throw new RunntimeException(\"Can`t create handler inside thread that has not called Looper.prepare()\");\n    }\n    \n    // 获取 Looper 绑定的 MessageQueue\n    // 因为一个 Looper 只有一个 MessageQueue， 也就是与当前线程绑定的 MessageQueue\n    mQueue = mLooper.mQueue;\n    mCallback = callback;\n    mAsynchronous = async;\n}\n```\n\n1. Looper.loop() 死循环中的 msg.target 是什么时候被赋值的？\n2. handler.handleMessage(msg) 在什么时候被回调的？\n\n\n\n**A1:** Looper.loop() 死循环中的 msg.target 是什么赋值的呢？要分析这个问题，自然的就想到从发送消息开始，无论是 handler.sendMessage(msg)  还是 handler.sendEmptyMessage(what)， 最后都可以追溯到下面这个方法：\n\n```java\npublic boolean sendMessageAtTime(Message msg, long uptimeMillis) {\n    // 引用 Handler 中的 MessageQueue\n    // 这个 MessageQueue 就是创建 Looper 时被创建的 MessageQueue\n    MessageQueue queue = mQueue;\n    \n    if(queue == null) {\n        RuntimeException e = new RuntimeException(\n        this + \" sendMessageAtTime() called withe no mQueue\");\n        Log.w(\"Looper\", e.getMessage(), e);\n        return false;\n    }\n    // 将新来的 Message 加入到 MessageQueue 中\n    return enqueueMessage(queue, msg, uptimeMillis);\n}\n```\n\n接下来看一下 `enququeMessage(queue, msg, uptimeMillis)`:\n\n```java\nprivate boolean enququeMessage(MessageQueue, queue, Message msg, long uptimeMillis) {\n   \tmsg.target = this;\n   \tif(mAsynchronous) {\n        msg.setAsynchronous(true);\n   \t}\n   \treturn queue.enqueueMessage(msg, uptimeMillis);\n}\n```\n\n\n\n**A2**:  handler.handleMessage(msg) 在什么时候被回调？通过上面的分析，我们很明确知道， Message 中的 target 是在什么时候赋值的，我们先来分析下在 Looper.loop() 中出现过的 dispatchMessage(msg) 方法\n\n```Java\npublic void diapatchMessage(Message msg) {\n    if(msg.callback != null) {\n        handleCallback(msg);\n    } else {\n        if(mCallback != null) {\n            if(mCallback.handleMessage(msg)) {\n                return;\n            }\n        }\n        handleMessage(msg); // 开始回调\n    }\n}\n```\n\n通过上面的分析，可以清楚的知道 Handler, Looper, Message, MessageQueue 这四者的关系以及如何合作了。\n\n\n\n## 总结\n\n当我们调用 handler.sendMessage(msg)； 方法发送一个 Message 时， 实际上这个 Message 是发送到与当前线程绑定的一个 MessageQueue 中，然后与当前线程绑定的 Looper 将会不断的从 MessageQueue 中取出新的 Message， 调用 msg.target.dispatchMessage(msg) 方法将消息发送到与 Message 绑定的 handler.handleMessage() 方法中。\n\n一个 Thread 对应多个 Handler， 一个 Thread 对应一个 Looper 和 MessageQueue， Handler 与 Thread 共享 Looper 和 MessageQueue。 Message 只是消息的载体，将会被发送到与线程绑定的唯一的 MessageQueue 中，并且被与线程绑定的唯一的 Looper 分发，被其自身绑定的 Handler 消费。","source":"_posts/Handler 线程通信基础流程.md","raw":"---\ntitle: 线程通信基础流程\ndate: 2019-08-01 21:54:08\ntags: Android\n---\n\n\n\n[TOC]\n\n\n\nAndroid 中线程通信靠的就是 Handler、Looper、Message、MessageQueue 这四个。\n\n\n\n## Looper \n\n在 Looper 中，维持一个 Thread 对象以及 MessageQueue， 通过 Looper 的构造函数可以看出\n\n```java\nprivate Looper(boolean quitAllowed) {\n    mQueue = new MessageQueue(quitAllowed);// 传入的参数代表这个 Queue 是否能够被退出\n    mThread = Thread.currentThread();\n}\n```\n\nLooper 在构造函数里做了两件事儿：\n\n1. 将线程对象指向了创建的 Looper 的线程\n2. 创建了一个新的  MessageQueue\n\n分析完构造函数后，看下面两个方法\n\n1. looper.loop()\n2. looper.prepare()\n\n<!--more-->\n\n### looper.loop()\n\n在当前线程中启动一个 Message loop 机制\n\n```Java\npublic static void loop(){\n    final Looper me = myLooper();// 获取当前线程绑定的 Looper\n    if(me == null) {\n\t\tthrow new RuntimeException(\"No Looper; Looper.prepare() wasn`t called on this thread\");        \n    }\n    final MessageQueue queue = me.mQueue();// 获取与 Looper 绑定的 MessageQueue\n    // make sure the identity of this thread is that of the local process,\n    // And keep track of what that identity token actuall is.\n    Binder.clearCallingIdentity();\n    fianl long ident = Binder.clearCallingIdentity();\n    \n    // 进入死循环，不断获取对象，分发对象到 Handler 中去消费\n    for(;;) {\n        Message msg = queue.next();// 不断获取下一个 message 对象，这里可能会造成阻塞。\n        if(msg == null) {\n            // No message idicates that the message queue is quittig.\n            return;\n        }\n        \n        // This must be in a local variable, in case a UI event sets the logger\n        Printer logging = me.mLogging;\n        if(logging != null) {\n            logging.println(\">>> Dispatching to \" + msg.target + \" \" + msg.callback _ \": \" + msg.what);\n        }\n        \n        // 在这里开始分发 Message \n        msg.target.dispatchMessage(msg);\n        \n        if(logging != null) {\n            logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n        }\n        \n        // Make sure that during the course of dispatching the identity of the thread wasn`t corrupted.\n        \n        final long newIdent = Binder.clearCallingIdentity();\n        if(ident != null) {\n            Log.wtf(TAG, \"Thread identity changed from 0x\"\n                        + Long.toHexString(ident) + \" to 0x\"\n                        + Long.toHexString(newIdent) + \" while dispatching to \"\n                        + msg.target.getClass().getName() + \" \"\n                        + msg.callback + \" what=\" + msg.what);\n        }\n        // 当分发完 Message 后，当然要标记将该 Message 为 “正在使用”\n        msg.recycleUnchecked();\n    }\n}\n```\n\n从上面的代码可以看出，最重要的方法是：\n\n1. `queue.next()`\n2. `msg.target.dispatchMessage(msg)`\n3. `msg.recycleUnchecked()`\n\n其实 Looper 中最重要的部分都是由 Message、MessageQueue 组成的，这段代码设计到的四个对象，他们彼此的关系如下:\n\n1. MessageQueue： 装食物的容器\n2. Message ：被装的食物\n3. Handler （msg.target 实际上就是 Handler）：食物的消费者\n4. Looper：负责分发食物的人\n\n\n\n### looper.prepare() 在当前线程关联一个 Lopper 对象\n\n```java\nprivate static void prepare(boolean quitAllowed) {\n    if(sThreadLocal.get() != null) {\n        throw new RuntimeException(\"Only one Lopper may be created per thread\");\n    }\n    \n    // 在当前线程绑定一个 looper\n    mThreadLocal.set(new Looper(quiteAllowed));\n}\n```\n\n在上面的代码中，做了两件事儿：\n\n1. 判断当前线程有没有 Looper，如果有则抛出异常（在这里我们就可以知道，Android 规定一个线程只能拥有一个与自己关联的 Looper。\n2. 如果有的话，那么就设置一个新的 Looper 到当前线程。\n\n### Handler 的使用\n\n```java\nHandler handler = new Handler (){\n    // \n    @Override\n    public void handleMessage(Message msg) {\n        // handle your message\n    }\n}\n```\n\n我们先来看下 Handler 的构造：\n\n```java\n// 空参构造与之对应\npublic Handler(Callback callbacck, boolean async) {\n    // 大姨泄漏提醒log\n    ...\n    // 获取与创建 Handler 线程的 Looper\n    mLooper = Looper.myLooper();\n    if(mLooper == null) {\n        throw new RunntimeException(\"Can`t create handler inside thread that has not called Looper.prepare()\");\n    }\n    \n    // 获取 Looper 绑定的 MessageQueue\n    // 因为一个 Looper 只有一个 MessageQueue， 也就是与当前线程绑定的 MessageQueue\n    mQueue = mLooper.mQueue;\n    mCallback = callback;\n    mAsynchronous = async;\n}\n```\n\n1. Looper.loop() 死循环中的 msg.target 是什么时候被赋值的？\n2. handler.handleMessage(msg) 在什么时候被回调的？\n\n\n\n**A1:** Looper.loop() 死循环中的 msg.target 是什么赋值的呢？要分析这个问题，自然的就想到从发送消息开始，无论是 handler.sendMessage(msg)  还是 handler.sendEmptyMessage(what)， 最后都可以追溯到下面这个方法：\n\n```java\npublic boolean sendMessageAtTime(Message msg, long uptimeMillis) {\n    // 引用 Handler 中的 MessageQueue\n    // 这个 MessageQueue 就是创建 Looper 时被创建的 MessageQueue\n    MessageQueue queue = mQueue;\n    \n    if(queue == null) {\n        RuntimeException e = new RuntimeException(\n        this + \" sendMessageAtTime() called withe no mQueue\");\n        Log.w(\"Looper\", e.getMessage(), e);\n        return false;\n    }\n    // 将新来的 Message 加入到 MessageQueue 中\n    return enqueueMessage(queue, msg, uptimeMillis);\n}\n```\n\n接下来看一下 `enququeMessage(queue, msg, uptimeMillis)`:\n\n```java\nprivate boolean enququeMessage(MessageQueue, queue, Message msg, long uptimeMillis) {\n   \tmsg.target = this;\n   \tif(mAsynchronous) {\n        msg.setAsynchronous(true);\n   \t}\n   \treturn queue.enqueueMessage(msg, uptimeMillis);\n}\n```\n\n\n\n**A2**:  handler.handleMessage(msg) 在什么时候被回调？通过上面的分析，我们很明确知道， Message 中的 target 是在什么时候赋值的，我们先来分析下在 Looper.loop() 中出现过的 dispatchMessage(msg) 方法\n\n```Java\npublic void diapatchMessage(Message msg) {\n    if(msg.callback != null) {\n        handleCallback(msg);\n    } else {\n        if(mCallback != null) {\n            if(mCallback.handleMessage(msg)) {\n                return;\n            }\n        }\n        handleMessage(msg); // 开始回调\n    }\n}\n```\n\n通过上面的分析，可以清楚的知道 Handler, Looper, Message, MessageQueue 这四者的关系以及如何合作了。\n\n\n\n## 总结\n\n当我们调用 handler.sendMessage(msg)； 方法发送一个 Message 时， 实际上这个 Message 是发送到与当前线程绑定的一个 MessageQueue 中，然后与当前线程绑定的 Looper 将会不断的从 MessageQueue 中取出新的 Message， 调用 msg.target.dispatchMessage(msg) 方法将消息发送到与 Message 绑定的 handler.handleMessage() 方法中。\n\n一个 Thread 对应多个 Handler， 一个 Thread 对应一个 Looper 和 MessageQueue， Handler 与 Thread 共享 Looper 和 MessageQueue。 Message 只是消息的载体，将会被发送到与线程绑定的唯一的 MessageQueue 中，并且被与线程绑定的唯一的 Looper 分发，被其自身绑定的 Handler 消费。","slug":"Handler 线程通信基础流程","published":1,"updated":"2019-08-15T08:12:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcnczcv000916y9h15kii8y","content":"<p>[TOC]</p>\n<p>Android 中线程通信靠的就是 Handler、Looper、Message、MessageQueue 这四个。</p>\n<h2 id=\"Looper\"><a href=\"#Looper\" class=\"headerlink\" title=\"Looper\"></a>Looper</h2><p>在 Looper 中，维持一个 Thread 对象以及 MessageQueue， 通过 Looper 的构造函数可以看出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Looper</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class=\"line\">    mQueue = <span class=\"keyword\">new</span> MessageQueue(quitAllowed);<span class=\"comment\">// 传入的参数代表这个 Queue 是否能够被退出</span></span><br><span class=\"line\">    mThread = Thread.currentThread();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Looper 在构造函数里做了两件事儿：</p>\n<ol>\n<li>将线程对象指向了创建的 Looper 的线程</li>\n<li>创建了一个新的  MessageQueue</li>\n</ol>\n<p>分析完构造函数后，看下面两个方法</p>\n<ol>\n<li>looper.loop()</li>\n<li>looper.prepare()</li>\n</ol>\n<a id=\"more\"></a>\n<h3 id=\"looper-loop\"><a href=\"#looper-loop\" class=\"headerlink\" title=\"looper.loop()\"></a>looper.loop()</h3><p>在当前线程中启动一个 Message loop 机制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Looper me = myLooper();<span class=\"comment\">// 获取当前线程绑定的 Looper</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(me == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn`t called on this thread\"</span>);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue();<span class=\"comment\">// 获取与 Looper 绑定的 MessageQueue</span></span><br><span class=\"line\">    <span class=\"comment\">// make sure the identity of this thread is that of the local process,</span></span><br><span class=\"line\">    <span class=\"comment\">// And keep track of what that identity token actuall is.</span></span><br><span class=\"line\">    Binder.clearCallingIdentity();</span><br><span class=\"line\">    fianl <span class=\"keyword\">long</span> ident = Binder.clearCallingIdentity();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 进入死循环，不断获取对象，分发对象到 Handler 中去消费</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;;) &#123;</span><br><span class=\"line\">        Message msg = queue.next();<span class=\"comment\">// 不断获取下一个 message 对象，这里可能会造成阻塞。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(msg == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No message idicates that the message queue is quittig.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class=\"line\">        Printer logging = me.mLogging;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(logging != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            logging.println(<span class=\"string\">\"&gt;&gt;&gt; Dispatching to \"</span> + msg.target + <span class=\"string\">\" \"</span> + msg.callback _ <span class=\"string\">\": \"</span> + msg.what);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 在这里开始分发 Message </span></span><br><span class=\"line\">        msg.target.dispatchMessage(msg);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(logging != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            logging.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt; Finished to \"</span> + msg.target + <span class=\"string\">\" \"</span> + msg.callback);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Make sure that during the course of dispatching the identity of the thread wasn`t corrupted.</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> newIdent = Binder.clearCallingIdentity();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ident != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Log.wtf(TAG, <span class=\"string\">\"Thread identity changed from 0x\"</span></span><br><span class=\"line\">                        + Long.toHexString(ident) + <span class=\"string\">\" to 0x\"</span></span><br><span class=\"line\">                        + Long.toHexString(newIdent) + <span class=\"string\">\" while dispatching to \"</span></span><br><span class=\"line\">                        + msg.target.getClass().getName() + <span class=\"string\">\" \"</span></span><br><span class=\"line\">                        + msg.callback + <span class=\"string\">\" what=\"</span> + msg.what);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当分发完 Message 后，当然要标记将该 Message 为 “正在使用”</span></span><br><span class=\"line\">        msg.recycleUnchecked();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，最重要的方法是：</p>\n<ol>\n<li><code>queue.next()</code></li>\n<li><code>msg.target.dispatchMessage(msg)</code></li>\n<li><code>msg.recycleUnchecked()</code></li>\n</ol>\n<p>其实 Looper 中最重要的部分都是由 Message、MessageQueue 组成的，这段代码设计到的四个对象，他们彼此的关系如下:</p>\n<ol>\n<li>MessageQueue： 装食物的容器</li>\n<li>Message ：被装的食物</li>\n<li>Handler （msg.target 实际上就是 Handler）：食物的消费者</li>\n<li>Looper：负责分发食物的人</li>\n</ol>\n<h3 id=\"looper-prepare-在当前线程关联一个-Lopper-对象\"><a href=\"#looper-prepare-在当前线程关联一个-Lopper-对象\" class=\"headerlink\" title=\"looper.prepare() 在当前线程关联一个 Lopper 对象\"></a>looper.prepare() 在当前线程关联一个 Lopper 对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sThreadLocal.get() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Only one Lopper may be created per thread\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 在当前线程绑定一个 looper</span></span><br><span class=\"line\">    mThreadLocal.set(<span class=\"keyword\">new</span> Looper(quiteAllowed));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，做了两件事儿：</p>\n<ol>\n<li>判断当前线程有没有 Looper，如果有则抛出异常（在这里我们就可以知道，Android 规定一个线程只能拥有一个与自己关联的 Looper。</li>\n<li>如果有的话，那么就设置一个新的 Looper 到当前线程。</li>\n</ol>\n<h3 id=\"Handler-的使用\"><a href=\"#Handler-的使用\" class=\"headerlink\" title=\"Handler 的使用\"></a>Handler 的使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Handler handler = <span class=\"keyword\">new</span> Handler ()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// handle your message</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们先来看下 Handler 的构造：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 空参构造与之对应</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Callback callbacck, <span class=\"keyword\">boolean</span> async)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 大姨泄漏提醒log</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 获取与创建 Handler 线程的 Looper</span></span><br><span class=\"line\">    mLooper = Looper.myLooper();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mLooper == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RunntimeException(<span class=\"string\">\"Can`t create handler inside thread that has not called Looper.prepare()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取 Looper 绑定的 MessageQueue</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为一个 Looper 只有一个 MessageQueue， 也就是与当前线程绑定的 MessageQueue</span></span><br><span class=\"line\">    mQueue = mLooper.mQueue;</span><br><span class=\"line\">    mCallback = callback;</span><br><span class=\"line\">    mAsynchronous = async;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Looper.loop() 死循环中的 msg.target 是什么时候被赋值的？</li>\n<li>handler.handleMessage(msg) 在什么时候被回调的？</li>\n</ol>\n<p><strong>A1:</strong> Looper.loop() 死循环中的 msg.target 是什么赋值的呢？要分析这个问题，自然的就想到从发送消息开始，无论是 handler.sendMessage(msg)  还是 handler.sendEmptyMessage(what)， 最后都可以追溯到下面这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageAtTime</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 引用 Handler 中的 MessageQueue</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个 MessageQueue 就是创建 Looper 时被创建的 MessageQueue</span></span><br><span class=\"line\">    MessageQueue queue = mQueue;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(queue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</span><br><span class=\"line\">        <span class=\"keyword\">this</span> + <span class=\"string\">\" sendMessageAtTime() called withe no mQueue\"</span>);</span><br><span class=\"line\">        Log.w(<span class=\"string\">\"Looper\"</span>, e.getMessage(), e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将新来的 Message 加入到 MessageQueue 中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来看一下 <code>enququeMessage(queue, msg, uptimeMillis)</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enququeMessage</span><span class=\"params\">(MessageQueue, queue, Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class=\"line\">   \tmsg.target = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span>(mAsynchronous) &#123;</span><br><span class=\"line\">        msg.setAsynchronous(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t<span class=\"keyword\">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>A2</strong>:  handler.handleMessage(msg) 在什么时候被回调？通过上面的分析，我们很明确知道， Message 中的 target 是在什么时候赋值的，我们先来分析下在 Looper.loop() 中出现过的 dispatchMessage(msg) 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">diapatchMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(msg.callback != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        handleCallback(msg);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mCallback != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mCallback.handleMessage(msg)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        handleMessage(msg); <span class=\"comment\">// 开始回调</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面的分析，可以清楚的知道 Handler, Looper, Message, MessageQueue 这四者的关系以及如何合作了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当我们调用 handler.sendMessage(msg)； 方法发送一个 Message 时， 实际上这个 Message 是发送到与当前线程绑定的一个 MessageQueue 中，然后与当前线程绑定的 Looper 将会不断的从 MessageQueue 中取出新的 Message， 调用 msg.target.dispatchMessage(msg) 方法将消息发送到与 Message 绑定的 handler.handleMessage() 方法中。</p>\n<p>一个 Thread 对应多个 Handler， 一个 Thread 对应一个 Looper 和 MessageQueue， Handler 与 Thread 共享 Looper 和 MessageQueue。 Message 只是消息的载体，将会被发送到与线程绑定的唯一的 MessageQueue 中，并且被与线程绑定的唯一的 Looper 分发，被其自身绑定的 Handler 消费。</p>\n","site":{"data":{}},"excerpt":"<p>[TOC]</p>\n<p>Android 中线程通信靠的就是 Handler、Looper、Message、MessageQueue 这四个。</p>\n<h2 id=\"Looper\"><a href=\"#Looper\" class=\"headerlink\" title=\"Looper\"></a>Looper</h2><p>在 Looper 中，维持一个 Thread 对象以及 MessageQueue， 通过 Looper 的构造函数可以看出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Looper</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class=\"line\">    mQueue = <span class=\"keyword\">new</span> MessageQueue(quitAllowed);<span class=\"comment\">// 传入的参数代表这个 Queue 是否能够被退出</span></span><br><span class=\"line\">    mThread = Thread.currentThread();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Looper 在构造函数里做了两件事儿：</p>\n<ol>\n<li>将线程对象指向了创建的 Looper 的线程</li>\n<li>创建了一个新的  MessageQueue</li>\n</ol>\n<p>分析完构造函数后，看下面两个方法</p>\n<ol>\n<li>looper.loop()</li>\n<li>looper.prepare()</li>\n</ol>","more":"<h3 id=\"looper-loop\"><a href=\"#looper-loop\" class=\"headerlink\" title=\"looper.loop()\"></a>looper.loop()</h3><p>在当前线程中启动一个 Message loop 机制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Looper me = myLooper();<span class=\"comment\">// 获取当前线程绑定的 Looper</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(me == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn`t called on this thread\"</span>);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue();<span class=\"comment\">// 获取与 Looper 绑定的 MessageQueue</span></span><br><span class=\"line\">    <span class=\"comment\">// make sure the identity of this thread is that of the local process,</span></span><br><span class=\"line\">    <span class=\"comment\">// And keep track of what that identity token actuall is.</span></span><br><span class=\"line\">    Binder.clearCallingIdentity();</span><br><span class=\"line\">    fianl <span class=\"keyword\">long</span> ident = Binder.clearCallingIdentity();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 进入死循环，不断获取对象，分发对象到 Handler 中去消费</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;;) &#123;</span><br><span class=\"line\">        Message msg = queue.next();<span class=\"comment\">// 不断获取下一个 message 对象，这里可能会造成阻塞。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(msg == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No message idicates that the message queue is quittig.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class=\"line\">        Printer logging = me.mLogging;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(logging != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            logging.println(<span class=\"string\">\"&gt;&gt;&gt; Dispatching to \"</span> + msg.target + <span class=\"string\">\" \"</span> + msg.callback _ <span class=\"string\">\": \"</span> + msg.what);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 在这里开始分发 Message </span></span><br><span class=\"line\">        msg.target.dispatchMessage(msg);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(logging != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            logging.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt; Finished to \"</span> + msg.target + <span class=\"string\">\" \"</span> + msg.callback);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Make sure that during the course of dispatching the identity of the thread wasn`t corrupted.</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> newIdent = Binder.clearCallingIdentity();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ident != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Log.wtf(TAG, <span class=\"string\">\"Thread identity changed from 0x\"</span></span><br><span class=\"line\">                        + Long.toHexString(ident) + <span class=\"string\">\" to 0x\"</span></span><br><span class=\"line\">                        + Long.toHexString(newIdent) + <span class=\"string\">\" while dispatching to \"</span></span><br><span class=\"line\">                        + msg.target.getClass().getName() + <span class=\"string\">\" \"</span></span><br><span class=\"line\">                        + msg.callback + <span class=\"string\">\" what=\"</span> + msg.what);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当分发完 Message 后，当然要标记将该 Message 为 “正在使用”</span></span><br><span class=\"line\">        msg.recycleUnchecked();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，最重要的方法是：</p>\n<ol>\n<li><code>queue.next()</code></li>\n<li><code>msg.target.dispatchMessage(msg)</code></li>\n<li><code>msg.recycleUnchecked()</code></li>\n</ol>\n<p>其实 Looper 中最重要的部分都是由 Message、MessageQueue 组成的，这段代码设计到的四个对象，他们彼此的关系如下:</p>\n<ol>\n<li>MessageQueue： 装食物的容器</li>\n<li>Message ：被装的食物</li>\n<li>Handler （msg.target 实际上就是 Handler）：食物的消费者</li>\n<li>Looper：负责分发食物的人</li>\n</ol>\n<h3 id=\"looper-prepare-在当前线程关联一个-Lopper-对象\"><a href=\"#looper-prepare-在当前线程关联一个-Lopper-对象\" class=\"headerlink\" title=\"looper.prepare() 在当前线程关联一个 Lopper 对象\"></a>looper.prepare() 在当前线程关联一个 Lopper 对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sThreadLocal.get() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Only one Lopper may be created per thread\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 在当前线程绑定一个 looper</span></span><br><span class=\"line\">    mThreadLocal.set(<span class=\"keyword\">new</span> Looper(quiteAllowed));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，做了两件事儿：</p>\n<ol>\n<li>判断当前线程有没有 Looper，如果有则抛出异常（在这里我们就可以知道，Android 规定一个线程只能拥有一个与自己关联的 Looper。</li>\n<li>如果有的话，那么就设置一个新的 Looper 到当前线程。</li>\n</ol>\n<h3 id=\"Handler-的使用\"><a href=\"#Handler-的使用\" class=\"headerlink\" title=\"Handler 的使用\"></a>Handler 的使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Handler handler = <span class=\"keyword\">new</span> Handler ()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// handle your message</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们先来看下 Handler 的构造：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 空参构造与之对应</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Callback callbacck, <span class=\"keyword\">boolean</span> async)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 大姨泄漏提醒log</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 获取与创建 Handler 线程的 Looper</span></span><br><span class=\"line\">    mLooper = Looper.myLooper();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mLooper == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RunntimeException(<span class=\"string\">\"Can`t create handler inside thread that has not called Looper.prepare()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取 Looper 绑定的 MessageQueue</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为一个 Looper 只有一个 MessageQueue， 也就是与当前线程绑定的 MessageQueue</span></span><br><span class=\"line\">    mQueue = mLooper.mQueue;</span><br><span class=\"line\">    mCallback = callback;</span><br><span class=\"line\">    mAsynchronous = async;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Looper.loop() 死循环中的 msg.target 是什么时候被赋值的？</li>\n<li>handler.handleMessage(msg) 在什么时候被回调的？</li>\n</ol>\n<p><strong>A1:</strong> Looper.loop() 死循环中的 msg.target 是什么赋值的呢？要分析这个问题，自然的就想到从发送消息开始，无论是 handler.sendMessage(msg)  还是 handler.sendEmptyMessage(what)， 最后都可以追溯到下面这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageAtTime</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 引用 Handler 中的 MessageQueue</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个 MessageQueue 就是创建 Looper 时被创建的 MessageQueue</span></span><br><span class=\"line\">    MessageQueue queue = mQueue;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(queue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</span><br><span class=\"line\">        <span class=\"keyword\">this</span> + <span class=\"string\">\" sendMessageAtTime() called withe no mQueue\"</span>);</span><br><span class=\"line\">        Log.w(<span class=\"string\">\"Looper\"</span>, e.getMessage(), e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将新来的 Message 加入到 MessageQueue 中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来看一下 <code>enququeMessage(queue, msg, uptimeMillis)</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enququeMessage</span><span class=\"params\">(MessageQueue, queue, Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class=\"line\">   \tmsg.target = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span>(mAsynchronous) &#123;</span><br><span class=\"line\">        msg.setAsynchronous(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t<span class=\"keyword\">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>A2</strong>:  handler.handleMessage(msg) 在什么时候被回调？通过上面的分析，我们很明确知道， Message 中的 target 是在什么时候赋值的，我们先来分析下在 Looper.loop() 中出现过的 dispatchMessage(msg) 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">diapatchMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(msg.callback != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        handleCallback(msg);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mCallback != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mCallback.handleMessage(msg)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        handleMessage(msg); <span class=\"comment\">// 开始回调</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面的分析，可以清楚的知道 Handler, Looper, Message, MessageQueue 这四者的关系以及如何合作了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当我们调用 handler.sendMessage(msg)； 方法发送一个 Message 时， 实际上这个 Message 是发送到与当前线程绑定的一个 MessageQueue 中，然后与当前线程绑定的 Looper 将会不断的从 MessageQueue 中取出新的 Message， 调用 msg.target.dispatchMessage(msg) 方法将消息发送到与 Message 绑定的 handler.handleMessage() 方法中。</p>\n<p>一个 Thread 对应多个 Handler， 一个 Thread 对应一个 Looper 和 MessageQueue， Handler 与 Thread 共享 Looper 和 MessageQueue。 Message 只是消息的载体，将会被发送到与线程绑定的唯一的 MessageQueue 中，并且被与线程绑定的唯一的 Looper 分发，被其自身绑定的 Handler 消费。</p>"},{"_content":"# Java Reference(SoftReference, WeakReference, PhantomReference, StrongReference) 的使用\n\n\n\n## Reference 引用\n\n继承自 Object， 有 SoftReference, WeakReference, PhantomReference 三个直接子类。\n\n三个子类的构造方法中涉及到 ReferenceQueue 和 Referent：\n\n* Referent： 被引用对象\n* ReferenceQueue：当引用（软引用、弱引用、虚引用）的 Referent 被回收后，该引用（软引用、弱引用、虚引用）会被 enqueue 到这个 ReferenceQueue 中。\n\n\n\n```java\npublic class ReferenceTest{\n    public static void main(String[] args) {\n        \n    }\n    \n    static class Person　{\n        private String name;\n        private String getName(){\n            return name;\n        }\n        private void setName(String name) {\n            this.name = name;\n        }\n        \n        @Override\n        protected void finalize() throws Throwable {\n            super.finalize();\n            System.out.println(\"in Person finalize\");\n        }\n    }\n}\n\n```\n\n\n\n\n\n## StrongReference 强引用\n\nJava 中使用的最多，普通的引用 `Object obj = new Object();  Person p = new Person();` 都属于`强引用` \n\n强引用本身存储在栈中，new 出来的对象存储在堆中。栈中保存的引用指向堆中对象的地址。\n\n一般情况下，当引用不在指向堆中对象的地址时（person = null） GC collector 就开始考虑对此内存（堆中的对象）进行回收。\n\n\n\n```Java\nPerson p = new Person();\n```\n\nperson 就是一个强引用，强引用不会被 GC，即使内存不够抛出 OOM 时也不会被回收。\n\n\n\n## SoftReference 软引用\n\n软引用普通使用形式：\n\n```java\nPerson p = new Person();\nSoftReference<Person> sr = new SoftReference<Person>(person);\n```\n\n强引用 person 作为参数，创建了一个软引用对象 sr, 下面是例子：\n\n```java\nprivate static void testSofeReference(){\n    // 创建强引用对象\n    Person person = new Person();\n    System.out.println(\"person 对象为\" + person);\n    \n    // 创建软引用对象\n    SoftReference<Person> sr = new SoftReference<Person>(person);\n    person = null; // 之前 new 出的 Person 对象不会立即被回收，除非 JVM 需要内存(OOM 之前)\n    if(sr.get() == null) {\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + sr.get());\n    }\n    \n    System.gc();\n    \n    if(sr.get() == null){\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + sr.get());\n    }\n}\n\n```\n\n执行上面的例子：\n\n```\nperson 对象为 com.example.ReferenceTest$Person@522d9d8c\nperson 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c\nperson 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c\n```\n\n* 当执行 person = null 后，堆内存的 Person 对象不再有任何强引用指向它，但此时还存在 sr 引用的对象指向 Person 对象。此时调用 sr.get() 方法，返回 Person 对象，即之前堆中的强引用对象了。我们可以合理猜测GC collector 很有可能尚未进行垃圾回收，所以此时 sr.get() 方法返回不为空。\n* 我们继续执行 `System.gc()` 强制进行垃圾回收，打印结果可以看到， sr.get() 返回依然不为空，说明 Person 对象依旧没有被回收。\n\n\n\n**软引用所指向的对象要进行回收，需要满足两个条件：**\n\n1. 没有任何强引用指向软引用指向的对象（内存中的 Person 对象）\n2.  JVM 需要内存时，即在抛出 OOM 之前\n\n**总结：** SoftReference 变相延长了其只是对象占据堆内存的时间，直到虚拟机内存不足时垃圾回收才回收此堆内存空间。\n\n\n\n**软引用还可以和一个 ReferenceQueue 一起使用，** 当 SoftReference 的 Referent 被回收以后，这个 SoftReference 会被自动 enqueue 到这个 ReferenctQueue 中。\n\n```java\nprivate static void testSoftReferenceWithQueue(){\n    Person person = new Person();\n    System.out.println(\"person 对象为：\" + person);\n    \n    ReferenceQueue<Person> queue = new ReferenceQueue<>();\n    SoftReference<Person> sr = new SoftReference<>(person, queue);\n    \n    person = null; // 之前 new 出的 Person 对象不会立即被回收，除非 JVM 需要内存 （OOM 前）\n    if(sr.get() == null) {\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + sr.get());\n    }\n    \n    System.out.println(\"加入 ReferenceQueue 的对象为：\" + queue.poll());\n    \n    System.gc();\n    \n    if(sr.get() == null) {\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + sr.get());\n    }\n    \n    System.out.println(\"加入 ReferenceQueue 的对象为： \" + queue.poll());\n}\n```\n\n执行上述例子，结果如下：\n\n```\nperson 对象为 com.example.ReferenceTest$Person@522d9d8c\nperson 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c\n加入 ReferenceQueue 的对象为 null\nperson 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c\n加入 ReferenceQueue 的对象为 null\n```\n\n**注意：** 当 SoftReference 或 WeakReference 的 get() 方法返回 null 时，仅表明其指示的对象已经进入垃圾回收流程，此时对象不一定已经被垃圾回收。\n\n而只有确认被垃圾回收后，如果有 ReferenceQueue ，其引用才会被放置于 ReferenceQueue 中。\n\n\n\n## WeakReference 弱引用\n\n弱引用的一般使用形式：\n\n```Java\nprivate static void testWeakReference(){\n    Person person = new Person();\n    System.out.println(\"person 对象为： \" + person);\n    \n    WeakReference<Person> wr = new WeakReference<>(person);\n    person = null; // 被 GC 后，之前 new 出的 Person 对象会立即被回收，进入 GC 流程。\n    if (wr.get() == null) {\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + wr.get());\n    }\n    \n    System.gc();\n    \n    if (wr.get() == null) {\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + wr.get());\n    }\n}\n```\n\n执行结果为：\n\n```\nperson 对象为 com.example.ReferenceTest$Person@522d9d8c\nperson 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c\nperson 对象进入 GC 流程\nin Person finalize\n```\n\n* 当执行 `person = null` 后，堆内存的  Person 对象不再有任何引用指向它，但此时还存在 wr 引用的对象指向 Person 对象。\n\n  此时调用 `wr.get()` 方法，返回 Person 对象，即之前堆中的强引用对象，我们可以合理猜测 GC collector 很有可能尚未进行垃圾回收，所以此时 `wr.get()` 方法返回不为空。\n\n* 继续执行 `System.gc()` 强制执行垃圾回收，打印结果可以看到，`wr.get()` 返回为空 “person 对象进入 GC 流程” ，且执行了静态内部类中的 finalize 方法。说明 Person 对象被回收，进入垃圾回收流程。\n\n\n\n**弱引用所指向的对象要进行回收，只需要满足条件：**\n\n​\t没有任何强引用指向弱引用指向的对象（内存中的 Person 对象）\n\n\n\n**总结：**\n\n​\tWeakReference 不改变原有的强引用独享的垃圾回收机制，一旦其指示对象没有任何强引用对象时，此对象即进入正常的垃圾回收流程。\n\n\n\n**其主要使用场景见于：** \n\n​\t当前已有强引用指向强引用对象，此时由于业务需要，需要增加对此对象的引用，同时又不希望改变此引用的垃圾回收机制，此时 `WeakReference` 正好符合需求，常见于一些与生命周期的场景中，比如 Activity 中的 Handler 的使用，为了防止内存泄露需要用到弱引用。\n\n\n\n与 SoftReference 一样，可以同 ReferenceQueue 一起使用。当 WeakReference 的 Referent 被回收以后，这个 WeakReference 会被自动 enqueue 到这个 ReferenceQueue 中。\n\n```java\nprivate static void testWeakReferenceWithQueue () {\n    Person person = new Person();\n    System.out.println(\"person 对象为 \" + person);\n    \n    ReferenceQueue<Person> queue = new ReferenceQueue<>();\n    WeakReference<Person> wr = new WeakReference<>(person, queue);\n    System.out.println(\"wr 对象为 \" + wr);\n    \n    if (wr.get() == null) {\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + wr.get());\n    }\n    \n    System.out.println(\"Whether or not this reference has been enqueued:\" + wr.isEnqueued());\n    System.out.println(\"Queue item: \" + queue.pull());\n    \n    System.gc();\n    \n    if (wr.get() == null) {// 仅是表名指示的对象已经进入垃圾回收流程，此时对象不一定已经被垃圾回收，只有确认被垃圾回收后，如果有 ReferenceQueue ，其引用才会被放置于 ReferenceQueue 中。\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + wr.get());\n    }\n    \n    try {\n        // 确保垃圾回收线程能够执行\n        Thread.sleep(1);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n\n    System.out.println(\"Whether or not this reference has been enqueued: \" + wr.isEnqueued());\n    System.out.println(\"queue item: \" + queue.poll());\n}\n```\n\n\n\n**执行结果：**\n\n```\nperson 对象为 com.example.ReferenceTEst$Person@522d9d8c\nwr 对象为 java.lang.ref.WeakReference@603828d2\nperson 对象尚未被回收 com.example.ReferenceTEst$Person@522d9d8c\nWhether or not this reference has been enqueued: false\nqueue item: null\nperson 对象进入回收流程\nin Person finalize\nWhether or not this reference has been enqueued: true\nqueue item: java.lang.ref.WeakReference@603828d2\n```\n\n\n\n从第二行到最后行可以看出， person 进入 GC 流程后，wr 被加入到 queue 中。\n\n**注意：**\n\n​\t 当 SoftReference 或者 WeakReference 的 get() 方法返回 null 时，仅表示其指示对象已经进入垃圾回收流程，此时对象不一定已经被垃圾回收。\n\n​\t而只有确认被垃圾回收后，如果有 ReferenceQueue， 其引用才会被放置于 ReferenceQueue 中。\n\n\n\n## PhantomReference 虚引用\n\n虚引用源码：\n\n```java\npackage java.lang.ref;\n\nimport java.lang.ref.Reference;\nimport java.lang.ref.ReferenceQueue;\n\npublic class PhantomReference<T> extends Reference<T> {\n    public T get(){\n        return null;\n    }\n    \n    public PhantomReference(T var1, ReferenceQueue<? super T> var2) {\n        super.(var1, var2);\n    }\n}\n```\n\n\n\n* PhantomReference 只有一个构造函数 `PhantomReference(T referenct, ReferenceQueue<? super T> q) `  因此，PhantomReference 使用必须结合 ReferenceQueue；\n* 不管有无强引用指向 PhantomReference 的指示对象， PhantomReference 的 get() 方法返回结果都是 null\n\n举例：\n\n```java\nprivate static void testPhantomReference() {\n    Person person = new Person();\n    System.out.println(\"person 对象为\" + person);\n    \n    ReferenceQueue<Person> queue = new ReferenceQueue<>();\n    PhantomReference<Person> pr = new PhantomReference<>(person, queue);\n    \n    System.out.println(\"pr 对象为\" + pr);\n    System.out.println(\"pr.get() = \" + pr.get());\n    \n    person = null;\n    \n    System.gc();\n    \n    try{\n        // 确保垃圾回收线程执行\n        Thread.sleep(1);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    \n    System.out.println(\"queue item: \" + queue.poll());\n}\n```\n\n**执行结果：**\n\n```\nperson 对象为 com.example.ReferenceTEst$Person@522d9d8c\npr 对象为 java.lang.ref.PhantomReference@60e35b53\npr.get() = null\nin Person finalize\nqueue ite: java.lang.ref.PhantomReference@60e35b53\n```\n\n\n\n**总结：**\n\n​\t与 WeakReference 一样，不改变原有的强引用对象的垃圾回收机制。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可以被垃圾回收。虚引用主要用来跟踪对象被垃圾回收后的活动（监听并才去必要的行动）\n\n\n\n**用途：**\n\n​\t当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。\n\n​\t程序可以通过判断医用队列中是否已经加入虚引用来了解被引用的对象是否将要被垃圾回收。\n\n​\t程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前才去必要的行动。","source":"_posts/Java 各引用之间的区别.md","raw":"# Java Reference(SoftReference, WeakReference, PhantomReference, StrongReference) 的使用\n\n\n\n## Reference 引用\n\n继承自 Object， 有 SoftReference, WeakReference, PhantomReference 三个直接子类。\n\n三个子类的构造方法中涉及到 ReferenceQueue 和 Referent：\n\n* Referent： 被引用对象\n* ReferenceQueue：当引用（软引用、弱引用、虚引用）的 Referent 被回收后，该引用（软引用、弱引用、虚引用）会被 enqueue 到这个 ReferenceQueue 中。\n\n\n\n```java\npublic class ReferenceTest{\n    public static void main(String[] args) {\n        \n    }\n    \n    static class Person　{\n        private String name;\n        private String getName(){\n            return name;\n        }\n        private void setName(String name) {\n            this.name = name;\n        }\n        \n        @Override\n        protected void finalize() throws Throwable {\n            super.finalize();\n            System.out.println(\"in Person finalize\");\n        }\n    }\n}\n\n```\n\n\n\n\n\n## StrongReference 强引用\n\nJava 中使用的最多，普通的引用 `Object obj = new Object();  Person p = new Person();` 都属于`强引用` \n\n强引用本身存储在栈中，new 出来的对象存储在堆中。栈中保存的引用指向堆中对象的地址。\n\n一般情况下，当引用不在指向堆中对象的地址时（person = null） GC collector 就开始考虑对此内存（堆中的对象）进行回收。\n\n\n\n```Java\nPerson p = new Person();\n```\n\nperson 就是一个强引用，强引用不会被 GC，即使内存不够抛出 OOM 时也不会被回收。\n\n\n\n## SoftReference 软引用\n\n软引用普通使用形式：\n\n```java\nPerson p = new Person();\nSoftReference<Person> sr = new SoftReference<Person>(person);\n```\n\n强引用 person 作为参数，创建了一个软引用对象 sr, 下面是例子：\n\n```java\nprivate static void testSofeReference(){\n    // 创建强引用对象\n    Person person = new Person();\n    System.out.println(\"person 对象为\" + person);\n    \n    // 创建软引用对象\n    SoftReference<Person> sr = new SoftReference<Person>(person);\n    person = null; // 之前 new 出的 Person 对象不会立即被回收，除非 JVM 需要内存(OOM 之前)\n    if(sr.get() == null) {\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + sr.get());\n    }\n    \n    System.gc();\n    \n    if(sr.get() == null){\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + sr.get());\n    }\n}\n\n```\n\n执行上面的例子：\n\n```\nperson 对象为 com.example.ReferenceTest$Person@522d9d8c\nperson 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c\nperson 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c\n```\n\n* 当执行 person = null 后，堆内存的 Person 对象不再有任何强引用指向它，但此时还存在 sr 引用的对象指向 Person 对象。此时调用 sr.get() 方法，返回 Person 对象，即之前堆中的强引用对象了。我们可以合理猜测GC collector 很有可能尚未进行垃圾回收，所以此时 sr.get() 方法返回不为空。\n* 我们继续执行 `System.gc()` 强制进行垃圾回收，打印结果可以看到， sr.get() 返回依然不为空，说明 Person 对象依旧没有被回收。\n\n\n\n**软引用所指向的对象要进行回收，需要满足两个条件：**\n\n1. 没有任何强引用指向软引用指向的对象（内存中的 Person 对象）\n2.  JVM 需要内存时，即在抛出 OOM 之前\n\n**总结：** SoftReference 变相延长了其只是对象占据堆内存的时间，直到虚拟机内存不足时垃圾回收才回收此堆内存空间。\n\n\n\n**软引用还可以和一个 ReferenceQueue 一起使用，** 当 SoftReference 的 Referent 被回收以后，这个 SoftReference 会被自动 enqueue 到这个 ReferenctQueue 中。\n\n```java\nprivate static void testSoftReferenceWithQueue(){\n    Person person = new Person();\n    System.out.println(\"person 对象为：\" + person);\n    \n    ReferenceQueue<Person> queue = new ReferenceQueue<>();\n    SoftReference<Person> sr = new SoftReference<>(person, queue);\n    \n    person = null; // 之前 new 出的 Person 对象不会立即被回收，除非 JVM 需要内存 （OOM 前）\n    if(sr.get() == null) {\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + sr.get());\n    }\n    \n    System.out.println(\"加入 ReferenceQueue 的对象为：\" + queue.poll());\n    \n    System.gc();\n    \n    if(sr.get() == null) {\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + sr.get());\n    }\n    \n    System.out.println(\"加入 ReferenceQueue 的对象为： \" + queue.poll());\n}\n```\n\n执行上述例子，结果如下：\n\n```\nperson 对象为 com.example.ReferenceTest$Person@522d9d8c\nperson 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c\n加入 ReferenceQueue 的对象为 null\nperson 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c\n加入 ReferenceQueue 的对象为 null\n```\n\n**注意：** 当 SoftReference 或 WeakReference 的 get() 方法返回 null 时，仅表明其指示的对象已经进入垃圾回收流程，此时对象不一定已经被垃圾回收。\n\n而只有确认被垃圾回收后，如果有 ReferenceQueue ，其引用才会被放置于 ReferenceQueue 中。\n\n\n\n## WeakReference 弱引用\n\n弱引用的一般使用形式：\n\n```Java\nprivate static void testWeakReference(){\n    Person person = new Person();\n    System.out.println(\"person 对象为： \" + person);\n    \n    WeakReference<Person> wr = new WeakReference<>(person);\n    person = null; // 被 GC 后，之前 new 出的 Person 对象会立即被回收，进入 GC 流程。\n    if (wr.get() == null) {\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + wr.get());\n    }\n    \n    System.gc();\n    \n    if (wr.get() == null) {\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + wr.get());\n    }\n}\n```\n\n执行结果为：\n\n```\nperson 对象为 com.example.ReferenceTest$Person@522d9d8c\nperson 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c\nperson 对象进入 GC 流程\nin Person finalize\n```\n\n* 当执行 `person = null` 后，堆内存的  Person 对象不再有任何引用指向它，但此时还存在 wr 引用的对象指向 Person 对象。\n\n  此时调用 `wr.get()` 方法，返回 Person 对象，即之前堆中的强引用对象，我们可以合理猜测 GC collector 很有可能尚未进行垃圾回收，所以此时 `wr.get()` 方法返回不为空。\n\n* 继续执行 `System.gc()` 强制执行垃圾回收，打印结果可以看到，`wr.get()` 返回为空 “person 对象进入 GC 流程” ，且执行了静态内部类中的 finalize 方法。说明 Person 对象被回收，进入垃圾回收流程。\n\n\n\n**弱引用所指向的对象要进行回收，只需要满足条件：**\n\n​\t没有任何强引用指向弱引用指向的对象（内存中的 Person 对象）\n\n\n\n**总结：**\n\n​\tWeakReference 不改变原有的强引用独享的垃圾回收机制，一旦其指示对象没有任何强引用对象时，此对象即进入正常的垃圾回收流程。\n\n\n\n**其主要使用场景见于：** \n\n​\t当前已有强引用指向强引用对象，此时由于业务需要，需要增加对此对象的引用，同时又不希望改变此引用的垃圾回收机制，此时 `WeakReference` 正好符合需求，常见于一些与生命周期的场景中，比如 Activity 中的 Handler 的使用，为了防止内存泄露需要用到弱引用。\n\n\n\n与 SoftReference 一样，可以同 ReferenceQueue 一起使用。当 WeakReference 的 Referent 被回收以后，这个 WeakReference 会被自动 enqueue 到这个 ReferenceQueue 中。\n\n```java\nprivate static void testWeakReferenceWithQueue () {\n    Person person = new Person();\n    System.out.println(\"person 对象为 \" + person);\n    \n    ReferenceQueue<Person> queue = new ReferenceQueue<>();\n    WeakReference<Person> wr = new WeakReference<>(person, queue);\n    System.out.println(\"wr 对象为 \" + wr);\n    \n    if (wr.get() == null) {\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + wr.get());\n    }\n    \n    System.out.println(\"Whether or not this reference has been enqueued:\" + wr.isEnqueued());\n    System.out.println(\"Queue item: \" + queue.pull());\n    \n    System.gc();\n    \n    if (wr.get() == null) {// 仅是表名指示的对象已经进入垃圾回收流程，此时对象不一定已经被垃圾回收，只有确认被垃圾回收后，如果有 ReferenceQueue ，其引用才会被放置于 ReferenceQueue 中。\n        System.out.println(\"person 对象进入 GC 流程\");\n    } else {\n        System.out.println(\"person 对象尚未被回收\" + wr.get());\n    }\n    \n    try {\n        // 确保垃圾回收线程能够执行\n        Thread.sleep(1);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n\n    System.out.println(\"Whether or not this reference has been enqueued: \" + wr.isEnqueued());\n    System.out.println(\"queue item: \" + queue.poll());\n}\n```\n\n\n\n**执行结果：**\n\n```\nperson 对象为 com.example.ReferenceTEst$Person@522d9d8c\nwr 对象为 java.lang.ref.WeakReference@603828d2\nperson 对象尚未被回收 com.example.ReferenceTEst$Person@522d9d8c\nWhether or not this reference has been enqueued: false\nqueue item: null\nperson 对象进入回收流程\nin Person finalize\nWhether or not this reference has been enqueued: true\nqueue item: java.lang.ref.WeakReference@603828d2\n```\n\n\n\n从第二行到最后行可以看出， person 进入 GC 流程后，wr 被加入到 queue 中。\n\n**注意：**\n\n​\t 当 SoftReference 或者 WeakReference 的 get() 方法返回 null 时，仅表示其指示对象已经进入垃圾回收流程，此时对象不一定已经被垃圾回收。\n\n​\t而只有确认被垃圾回收后，如果有 ReferenceQueue， 其引用才会被放置于 ReferenceQueue 中。\n\n\n\n## PhantomReference 虚引用\n\n虚引用源码：\n\n```java\npackage java.lang.ref;\n\nimport java.lang.ref.Reference;\nimport java.lang.ref.ReferenceQueue;\n\npublic class PhantomReference<T> extends Reference<T> {\n    public T get(){\n        return null;\n    }\n    \n    public PhantomReference(T var1, ReferenceQueue<? super T> var2) {\n        super.(var1, var2);\n    }\n}\n```\n\n\n\n* PhantomReference 只有一个构造函数 `PhantomReference(T referenct, ReferenceQueue<? super T> q) `  因此，PhantomReference 使用必须结合 ReferenceQueue；\n* 不管有无强引用指向 PhantomReference 的指示对象， PhantomReference 的 get() 方法返回结果都是 null\n\n举例：\n\n```java\nprivate static void testPhantomReference() {\n    Person person = new Person();\n    System.out.println(\"person 对象为\" + person);\n    \n    ReferenceQueue<Person> queue = new ReferenceQueue<>();\n    PhantomReference<Person> pr = new PhantomReference<>(person, queue);\n    \n    System.out.println(\"pr 对象为\" + pr);\n    System.out.println(\"pr.get() = \" + pr.get());\n    \n    person = null;\n    \n    System.gc();\n    \n    try{\n        // 确保垃圾回收线程执行\n        Thread.sleep(1);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    \n    System.out.println(\"queue item: \" + queue.poll());\n}\n```\n\n**执行结果：**\n\n```\nperson 对象为 com.example.ReferenceTEst$Person@522d9d8c\npr 对象为 java.lang.ref.PhantomReference@60e35b53\npr.get() = null\nin Person finalize\nqueue ite: java.lang.ref.PhantomReference@60e35b53\n```\n\n\n\n**总结：**\n\n​\t与 WeakReference 一样，不改变原有的强引用对象的垃圾回收机制。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可以被垃圾回收。虚引用主要用来跟踪对象被垃圾回收后的活动（监听并才去必要的行动）\n\n\n\n**用途：**\n\n​\t当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。\n\n​\t程序可以通过判断医用队列中是否已经加入虚引用来了解被引用的对象是否将要被垃圾回收。\n\n​\t程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前才去必要的行动。","slug":"Java 各引用之间的区别","published":1,"date":"2019-08-06T10:16:30.000Z","updated":"2019-08-06T10:16:30.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcnczde000c16y95ms53931","content":"<h1 id=\"Java-Reference-SoftReference-WeakReference-PhantomReference-StrongReference-的使用\"><a href=\"#Java-Reference-SoftReference-WeakReference-PhantomReference-StrongReference-的使用\" class=\"headerlink\" title=\"Java Reference(SoftReference, WeakReference, PhantomReference, StrongReference) 的使用\"></a>Java Reference(SoftReference, WeakReference, PhantomReference, StrongReference) 的使用</h1><h2 id=\"Reference-引用\"><a href=\"#Reference-引用\" class=\"headerlink\" title=\"Reference 引用\"></a>Reference 引用</h2><p>继承自 Object， 有 SoftReference, WeakReference, PhantomReference 三个直接子类。</p>\n<p>三个子类的构造方法中涉及到 ReferenceQueue 和 Referent：</p>\n<ul>\n<li>Referent： 被引用对象</li>\n<li>ReferenceQueue：当引用（软引用、弱引用、虚引用）的 Referent 被回收后，该引用（软引用、弱引用、虚引用）会被 enqueue 到这个 ReferenceQueue 中。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReferenceTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>　</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.finalize();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"in Person finalize\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"StrongReference-强引用\"><a href=\"#StrongReference-强引用\" class=\"headerlink\" title=\"StrongReference 强引用\"></a>StrongReference 强引用</h2><p>Java 中使用的最多，普通的引用 <code>Object obj = new Object();  Person p = new Person();</code> 都属于<code>强引用</code> </p>\n<p>强引用本身存储在栈中，new 出来的对象存储在堆中。栈中保存的引用指向堆中对象的地址。</p>\n<p>一般情况下，当引用不在指向堆中对象的地址时（person = null） GC collector 就开始考虑对此内存（堆中的对象）进行回收。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p = <span class=\"keyword\">new</span> Person();</span><br></pre></td></tr></table></figure>\n<p>person 就是一个强引用，强引用不会被 GC，即使内存不够抛出 OOM 时也不会被回收。</p>\n<h2 id=\"SoftReference-软引用\"><a href=\"#SoftReference-软引用\" class=\"headerlink\" title=\"SoftReference 软引用\"></a>SoftReference 软引用</h2><p>软引用普通使用形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">SoftReference&lt;Person&gt; sr = <span class=\"keyword\">new</span> SoftReference&lt;Person&gt;(person);</span><br></pre></td></tr></table></figure>\n<p>强引用 person 作为参数，创建了一个软引用对象 sr, 下面是例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testSofeReference</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建强引用对象</span></span><br><span class=\"line\">    Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"person 对象为\"</span> + person);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建软引用对象</span></span><br><span class=\"line\">    SoftReference&lt;Person&gt; sr = <span class=\"keyword\">new</span> SoftReference&lt;Person&gt;(person);</span><br><span class=\"line\">    person = <span class=\"keyword\">null</span>; <span class=\"comment\">// 之前 new 出的 Person 对象不会立即被回收，除非 JVM 需要内存(OOM 之前)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sr.get() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + sr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.gc();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sr.get() == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + sr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行上面的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person 对象为 com.example.ReferenceTest$Person@522d9d8c</span><br><span class=\"line\">person 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c</span><br><span class=\"line\">person 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当执行 person = null 后，堆内存的 Person 对象不再有任何强引用指向它，但此时还存在 sr 引用的对象指向 Person 对象。此时调用 sr.get() 方法，返回 Person 对象，即之前堆中的强引用对象了。我们可以合理猜测GC collector 很有可能尚未进行垃圾回收，所以此时 sr.get() 方法返回不为空。</li>\n<li>我们继续执行 <code>System.gc()</code> 强制进行垃圾回收，打印结果可以看到， sr.get() 返回依然不为空，说明 Person 对象依旧没有被回收。</li>\n</ul>\n<p><strong>软引用所指向的对象要进行回收，需要满足两个条件：</strong></p>\n<ol>\n<li>没有任何强引用指向软引用指向的对象（内存中的 Person 对象）</li>\n<li>JVM 需要内存时，即在抛出 OOM 之前</li>\n</ol>\n<p><strong>总结：</strong> SoftReference 变相延长了其只是对象占据堆内存的时间，直到虚拟机内存不足时垃圾回收才回收此堆内存空间。</p>\n<p><strong>软引用还可以和一个 ReferenceQueue 一起使用，</strong> 当 SoftReference 的 Referent 被回收以后，这个 SoftReference 会被自动 enqueue 到这个 ReferenctQueue 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testSoftReferenceWithQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"person 对象为：\"</span> + person);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ReferenceQueue&lt;Person&gt; queue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">    SoftReference&lt;Person&gt; sr = <span class=\"keyword\">new</span> SoftReference&lt;&gt;(person, queue);</span><br><span class=\"line\">    </span><br><span class=\"line\">    person = <span class=\"keyword\">null</span>; <span class=\"comment\">// 之前 new 出的 Person 对象不会立即被回收，除非 JVM 需要内存 （OOM 前）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sr.get() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + sr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"加入 ReferenceQueue 的对象为：\"</span> + queue.poll());</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.gc();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sr.get() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + sr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"加入 ReferenceQueue 的对象为： \"</span> + queue.poll());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行上述例子，结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person 对象为 com.example.ReferenceTest$Person@522d9d8c</span><br><span class=\"line\">person 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c</span><br><span class=\"line\">加入 ReferenceQueue 的对象为 null</span><br><span class=\"line\">person 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c</span><br><span class=\"line\">加入 ReferenceQueue 的对象为 null</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 当 SoftReference 或 WeakReference 的 get() 方法返回 null 时，仅表明其指示的对象已经进入垃圾回收流程，此时对象不一定已经被垃圾回收。</p>\n<p>而只有确认被垃圾回收后，如果有 ReferenceQueue ，其引用才会被放置于 ReferenceQueue 中。</p>\n<h2 id=\"WeakReference-弱引用\"><a href=\"#WeakReference-弱引用\" class=\"headerlink\" title=\"WeakReference 弱引用\"></a>WeakReference 弱引用</h2><p>弱引用的一般使用形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testWeakReference</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"person 对象为： \"</span> + person);</span><br><span class=\"line\">    </span><br><span class=\"line\">    WeakReference&lt;Person&gt; wr = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(person);</span><br><span class=\"line\">    person = <span class=\"keyword\">null</span>; <span class=\"comment\">// 被 GC 后，之前 new 出的 Person 对象会立即被回收，进入 GC 流程。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wr.get() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + wr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.gc();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wr.get() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + wr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person 对象为 com.example.ReferenceTest$Person@522d9d8c</span><br><span class=\"line\">person 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c</span><br><span class=\"line\">person 对象进入 GC 流程</span><br><span class=\"line\">in Person finalize</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>当执行 <code>person = null</code> 后，堆内存的  Person 对象不再有任何引用指向它，但此时还存在 wr 引用的对象指向 Person 对象。</p>\n<p>此时调用 <code>wr.get()</code> 方法，返回 Person 对象，即之前堆中的强引用对象，我们可以合理猜测 GC collector 很有可能尚未进行垃圾回收，所以此时 <code>wr.get()</code> 方法返回不为空。</p>\n</li>\n<li><p>继续执行 <code>System.gc()</code> 强制执行垃圾回收，打印结果可以看到，<code>wr.get()</code> 返回为空 “person 对象进入 GC 流程” ，且执行了静态内部类中的 finalize 方法。说明 Person 对象被回收，进入垃圾回收流程。</p>\n</li>\n</ul>\n<p><strong>弱引用所指向的对象要进行回收，只需要满足条件：</strong></p>\n<p>​    没有任何强引用指向弱引用指向的对象（内存中的 Person 对象）</p>\n<p><strong>总结：</strong></p>\n<p>​    WeakReference 不改变原有的强引用独享的垃圾回收机制，一旦其指示对象没有任何强引用对象时，此对象即进入正常的垃圾回收流程。</p>\n<p><strong>其主要使用场景见于：</strong> </p>\n<p>​    当前已有强引用指向强引用对象，此时由于业务需要，需要增加对此对象的引用，同时又不希望改变此引用的垃圾回收机制，此时 <code>WeakReference</code> 正好符合需求，常见于一些与生命周期的场景中，比如 Activity 中的 Handler 的使用，为了防止内存泄露需要用到弱引用。</p>\n<p>与 SoftReference 一样，可以同 ReferenceQueue 一起使用。当 WeakReference 的 Referent 被回收以后，这个 WeakReference 会被自动 enqueue 到这个 ReferenceQueue 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testWeakReferenceWithQueue</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"person 对象为 \"</span> + person);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ReferenceQueue&lt;Person&gt; queue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">    WeakReference&lt;Person&gt; wr = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(person, queue);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"wr 对象为 \"</span> + wr);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wr.get() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + wr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Whether or not this reference has been enqueued:\"</span> + wr.isEnqueued());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Queue item: \"</span> + queue.pull());</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.gc();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wr.get() == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">// 仅是表名指示的对象已经进入垃圾回收流程，此时对象不一定已经被垃圾回收，只有确认被垃圾回收后，如果有 ReferenceQueue ，其引用才会被放置于 ReferenceQueue 中。</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + wr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 确保垃圾回收线程能够执行</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Whether or not this reference has been enqueued: \"</span> + wr.isEnqueued());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"queue item: \"</span> + queue.poll());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>执行结果：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person 对象为 com.example.ReferenceTEst$Person@522d9d8c</span><br><span class=\"line\">wr 对象为 java.lang.ref.WeakReference@603828d2</span><br><span class=\"line\">person 对象尚未被回收 com.example.ReferenceTEst$Person@522d9d8c</span><br><span class=\"line\">Whether or not this reference has been enqueued: false</span><br><span class=\"line\">queue item: null</span><br><span class=\"line\">person 对象进入回收流程</span><br><span class=\"line\">in Person finalize</span><br><span class=\"line\">Whether or not this reference has been enqueued: true</span><br><span class=\"line\">queue item: java.lang.ref.WeakReference@603828d2</span><br></pre></td></tr></table></figure>\n<p>从第二行到最后行可以看出， person 进入 GC 流程后，wr 被加入到 queue 中。</p>\n<p><strong>注意：</strong></p>\n<p>​     当 SoftReference 或者 WeakReference 的 get() 方法返回 null 时，仅表示其指示对象已经进入垃圾回收流程，此时对象不一定已经被垃圾回收。</p>\n<p>​    而只有确认被垃圾回收后，如果有 ReferenceQueue， 其引用才会被放置于 ReferenceQueue 中。</p>\n<h2 id=\"PhantomReference-虚引用\"><a href=\"#PhantomReference-虚引用\" class=\"headerlink\" title=\"PhantomReference 虚引用\"></a>PhantomReference 虚引用</h2><p>虚引用源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.lang.ref;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.ref.Reference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.ref.ReferenceQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhantomReference</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Reference</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PhantomReference</span><span class=\"params\">(T var1, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; var2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.(var1, var2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>PhantomReference 只有一个构造函数 <code>PhantomReference(T referenct, ReferenceQueue&lt;? super T&gt; q)</code>  因此，PhantomReference 使用必须结合 ReferenceQueue；</li>\n<li>不管有无强引用指向 PhantomReference 的指示对象， PhantomReference 的 get() 方法返回结果都是 null</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testPhantomReference</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"person 对象为\"</span> + person);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ReferenceQueue&lt;Person&gt; queue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">    PhantomReference&lt;Person&gt; pr = <span class=\"keyword\">new</span> PhantomReference&lt;&gt;(person, queue);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"pr 对象为\"</span> + pr);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"pr.get() = \"</span> + pr.get());</span><br><span class=\"line\">    </span><br><span class=\"line\">    person = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.gc();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 确保垃圾回收线程执行</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"queue item: \"</span> + queue.poll());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>执行结果：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person 对象为 com.example.ReferenceTEst$Person@522d9d8c</span><br><span class=\"line\">pr 对象为 java.lang.ref.PhantomReference@60e35b53</span><br><span class=\"line\">pr.get() = null</span><br><span class=\"line\">in Person finalize</span><br><span class=\"line\">queue ite: java.lang.ref.PhantomReference@60e35b53</span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong></p>\n<p>​    与 WeakReference 一样，不改变原有的强引用对象的垃圾回收机制。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可以被垃圾回收。虚引用主要用来跟踪对象被垃圾回收后的活动（监听并才去必要的行动）</p>\n<p><strong>用途：</strong></p>\n<p>​    当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p>\n<p>​    程序可以通过判断医用队列中是否已经加入虚引用来了解被引用的对象是否将要被垃圾回收。</p>\n<p>​    程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前才去必要的行动。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java-Reference-SoftReference-WeakReference-PhantomReference-StrongReference-的使用\"><a href=\"#Java-Reference-SoftReference-WeakReference-PhantomReference-StrongReference-的使用\" class=\"headerlink\" title=\"Java Reference(SoftReference, WeakReference, PhantomReference, StrongReference) 的使用\"></a>Java Reference(SoftReference, WeakReference, PhantomReference, StrongReference) 的使用</h1><h2 id=\"Reference-引用\"><a href=\"#Reference-引用\" class=\"headerlink\" title=\"Reference 引用\"></a>Reference 引用</h2><p>继承自 Object， 有 SoftReference, WeakReference, PhantomReference 三个直接子类。</p>\n<p>三个子类的构造方法中涉及到 ReferenceQueue 和 Referent：</p>\n<ul>\n<li>Referent： 被引用对象</li>\n<li>ReferenceQueue：当引用（软引用、弱引用、虚引用）的 Referent 被回收后，该引用（软引用、弱引用、虚引用）会被 enqueue 到这个 ReferenceQueue 中。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReferenceTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>　</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.finalize();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"in Person finalize\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"StrongReference-强引用\"><a href=\"#StrongReference-强引用\" class=\"headerlink\" title=\"StrongReference 强引用\"></a>StrongReference 强引用</h2><p>Java 中使用的最多，普通的引用 <code>Object obj = new Object();  Person p = new Person();</code> 都属于<code>强引用</code> </p>\n<p>强引用本身存储在栈中，new 出来的对象存储在堆中。栈中保存的引用指向堆中对象的地址。</p>\n<p>一般情况下，当引用不在指向堆中对象的地址时（person = null） GC collector 就开始考虑对此内存（堆中的对象）进行回收。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p = <span class=\"keyword\">new</span> Person();</span><br></pre></td></tr></table></figure>\n<p>person 就是一个强引用，强引用不会被 GC，即使内存不够抛出 OOM 时也不会被回收。</p>\n<h2 id=\"SoftReference-软引用\"><a href=\"#SoftReference-软引用\" class=\"headerlink\" title=\"SoftReference 软引用\"></a>SoftReference 软引用</h2><p>软引用普通使用形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">SoftReference&lt;Person&gt; sr = <span class=\"keyword\">new</span> SoftReference&lt;Person&gt;(person);</span><br></pre></td></tr></table></figure>\n<p>强引用 person 作为参数，创建了一个软引用对象 sr, 下面是例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testSofeReference</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建强引用对象</span></span><br><span class=\"line\">    Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"person 对象为\"</span> + person);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建软引用对象</span></span><br><span class=\"line\">    SoftReference&lt;Person&gt; sr = <span class=\"keyword\">new</span> SoftReference&lt;Person&gt;(person);</span><br><span class=\"line\">    person = <span class=\"keyword\">null</span>; <span class=\"comment\">// 之前 new 出的 Person 对象不会立即被回收，除非 JVM 需要内存(OOM 之前)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sr.get() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + sr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.gc();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sr.get() == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + sr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行上面的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person 对象为 com.example.ReferenceTest$Person@522d9d8c</span><br><span class=\"line\">person 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c</span><br><span class=\"line\">person 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当执行 person = null 后，堆内存的 Person 对象不再有任何强引用指向它，但此时还存在 sr 引用的对象指向 Person 对象。此时调用 sr.get() 方法，返回 Person 对象，即之前堆中的强引用对象了。我们可以合理猜测GC collector 很有可能尚未进行垃圾回收，所以此时 sr.get() 方法返回不为空。</li>\n<li>我们继续执行 <code>System.gc()</code> 强制进行垃圾回收，打印结果可以看到， sr.get() 返回依然不为空，说明 Person 对象依旧没有被回收。</li>\n</ul>\n<p><strong>软引用所指向的对象要进行回收，需要满足两个条件：</strong></p>\n<ol>\n<li>没有任何强引用指向软引用指向的对象（内存中的 Person 对象）</li>\n<li>JVM 需要内存时，即在抛出 OOM 之前</li>\n</ol>\n<p><strong>总结：</strong> SoftReference 变相延长了其只是对象占据堆内存的时间，直到虚拟机内存不足时垃圾回收才回收此堆内存空间。</p>\n<p><strong>软引用还可以和一个 ReferenceQueue 一起使用，</strong> 当 SoftReference 的 Referent 被回收以后，这个 SoftReference 会被自动 enqueue 到这个 ReferenctQueue 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testSoftReferenceWithQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"person 对象为：\"</span> + person);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ReferenceQueue&lt;Person&gt; queue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">    SoftReference&lt;Person&gt; sr = <span class=\"keyword\">new</span> SoftReference&lt;&gt;(person, queue);</span><br><span class=\"line\">    </span><br><span class=\"line\">    person = <span class=\"keyword\">null</span>; <span class=\"comment\">// 之前 new 出的 Person 对象不会立即被回收，除非 JVM 需要内存 （OOM 前）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sr.get() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + sr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"加入 ReferenceQueue 的对象为：\"</span> + queue.poll());</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.gc();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sr.get() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + sr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"加入 ReferenceQueue 的对象为： \"</span> + queue.poll());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行上述例子，结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person 对象为 com.example.ReferenceTest$Person@522d9d8c</span><br><span class=\"line\">person 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c</span><br><span class=\"line\">加入 ReferenceQueue 的对象为 null</span><br><span class=\"line\">person 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c</span><br><span class=\"line\">加入 ReferenceQueue 的对象为 null</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 当 SoftReference 或 WeakReference 的 get() 方法返回 null 时，仅表明其指示的对象已经进入垃圾回收流程，此时对象不一定已经被垃圾回收。</p>\n<p>而只有确认被垃圾回收后，如果有 ReferenceQueue ，其引用才会被放置于 ReferenceQueue 中。</p>\n<h2 id=\"WeakReference-弱引用\"><a href=\"#WeakReference-弱引用\" class=\"headerlink\" title=\"WeakReference 弱引用\"></a>WeakReference 弱引用</h2><p>弱引用的一般使用形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testWeakReference</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"person 对象为： \"</span> + person);</span><br><span class=\"line\">    </span><br><span class=\"line\">    WeakReference&lt;Person&gt; wr = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(person);</span><br><span class=\"line\">    person = <span class=\"keyword\">null</span>; <span class=\"comment\">// 被 GC 后，之前 new 出的 Person 对象会立即被回收，进入 GC 流程。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wr.get() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + wr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.gc();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wr.get() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + wr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person 对象为 com.example.ReferenceTest$Person@522d9d8c</span><br><span class=\"line\">person 对象尚未被回收 com.example.ReferenceTest$Person@522d9d8c</span><br><span class=\"line\">person 对象进入 GC 流程</span><br><span class=\"line\">in Person finalize</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>当执行 <code>person = null</code> 后，堆内存的  Person 对象不再有任何引用指向它，但此时还存在 wr 引用的对象指向 Person 对象。</p>\n<p>此时调用 <code>wr.get()</code> 方法，返回 Person 对象，即之前堆中的强引用对象，我们可以合理猜测 GC collector 很有可能尚未进行垃圾回收，所以此时 <code>wr.get()</code> 方法返回不为空。</p>\n</li>\n<li><p>继续执行 <code>System.gc()</code> 强制执行垃圾回收，打印结果可以看到，<code>wr.get()</code> 返回为空 “person 对象进入 GC 流程” ，且执行了静态内部类中的 finalize 方法。说明 Person 对象被回收，进入垃圾回收流程。</p>\n</li>\n</ul>\n<p><strong>弱引用所指向的对象要进行回收，只需要满足条件：</strong></p>\n<p>​    没有任何强引用指向弱引用指向的对象（内存中的 Person 对象）</p>\n<p><strong>总结：</strong></p>\n<p>​    WeakReference 不改变原有的强引用独享的垃圾回收机制，一旦其指示对象没有任何强引用对象时，此对象即进入正常的垃圾回收流程。</p>\n<p><strong>其主要使用场景见于：</strong> </p>\n<p>​    当前已有强引用指向强引用对象，此时由于业务需要，需要增加对此对象的引用，同时又不希望改变此引用的垃圾回收机制，此时 <code>WeakReference</code> 正好符合需求，常见于一些与生命周期的场景中，比如 Activity 中的 Handler 的使用，为了防止内存泄露需要用到弱引用。</p>\n<p>与 SoftReference 一样，可以同 ReferenceQueue 一起使用。当 WeakReference 的 Referent 被回收以后，这个 WeakReference 会被自动 enqueue 到这个 ReferenceQueue 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testWeakReferenceWithQueue</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"person 对象为 \"</span> + person);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ReferenceQueue&lt;Person&gt; queue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">    WeakReference&lt;Person&gt; wr = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(person, queue);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"wr 对象为 \"</span> + wr);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wr.get() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + wr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Whether or not this reference has been enqueued:\"</span> + wr.isEnqueued());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Queue item: \"</span> + queue.pull());</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.gc();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wr.get() == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">// 仅是表名指示的对象已经进入垃圾回收流程，此时对象不一定已经被垃圾回收，只有确认被垃圾回收后，如果有 ReferenceQueue ，其引用才会被放置于 ReferenceQueue 中。</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象进入 GC 流程\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"person 对象尚未被回收\"</span> + wr.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 确保垃圾回收线程能够执行</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Whether or not this reference has been enqueued: \"</span> + wr.isEnqueued());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"queue item: \"</span> + queue.poll());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>执行结果：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person 对象为 com.example.ReferenceTEst$Person@522d9d8c</span><br><span class=\"line\">wr 对象为 java.lang.ref.WeakReference@603828d2</span><br><span class=\"line\">person 对象尚未被回收 com.example.ReferenceTEst$Person@522d9d8c</span><br><span class=\"line\">Whether or not this reference has been enqueued: false</span><br><span class=\"line\">queue item: null</span><br><span class=\"line\">person 对象进入回收流程</span><br><span class=\"line\">in Person finalize</span><br><span class=\"line\">Whether or not this reference has been enqueued: true</span><br><span class=\"line\">queue item: java.lang.ref.WeakReference@603828d2</span><br></pre></td></tr></table></figure>\n<p>从第二行到最后行可以看出， person 进入 GC 流程后，wr 被加入到 queue 中。</p>\n<p><strong>注意：</strong></p>\n<p>​     当 SoftReference 或者 WeakReference 的 get() 方法返回 null 时，仅表示其指示对象已经进入垃圾回收流程，此时对象不一定已经被垃圾回收。</p>\n<p>​    而只有确认被垃圾回收后，如果有 ReferenceQueue， 其引用才会被放置于 ReferenceQueue 中。</p>\n<h2 id=\"PhantomReference-虚引用\"><a href=\"#PhantomReference-虚引用\" class=\"headerlink\" title=\"PhantomReference 虚引用\"></a>PhantomReference 虚引用</h2><p>虚引用源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.lang.ref;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.ref.Reference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.ref.ReferenceQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhantomReference</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Reference</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PhantomReference</span><span class=\"params\">(T var1, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; var2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.(var1, var2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>PhantomReference 只有一个构造函数 <code>PhantomReference(T referenct, ReferenceQueue&lt;? super T&gt; q)</code>  因此，PhantomReference 使用必须结合 ReferenceQueue；</li>\n<li>不管有无强引用指向 PhantomReference 的指示对象， PhantomReference 的 get() 方法返回结果都是 null</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testPhantomReference</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"person 对象为\"</span> + person);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ReferenceQueue&lt;Person&gt; queue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">    PhantomReference&lt;Person&gt; pr = <span class=\"keyword\">new</span> PhantomReference&lt;&gt;(person, queue);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"pr 对象为\"</span> + pr);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"pr.get() = \"</span> + pr.get());</span><br><span class=\"line\">    </span><br><span class=\"line\">    person = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.gc();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 确保垃圾回收线程执行</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"queue item: \"</span> + queue.poll());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>执行结果：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person 对象为 com.example.ReferenceTEst$Person@522d9d8c</span><br><span class=\"line\">pr 对象为 java.lang.ref.PhantomReference@60e35b53</span><br><span class=\"line\">pr.get() = null</span><br><span class=\"line\">in Person finalize</span><br><span class=\"line\">queue ite: java.lang.ref.PhantomReference@60e35b53</span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong></p>\n<p>​    与 WeakReference 一样，不改变原有的强引用对象的垃圾回收机制。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可以被垃圾回收。虚引用主要用来跟踪对象被垃圾回收后的活动（监听并才去必要的行动）</p>\n<p><strong>用途：</strong></p>\n<p>​    当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p>\n<p>​    程序可以通过判断医用队列中是否已经加入虚引用来了解被引用的对象是否将要被垃圾回收。</p>\n<p>​    程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前才去必要的行动。</p>\n"},{"title":"Java 判断字符串是否是数字的方法","date":"2019-04-16T09:47:06.000Z","_content":"\n* 使用 Java自带的函数\n\n```\npublic static boolean isNumeric (String str) {\n    for (int i = str.length(); --i >=0) {\n          if (!Character.isDigit(str.charAt(i))) {\n                return false;\n          }\n    }\n    return true;\n}\n```\n\n<!--more-->\n\n* 使用正则表达式\n\n方法一:\n\n```\npublic static boolean isNumeric(String str) {\n    Pattern pattern = Pattern.compile(\"^[-\\\\+]?[\\\\d]*$\");\n    return pattern.matcher(str).matches();\n}\n```\n\n方法二:\n\n```\npublic static boolean isNumeric(String str) {\n    if (str != null && !\"\".equals(str.trim())) {\n          return s.matches(\"^[0-9]*$\");\n    }\n    return false;\n}\n```\n\n方法三:\n\n```\n public static boolean isNumeric (String str) {\n    Pattern pattern = Pattern.compile(\"[0-9]*\");\n    return pattern.matcher(str).matcher();\n}\n```\n\n* 使用 ASCII 码\n\n```\npublic static boolean isNumeric (String str) {\n    for (int i = str.length(); --i>=0;) {\n        int chr = str.charAt(i);\n        if (chr < 48 || chr > 57) {\n            return false;\n        }\n   }\n   return true;\n}\n```\n\n* 判断是不是浮点型数据\n\n```\npublic static boolean isDouble(String str) {\n    Pattern pattern = Pattern.compile(\"^[-\\\\+]?[.\\\\d]*$\");\n    return pattern.matcher(str).matches();\n}\n```\n\n","source":"_posts/Java-判断字符串是否是数字的方法.md","raw":"---\ntitle: Java 判断字符串是否是数字的方法\ndate: 2019-04-16 17:47:06\ntags: Java\n---\n\n* 使用 Java自带的函数\n\n```\npublic static boolean isNumeric (String str) {\n    for (int i = str.length(); --i >=0) {\n          if (!Character.isDigit(str.charAt(i))) {\n                return false;\n          }\n    }\n    return true;\n}\n```\n\n<!--more-->\n\n* 使用正则表达式\n\n方法一:\n\n```\npublic static boolean isNumeric(String str) {\n    Pattern pattern = Pattern.compile(\"^[-\\\\+]?[\\\\d]*$\");\n    return pattern.matcher(str).matches();\n}\n```\n\n方法二:\n\n```\npublic static boolean isNumeric(String str) {\n    if (str != null && !\"\".equals(str.trim())) {\n          return s.matches(\"^[0-9]*$\");\n    }\n    return false;\n}\n```\n\n方法三:\n\n```\n public static boolean isNumeric (String str) {\n    Pattern pattern = Pattern.compile(\"[0-9]*\");\n    return pattern.matcher(str).matcher();\n}\n```\n\n* 使用 ASCII 码\n\n```\npublic static boolean isNumeric (String str) {\n    for (int i = str.length(); --i>=0;) {\n        int chr = str.charAt(i);\n        if (chr < 48 || chr > 57) {\n            return false;\n        }\n   }\n   return true;\n}\n```\n\n* 判断是不是浮点型数据\n\n```\npublic static boolean isDouble(String str) {\n    Pattern pattern = Pattern.compile(\"^[-\\\\+]?[.\\\\d]*$\");\n    return pattern.matcher(str).matches();\n}\n```\n\n","slug":"Java-判断字符串是否是数字的方法","published":1,"updated":"2019-04-17T13:55:55.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcnczdr000e16y9udzrdgx5","content":"<ul>\n<li>使用 Java自带的函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static boolean isNumeric (String str) &#123;</span><br><span class=\"line\">    for (int i = str.length(); --i &gt;=0) &#123;</span><br><span class=\"line\">          if (!Character.isDigit(str.charAt(i))) &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>使用正则表达式</li>\n</ul>\n<p>方法一:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static boolean isNumeric(String str) &#123;</span><br><span class=\"line\">    Pattern pattern = Pattern.compile(&quot;^[-\\\\+]?[\\\\d]*$&quot;);</span><br><span class=\"line\">    return pattern.matcher(str).matches();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法二:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static boolean isNumeric(String str) &#123;</span><br><span class=\"line\">    if (str != null &amp;&amp; !&quot;&quot;.equals(str.trim())) &#123;</span><br><span class=\"line\">          return s.matches(&quot;^[0-9]*$&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法三:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public static boolean isNumeric (String str) &#123;</span><br><span class=\"line\">    Pattern pattern = Pattern.compile(&quot;[0-9]*&quot;);</span><br><span class=\"line\">    return pattern.matcher(str).matcher();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 ASCII 码</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static boolean isNumeric (String str) &#123;</span><br><span class=\"line\">    for (int i = str.length(); --i&gt;=0;) &#123;</span><br><span class=\"line\">        int chr = str.charAt(i);</span><br><span class=\"line\">        if (chr &lt; 48 || chr &gt; 57) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>判断是不是浮点型数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static boolean isDouble(String str) &#123;</span><br><span class=\"line\">    Pattern pattern = Pattern.compile(&quot;^[-\\\\+]?[.\\\\d]*$&quot;);</span><br><span class=\"line\">    return pattern.matcher(str).matches();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<ul>\n<li>使用 Java自带的函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static boolean isNumeric (String str) &#123;</span><br><span class=\"line\">    for (int i = str.length(); --i &gt;=0) &#123;</span><br><span class=\"line\">          if (!Character.isDigit(str.charAt(i))) &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>使用正则表达式</li>\n</ul>\n<p>方法一:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static boolean isNumeric(String str) &#123;</span><br><span class=\"line\">    Pattern pattern = Pattern.compile(&quot;^[-\\\\+]?[\\\\d]*$&quot;);</span><br><span class=\"line\">    return pattern.matcher(str).matches();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法二:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static boolean isNumeric(String str) &#123;</span><br><span class=\"line\">    if (str != null &amp;&amp; !&quot;&quot;.equals(str.trim())) &#123;</span><br><span class=\"line\">          return s.matches(&quot;^[0-9]*$&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法三:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public static boolean isNumeric (String str) &#123;</span><br><span class=\"line\">    Pattern pattern = Pattern.compile(&quot;[0-9]*&quot;);</span><br><span class=\"line\">    return pattern.matcher(str).matcher();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 ASCII 码</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static boolean isNumeric (String str) &#123;</span><br><span class=\"line\">    for (int i = str.length(); --i&gt;=0;) &#123;</span><br><span class=\"line\">        int chr = str.charAt(i);</span><br><span class=\"line\">        if (chr &lt; 48 || chr &gt; 57) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>判断是不是浮点型数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static boolean isDouble(String str) &#123;</span><br><span class=\"line\">    Pattern pattern = Pattern.compile(&quot;^[-\\\\+]?[.\\\\d]*$&quot;);</span><br><span class=\"line\">    return pattern.matcher(str).matches();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Jenkins + gradle + git 构建 Android CI 构建环境","date":"2019-04-16T09:42:05.000Z","_content":"\n# 前言\n\n在项目开发中，我们需要将最新的代码更新，提供给测试人员进行测试，以及发布。\n\n目前 Android 工作中都在使用很强大的开发、构建以及打包工具，例如： android-studio、Gradle、Git等。\n\n然，在企业组织并不是很完善的公司里，开发打包发布等工作，时常会由开发人员进行操作，难免在一些地方疏忽掉。\n\n因此，CI 构建的出现，使得这些繁琐的工作变得轻松起来。\n\n对于开发工程师，只负责向版本库提交代码，不用关心打包，发布之类的流程。\n\n对于产品和测试，只需要从发布页面下载 APK 安装文件，不需要每一次都去工程师哪里索取最新的安装文件。\n\nCI 的基本工作流程如下：\n![图1](http://upload-images.jianshu.io/upload_images/1550996-5101eac8d87352a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我们每一次提交代码（通过git/svn作为版本库）到主干上，根据 CI 的定时任务，检测到版本更新，通过 CI ，将进行打包发布等流程操作。\n\n<!--more-->\n# 准备工作\n\n本文使用 Linux Ubuntu 系统为大家介绍环境的搭建\n\n## 环境工具\n    1. PC 机(mac/linux)\n    2. Java JDK\n    3. Android SDK\n    4. Gradle\n    5. Git\n    6. Tomcat\n    7. Jenkins\n\n## 环境搭建\n\n###  Java 环境 安装\nJava JDK, Android SDK, Gradle 可从[AndroidDevTools](http://androiddevtools.cn)处下载获取。\n\n### git 安装\ngit 可通过终端进行安装\n```\nsudo add-apt-repository ppa:git-core/ppa\nsudo apt-get update\nsudo apt-get install git\n```\n\n安装完成之后通过`git --version` 检查是否成功\n\n安装后 git 存储在 `/usr/bin/git`下\n\n### Jenkins \n\n通过 Jenkins [官方网站](https://jenkins.io/index.html)下载最新Jenkins.war包\n\n![Jenkins 下载](http://upload-images.jianshu.io/upload_images/1550996-d2654c0a1383423a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 环境变量\n\n打开 `vi /etc/profile`\n\n将下列语句添加在文件的末尾后， 执行 esc->:wq\n\n其中环境位置根据自己的所在位置进行相应的更改\n\n![环境变量](http://upload-images.jianshu.io/upload_images/1550996-ffd5f1b87d0e5bbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 启动\n\n激动的你，是不是已经被这些繁琐的东西搞的不耐烦了呢，下面我们开始启动 Jenkins\n\n将下载好的 Jenkins.war 包， 放入 Tomcat 的 webapps 目录下，进入 bin 目录执行 ./startup.sh 启动 Tomcat。\n\n启动后，在浏览器中输入： `localhost:8080/jenkins`\n\n\n![jenkinsmain.png](http://upload-images.jianshu.io/upload_images/1550996-cbdb39d4f2f4a85f.png?\nimageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 插件安装\n\n系统管理-> 插件管理->可选插件：\n\n在搜索框中搜索以下插件，并进行安装\n\ngit plugin\ngitlab plugin\ngrade plugin\nAndroid Lint Plugin\nBuild Pipeline plugin\nbuild timeout plugin\nbuild name plugin\nchange assembly-version plugin\ncredentials binding plugin\ndescription setter plugin\nDynamic parameter plugin\nEmail Extension plugin\nFindBugs plugin\nJaCoco plugin\nUnit attachments plugin\nProject Description plugin\nTimestamper\nWorkspace cleanup plugin\n\n安装完成后，重启。\n\n### 系统设置\n\n系统管理->系统设置：\n\n配置Android 环境，将地址指向本机的 SDK 目录\n![Android environment](http://upload-images.jianshu.io/upload_images/1550996-5987aabcffb290c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n系统管理->全局工具配置\n\n配置 Java， Git ， Gradle 目录等\n\nJDK：\n\n![Java JDK](http://upload-images.jianshu.io/upload_images/1550996-b9e29a1ec2b746e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nGit：\n\n![git](http://upload-images.jianshu.io/upload_images/1550996-9c4e88d64fcc2ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nGradle：\n\n\n![gradle](http://upload-images.jianshu.io/upload_images/1550996-9fbabc7d5c7ca319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n到此，环境配置，已基本完成。\n\n下面我们开始进行项目够将操作\n\n## 项目构建\n\n### 创建Job\n\n新建->构建一个自由风格的软件项目:\n\n![创建CI工程](http://upload-images.jianshu.io/upload_images/1550996-2390d86256678c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 参数化构建\n\n通常我们在使用 Android-studio 进行打包时以及签名时，都会用到build.gradle并在其中配置相关属性。再此，我们可以用Jenkins，配置我们的项目参数，例如发布的版本号，构建时间， 上传路径，发布地址，签名打包等等。\n\n在这里我们先看看 build.gradle 中的构建信息:\n\n在项目的 moudle 下 build.gradle 文件\n```\ndef getDate () {\n    def date = new Date()\n    def formattedDate = date.format(\"yyyyMMddHHmm\")\n    return formattedDate\n}\n\ndef verName = APP_VERSION\ndef verCode = 14\n\nandroid {\n    ....\n    signingConfigs {\n        release {\n          keyAlias ''\n          keyPassword ''\n          storeFile file ('')\n          storePassword ''\n       }   \n   }\n\n  defaultConfig {\n      applicationId \"cn.zhuangbudong.example\"\n      minSdkVersion 18\n      targetSdkVersion 25\n      multiDexEnabled true\n      versionCode verCode\n      versionName verName\n\n      resValues(\"string\", 'app_version', verName)\n  }\n  buildTypes {\n    release {\n      signingConfig signingConfigs.release\n      minifyEnabled false\n      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n    }\n\n   lintOptions {\n    abortOnError false\n   }\n\n   dexOptions {\n      javaMaxHeapSize '2g'\n   }\n\napplicationVariants.all { variant ->\n    variant.outputs.each { output ->\n        def newName\n        def timeNow\n        def oldFile = output.outputFile\n        def outDirectory = oldFile.parent\n        if (\"true\".equals(IS_JENKINS)) { \n            timeNow = JENKINS_TIME\n            outDirectory = \"/media/nexd/work/android/package/release/\"\n            newName = 'zhuangbudong_example_' + verName + \"_\" + timeNow + \"_\" + variant.buildType.name + \".apk\" \n       } else {\n            timeNow = getDate()\n            if (variant.buildType.name.equals('debug')) { \n               newName = 'zhuangbudong_example_' + verName + \"_debug.apk\"  \n          } else { \n               newName = 'zhuangbudong_example_' + verName + \"_\" + timeNow + \"_\" + variant.buildType.name + \".apk\" \n           } \n       } \n       output.outputFile = new File(outDirectory, newName)\n    }}\n\n  }\n}\n```\n\ngradle.properties:\n\n```\nAPP_VERSION=2.0.2\nIS_JENKINS=false\nJENKINS_TIME=''\n```\n\n在工程中添加以上代码，并在Jenkins中为这些参数赋值。\n\n下面介绍 Jenkins 参数配置\n\n勾选参数化构建过程，如下图：\n![参数化构建](http://upload-images.jianshu.io/upload_images/1550996-20f69e63a527814c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n按照下图，添加相关类型的参数，此处注意，Jenkins 配置的参数名要和在android-studio中配置的参数名保持一致\n\n![JENKINS_TIME](http://upload-images.jianshu.io/upload_images/1550996-e0f4ceb7015ac0da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![APP_VERSION](http://upload-images.jianshu.io/upload_images/1550996-6e3f8d0311399d74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![IS_JENKINS](http://upload-images.jianshu.io/upload_images/1550996-673c2465bcdc9a89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![ENVIRONMENT](http://upload-images.jianshu.io/upload_images/1550996-a82221191b980ad7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 源码管理\n\n此处负责从版本库中拉去最新的代码\n\n\n![git 仓库](http://upload-images.jianshu.io/upload_images/1550996-6dcbd8dd2dd9456c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n此处如果需要验证，点击 Add， 选择： Username with password\n\n在对应窗口输入用户名和密码信息\n![用户身份验证](http://upload-images.jianshu.io/upload_images/1550996-8af978712a010864.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点击添加。\n\n使用 gitlab 进行源码库管理。\n\n### 触发器\n\n触发器负责拉取代码，编译，打包，发布等操作。通过触发器，执行Jenkins。\n\n\n![触发器构建](http://upload-images.jianshu.io/upload_images/1550996-beb6ff8faa9843f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 构建环境\n\n此处只是在Jenkins在打包时，配置任务名称即可。如下图：\n\n![构建环境](http://upload-images.jianshu.io/upload_images/1550996-45b210c5df916dbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 构建\n\n这里是最重要滴，配置以下命令，才能进行打包签名等等。\n\n如下配置，这里需要注意下，构建文件，根目录。在你的目录结构比较复杂的时候，即你的根目录没有 build.gradle 文件时，需要指定一下 build.gradle 目录的位置。\n\n同时，也是最重要的，勾选上pass job parameters as gradle properties ，不然之前配置的参数无法传递给项目中的 gradle.properties。\n\n![构建](http://upload-images.jianshu.io/upload_images/1550996-4e4e6e139fc1e856.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 构建后操作\n\n当项目构建完成后，我们可以通过邮件的方式将产生的Apk文件，以及测试报告，构建日志等信息，发送出来 如下图：\n\n\n![邮件发送](http://upload-images.jianshu.io/upload_images/1550996-63b6bcb7b2dfd551.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\n<hr/>\n(本邮件是程序自动下发的，请勿回复！)<br/><hr/>\n项目名称：${PROJECT_NAME}<br/><hr/>\n构建编号：${BUILD_NUMBER}<br/><hr/>\n构建状态：${BUILD_STATUS}<br/><hr/>\n触发原因：${CAUSE}<br/><hr/>\n测试报告：<a href=\"${PROJECT_URL}ws/${PROJECT_NAME}app/build/reports/tests/release/index.html\">${PROJECT_URL}ws/${PROJECT_NAME}app/build/reports/tests/release/index.html</a><br/><hr/>\n构建日志地址：<a href=\"${BUILD_URL}console\">${BUILD_URL}console/</a><br/><hr/>\n构建地址：<a href=\"${PROJECT_URL}\">${PROJECT_URL}</a><br/><hr/>\n构建报告：<a href=\"${BUILD_URL}testReport\">${BUILD_URL}testReport</a><br/><hr/>\n变更集:${JELLY_SCRIPT,template=\"html\"}<br/>\n\n<hr/>\n```\n\n## 开始构建\n\n回到 Jenkins 首页，点击创建的项目，点击 build with parameters:\n\n\n![Build with Parameters](http://upload-images.jianshu.io/upload_images/1550996-58ecc4965ab845ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点击开始构建，启动 Jenkins 构建任务。\n\n构建成功时，显示为蓝色， 失败为红色，如下图：\n\n\n![构建结果](http://upload-images.jianshu.io/upload_images/1550996-4b2fc4b1190ddcd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n构建后生成的 Apk 文件，存在 build.gradle 文件中配置的目录。同时也可以使用蒲公英或fir.im 进行发布管理。\n\n谢谢~\n\n","source":"_posts/Jenkins-gradle-git-构建-Android-CI-构建环境.md","raw":"---\ntitle: Jenkins + gradle + git 构建 Android CI 构建环境\ndate: 2019-04-16 17:42:05\ntags: Android\n---\n\n# 前言\n\n在项目开发中，我们需要将最新的代码更新，提供给测试人员进行测试，以及发布。\n\n目前 Android 工作中都在使用很强大的开发、构建以及打包工具，例如： android-studio、Gradle、Git等。\n\n然，在企业组织并不是很完善的公司里，开发打包发布等工作，时常会由开发人员进行操作，难免在一些地方疏忽掉。\n\n因此，CI 构建的出现，使得这些繁琐的工作变得轻松起来。\n\n对于开发工程师，只负责向版本库提交代码，不用关心打包，发布之类的流程。\n\n对于产品和测试，只需要从发布页面下载 APK 安装文件，不需要每一次都去工程师哪里索取最新的安装文件。\n\nCI 的基本工作流程如下：\n![图1](http://upload-images.jianshu.io/upload_images/1550996-5101eac8d87352a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我们每一次提交代码（通过git/svn作为版本库）到主干上，根据 CI 的定时任务，检测到版本更新，通过 CI ，将进行打包发布等流程操作。\n\n<!--more-->\n# 准备工作\n\n本文使用 Linux Ubuntu 系统为大家介绍环境的搭建\n\n## 环境工具\n    1. PC 机(mac/linux)\n    2. Java JDK\n    3. Android SDK\n    4. Gradle\n    5. Git\n    6. Tomcat\n    7. Jenkins\n\n## 环境搭建\n\n###  Java 环境 安装\nJava JDK, Android SDK, Gradle 可从[AndroidDevTools](http://androiddevtools.cn)处下载获取。\n\n### git 安装\ngit 可通过终端进行安装\n```\nsudo add-apt-repository ppa:git-core/ppa\nsudo apt-get update\nsudo apt-get install git\n```\n\n安装完成之后通过`git --version` 检查是否成功\n\n安装后 git 存储在 `/usr/bin/git`下\n\n### Jenkins \n\n通过 Jenkins [官方网站](https://jenkins.io/index.html)下载最新Jenkins.war包\n\n![Jenkins 下载](http://upload-images.jianshu.io/upload_images/1550996-d2654c0a1383423a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 环境变量\n\n打开 `vi /etc/profile`\n\n将下列语句添加在文件的末尾后， 执行 esc->:wq\n\n其中环境位置根据自己的所在位置进行相应的更改\n\n![环境变量](http://upload-images.jianshu.io/upload_images/1550996-ffd5f1b87d0e5bbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 启动\n\n激动的你，是不是已经被这些繁琐的东西搞的不耐烦了呢，下面我们开始启动 Jenkins\n\n将下载好的 Jenkins.war 包， 放入 Tomcat 的 webapps 目录下，进入 bin 目录执行 ./startup.sh 启动 Tomcat。\n\n启动后，在浏览器中输入： `localhost:8080/jenkins`\n\n\n![jenkinsmain.png](http://upload-images.jianshu.io/upload_images/1550996-cbdb39d4f2f4a85f.png?\nimageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 插件安装\n\n系统管理-> 插件管理->可选插件：\n\n在搜索框中搜索以下插件，并进行安装\n\ngit plugin\ngitlab plugin\ngrade plugin\nAndroid Lint Plugin\nBuild Pipeline plugin\nbuild timeout plugin\nbuild name plugin\nchange assembly-version plugin\ncredentials binding plugin\ndescription setter plugin\nDynamic parameter plugin\nEmail Extension plugin\nFindBugs plugin\nJaCoco plugin\nUnit attachments plugin\nProject Description plugin\nTimestamper\nWorkspace cleanup plugin\n\n安装完成后，重启。\n\n### 系统设置\n\n系统管理->系统设置：\n\n配置Android 环境，将地址指向本机的 SDK 目录\n![Android environment](http://upload-images.jianshu.io/upload_images/1550996-5987aabcffb290c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n系统管理->全局工具配置\n\n配置 Java， Git ， Gradle 目录等\n\nJDK：\n\n![Java JDK](http://upload-images.jianshu.io/upload_images/1550996-b9e29a1ec2b746e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nGit：\n\n![git](http://upload-images.jianshu.io/upload_images/1550996-9c4e88d64fcc2ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nGradle：\n\n\n![gradle](http://upload-images.jianshu.io/upload_images/1550996-9fbabc7d5c7ca319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n到此，环境配置，已基本完成。\n\n下面我们开始进行项目够将操作\n\n## 项目构建\n\n### 创建Job\n\n新建->构建一个自由风格的软件项目:\n\n![创建CI工程](http://upload-images.jianshu.io/upload_images/1550996-2390d86256678c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 参数化构建\n\n通常我们在使用 Android-studio 进行打包时以及签名时，都会用到build.gradle并在其中配置相关属性。再此，我们可以用Jenkins，配置我们的项目参数，例如发布的版本号，构建时间， 上传路径，发布地址，签名打包等等。\n\n在这里我们先看看 build.gradle 中的构建信息:\n\n在项目的 moudle 下 build.gradle 文件\n```\ndef getDate () {\n    def date = new Date()\n    def formattedDate = date.format(\"yyyyMMddHHmm\")\n    return formattedDate\n}\n\ndef verName = APP_VERSION\ndef verCode = 14\n\nandroid {\n    ....\n    signingConfigs {\n        release {\n          keyAlias ''\n          keyPassword ''\n          storeFile file ('')\n          storePassword ''\n       }   \n   }\n\n  defaultConfig {\n      applicationId \"cn.zhuangbudong.example\"\n      minSdkVersion 18\n      targetSdkVersion 25\n      multiDexEnabled true\n      versionCode verCode\n      versionName verName\n\n      resValues(\"string\", 'app_version', verName)\n  }\n  buildTypes {\n    release {\n      signingConfig signingConfigs.release\n      minifyEnabled false\n      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n    }\n\n   lintOptions {\n    abortOnError false\n   }\n\n   dexOptions {\n      javaMaxHeapSize '2g'\n   }\n\napplicationVariants.all { variant ->\n    variant.outputs.each { output ->\n        def newName\n        def timeNow\n        def oldFile = output.outputFile\n        def outDirectory = oldFile.parent\n        if (\"true\".equals(IS_JENKINS)) { \n            timeNow = JENKINS_TIME\n            outDirectory = \"/media/nexd/work/android/package/release/\"\n            newName = 'zhuangbudong_example_' + verName + \"_\" + timeNow + \"_\" + variant.buildType.name + \".apk\" \n       } else {\n            timeNow = getDate()\n            if (variant.buildType.name.equals('debug')) { \n               newName = 'zhuangbudong_example_' + verName + \"_debug.apk\"  \n          } else { \n               newName = 'zhuangbudong_example_' + verName + \"_\" + timeNow + \"_\" + variant.buildType.name + \".apk\" \n           } \n       } \n       output.outputFile = new File(outDirectory, newName)\n    }}\n\n  }\n}\n```\n\ngradle.properties:\n\n```\nAPP_VERSION=2.0.2\nIS_JENKINS=false\nJENKINS_TIME=''\n```\n\n在工程中添加以上代码，并在Jenkins中为这些参数赋值。\n\n下面介绍 Jenkins 参数配置\n\n勾选参数化构建过程，如下图：\n![参数化构建](http://upload-images.jianshu.io/upload_images/1550996-20f69e63a527814c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n按照下图，添加相关类型的参数，此处注意，Jenkins 配置的参数名要和在android-studio中配置的参数名保持一致\n\n![JENKINS_TIME](http://upload-images.jianshu.io/upload_images/1550996-e0f4ceb7015ac0da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![APP_VERSION](http://upload-images.jianshu.io/upload_images/1550996-6e3f8d0311399d74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![IS_JENKINS](http://upload-images.jianshu.io/upload_images/1550996-673c2465bcdc9a89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![ENVIRONMENT](http://upload-images.jianshu.io/upload_images/1550996-a82221191b980ad7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 源码管理\n\n此处负责从版本库中拉去最新的代码\n\n\n![git 仓库](http://upload-images.jianshu.io/upload_images/1550996-6dcbd8dd2dd9456c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n此处如果需要验证，点击 Add， 选择： Username with password\n\n在对应窗口输入用户名和密码信息\n![用户身份验证](http://upload-images.jianshu.io/upload_images/1550996-8af978712a010864.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点击添加。\n\n使用 gitlab 进行源码库管理。\n\n### 触发器\n\n触发器负责拉取代码，编译，打包，发布等操作。通过触发器，执行Jenkins。\n\n\n![触发器构建](http://upload-images.jianshu.io/upload_images/1550996-beb6ff8faa9843f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 构建环境\n\n此处只是在Jenkins在打包时，配置任务名称即可。如下图：\n\n![构建环境](http://upload-images.jianshu.io/upload_images/1550996-45b210c5df916dbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 构建\n\n这里是最重要滴，配置以下命令，才能进行打包签名等等。\n\n如下配置，这里需要注意下，构建文件，根目录。在你的目录结构比较复杂的时候，即你的根目录没有 build.gradle 文件时，需要指定一下 build.gradle 目录的位置。\n\n同时，也是最重要的，勾选上pass job parameters as gradle properties ，不然之前配置的参数无法传递给项目中的 gradle.properties。\n\n![构建](http://upload-images.jianshu.io/upload_images/1550996-4e4e6e139fc1e856.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 构建后操作\n\n当项目构建完成后，我们可以通过邮件的方式将产生的Apk文件，以及测试报告，构建日志等信息，发送出来 如下图：\n\n\n![邮件发送](http://upload-images.jianshu.io/upload_images/1550996-63b6bcb7b2dfd551.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\n<hr/>\n(本邮件是程序自动下发的，请勿回复！)<br/><hr/>\n项目名称：${PROJECT_NAME}<br/><hr/>\n构建编号：${BUILD_NUMBER}<br/><hr/>\n构建状态：${BUILD_STATUS}<br/><hr/>\n触发原因：${CAUSE}<br/><hr/>\n测试报告：<a href=\"${PROJECT_URL}ws/${PROJECT_NAME}app/build/reports/tests/release/index.html\">${PROJECT_URL}ws/${PROJECT_NAME}app/build/reports/tests/release/index.html</a><br/><hr/>\n构建日志地址：<a href=\"${BUILD_URL}console\">${BUILD_URL}console/</a><br/><hr/>\n构建地址：<a href=\"${PROJECT_URL}\">${PROJECT_URL}</a><br/><hr/>\n构建报告：<a href=\"${BUILD_URL}testReport\">${BUILD_URL}testReport</a><br/><hr/>\n变更集:${JELLY_SCRIPT,template=\"html\"}<br/>\n\n<hr/>\n```\n\n## 开始构建\n\n回到 Jenkins 首页，点击创建的项目，点击 build with parameters:\n\n\n![Build with Parameters](http://upload-images.jianshu.io/upload_images/1550996-58ecc4965ab845ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点击开始构建，启动 Jenkins 构建任务。\n\n构建成功时，显示为蓝色， 失败为红色，如下图：\n\n\n![构建结果](http://upload-images.jianshu.io/upload_images/1550996-4b2fc4b1190ddcd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n构建后生成的 Apk 文件，存在 build.gradle 文件中配置的目录。同时也可以使用蒲公英或fir.im 进行发布管理。\n\n谢谢~\n\n","slug":"Jenkins-gradle-git-构建-Android-CI-构建环境","published":1,"updated":"2019-04-17T13:55:47.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcncze5000h16y9ydoiuboa","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在项目开发中，我们需要将最新的代码更新，提供给测试人员进行测试，以及发布。</p>\n<p>目前 Android 工作中都在使用很强大的开发、构建以及打包工具，例如： android-studio、Gradle、Git等。</p>\n<p>然，在企业组织并不是很完善的公司里，开发打包发布等工作，时常会由开发人员进行操作，难免在一些地方疏忽掉。</p>\n<p>因此，CI 构建的出现，使得这些繁琐的工作变得轻松起来。</p>\n<p>对于开发工程师，只负责向版本库提交代码，不用关心打包，发布之类的流程。</p>\n<p>对于产品和测试，只需要从发布页面下载 APK 安装文件，不需要每一次都去工程师哪里索取最新的安装文件。</p>\n<p>CI 的基本工作流程如下：<br><img src=\"http://upload-images.jianshu.io/upload_images/1550996-5101eac8d87352a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图1\"></p>\n<p>我们每一次提交代码（通过git/svn作为版本库）到主干上，根据 CI 的定时任务，检测到版本更新，通过 CI ，将进行打包发布等流程操作。</p>\n<a id=\"more\"></a>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>本文使用 Linux Ubuntu 系统为大家介绍环境的搭建</p>\n<h2 id=\"环境工具\"><a href=\"#环境工具\" class=\"headerlink\" title=\"环境工具\"></a>环境工具</h2><pre><code>1. PC 机(mac/linux)\n2. Java JDK\n3. Android SDK\n4. Gradle\n5. Git\n6. Tomcat\n7. Jenkins\n</code></pre><h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"Java-环境-安装\"><a href=\"#Java-环境-安装\" class=\"headerlink\" title=\"Java 环境 安装\"></a>Java 环境 安装</h3><p>Java JDK, Android SDK, Gradle 可从<a href=\"http://androiddevtools.cn\" target=\"_blank\" rel=\"noopener\">AndroidDevTools</a>处下载获取。</p>\n<h3 id=\"git-安装\"><a href=\"#git-安装\" class=\"headerlink\" title=\"git 安装\"></a>git 安装</h3><p>git 可通过终端进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:git-core/ppa</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure></p>\n<p>安装完成之后通过<code>git --version</code> 检查是否成功</p>\n<p>安装后 git 存储在 <code>/usr/bin/git</code>下</p>\n<h3 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h3><p>通过 Jenkins <a href=\"https://jenkins.io/index.html\" target=\"_blank\" rel=\"noopener\">官方网站</a>下载最新Jenkins.war包</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-d2654c0a1383423a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Jenkins 下载\"></p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>打开 <code>vi /etc/profile</code></p>\n<p>将下列语句添加在文件的末尾后， 执行 esc-&gt;:wq</p>\n<p>其中环境位置根据自己的所在位置进行相应的更改</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-ffd5f1b87d0e5bbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"环境变量\"></p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>激动的你，是不是已经被这些繁琐的东西搞的不耐烦了呢，下面我们开始启动 Jenkins</p>\n<p>将下载好的 Jenkins.war 包， 放入 Tomcat 的 webapps 目录下，进入 bin 目录执行 ./startup.sh 启动 Tomcat。</p>\n<p>启动后，在浏览器中输入： <code>localhost:8080/jenkins</code></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-cbdb39d4f2f4a85f.png?\nimageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"jenkinsmain.png\"></p>\n<h3 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h3><p>系统管理-&gt; 插件管理-&gt;可选插件：</p>\n<p>在搜索框中搜索以下插件，并进行安装</p>\n<p>git plugin<br>gitlab plugin<br>grade plugin<br>Android Lint Plugin<br>Build Pipeline plugin<br>build timeout plugin<br>build name plugin<br>change assembly-version plugin<br>credentials binding plugin<br>description setter plugin<br>Dynamic parameter plugin<br>Email Extension plugin<br>FindBugs plugin<br>JaCoco plugin<br>Unit attachments plugin<br>Project Description plugin<br>Timestamper<br>Workspace cleanup plugin</p>\n<p>安装完成后，重启。</p>\n<h3 id=\"系统设置\"><a href=\"#系统设置\" class=\"headerlink\" title=\"系统设置\"></a>系统设置</h3><p>系统管理-&gt;系统设置：</p>\n<p>配置Android 环境，将地址指向本机的 SDK 目录<br><img src=\"http://upload-images.jianshu.io/upload_images/1550996-5987aabcffb290c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Android environment\"></p>\n<p>系统管理-&gt;全局工具配置</p>\n<p>配置 Java， Git ， Gradle 目录等</p>\n<p>JDK：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-b9e29a1ec2b746e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Java JDK\"></p>\n<p>Git：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-9c4e88d64fcc2ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git\"></p>\n<p>Gradle：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-9fbabc7d5c7ca319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"gradle\"></p>\n<p>到此，环境配置，已基本完成。</p>\n<p>下面我们开始进行项目够将操作</p>\n<h2 id=\"项目构建\"><a href=\"#项目构建\" class=\"headerlink\" title=\"项目构建\"></a>项目构建</h2><h3 id=\"创建Job\"><a href=\"#创建Job\" class=\"headerlink\" title=\"创建Job\"></a>创建Job</h3><p>新建-&gt;构建一个自由风格的软件项目:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-2390d86256678c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"创建CI工程\"></p>\n<h3 id=\"参数化构建\"><a href=\"#参数化构建\" class=\"headerlink\" title=\"参数化构建\"></a>参数化构建</h3><p>通常我们在使用 Android-studio 进行打包时以及签名时，都会用到build.gradle并在其中配置相关属性。再此，我们可以用Jenkins，配置我们的项目参数，例如发布的版本号，构建时间， 上传路径，发布地址，签名打包等等。</p>\n<p>在这里我们先看看 build.gradle 中的构建信息:</p>\n<p>在项目的 moudle 下 build.gradle 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def getDate () &#123;</span><br><span class=\"line\">    def date = new Date()</span><br><span class=\"line\">    def formattedDate = date.format(&quot;yyyyMMddHHmm&quot;)</span><br><span class=\"line\">    return formattedDate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def verName = APP_VERSION</span><br><span class=\"line\">def verCode = 14</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    signingConfigs &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">          keyAlias &apos;&apos;</span><br><span class=\"line\">          keyPassword &apos;&apos;</span><br><span class=\"line\">          storeFile file (&apos;&apos;)</span><br><span class=\"line\">          storePassword &apos;&apos;</span><br><span class=\"line\">       &#125;   </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  defaultConfig &#123;</span><br><span class=\"line\">      applicationId &quot;cn.zhuangbudong.example&quot;</span><br><span class=\"line\">      minSdkVersion 18</span><br><span class=\"line\">      targetSdkVersion 25</span><br><span class=\"line\">      multiDexEnabled true</span><br><span class=\"line\">      versionCode verCode</span><br><span class=\"line\">      versionName verName</span><br><span class=\"line\"></span><br><span class=\"line\">      resValues(&quot;string&quot;, &apos;app_version&apos;, verName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  buildTypes &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">      signingConfig signingConfigs.release</span><br><span class=\"line\">      minifyEnabled false</span><br><span class=\"line\">      proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   lintOptions &#123;</span><br><span class=\"line\">    abortOnError false</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   dexOptions &#123;</span><br><span class=\"line\">      javaMaxHeapSize &apos;2g&apos;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">applicationVariants.all &#123; variant -&gt;</span><br><span class=\"line\">    variant.outputs.each &#123; output -&gt;</span><br><span class=\"line\">        def newName</span><br><span class=\"line\">        def timeNow</span><br><span class=\"line\">        def oldFile = output.outputFile</span><br><span class=\"line\">        def outDirectory = oldFile.parent</span><br><span class=\"line\">        if (&quot;true&quot;.equals(IS_JENKINS)) &#123; </span><br><span class=\"line\">            timeNow = JENKINS_TIME</span><br><span class=\"line\">            outDirectory = &quot;/media/nexd/work/android/package/release/&quot;</span><br><span class=\"line\">            newName = &apos;zhuangbudong_example_&apos; + verName + &quot;_&quot; + timeNow + &quot;_&quot; + variant.buildType.name + &quot;.apk&quot; </span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">            timeNow = getDate()</span><br><span class=\"line\">            if (variant.buildType.name.equals(&apos;debug&apos;)) &#123; </span><br><span class=\"line\">               newName = &apos;zhuangbudong_example_&apos; + verName + &quot;_debug.apk&quot;  </span><br><span class=\"line\">          &#125; else &#123; </span><br><span class=\"line\">               newName = &apos;zhuangbudong_example_&apos; + verName + &quot;_&quot; + timeNow + &quot;_&quot; + variant.buildType.name + &quot;.apk&quot; </span><br><span class=\"line\">           &#125; </span><br><span class=\"line\">       &#125; </span><br><span class=\"line\">       output.outputFile = new File(outDirectory, newName)</span><br><span class=\"line\">    &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>gradle.properties:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_VERSION=2.0.2</span><br><span class=\"line\">IS_JENKINS=false</span><br><span class=\"line\">JENKINS_TIME=&apos;&apos;</span><br></pre></td></tr></table></figure>\n<p>在工程中添加以上代码，并在Jenkins中为这些参数赋值。</p>\n<p>下面介绍 Jenkins 参数配置</p>\n<p>勾选参数化构建过程，如下图：<br><img src=\"http://upload-images.jianshu.io/upload_images/1550996-20f69e63a527814c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"参数化构建\"></p>\n<p>按照下图，添加相关类型的参数，此处注意，Jenkins 配置的参数名要和在android-studio中配置的参数名保持一致</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-e0f4ceb7015ac0da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"JENKINS_TIME\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1550996-6e3f8d0311399d74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"APP_VERSION\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1550996-673c2465bcdc9a89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"IS_JENKINS\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1550996-a82221191b980ad7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ENVIRONMENT\"></p>\n<h3 id=\"源码管理\"><a href=\"#源码管理\" class=\"headerlink\" title=\"源码管理\"></a>源码管理</h3><p>此处负责从版本库中拉去最新的代码</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-6dcbd8dd2dd9456c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git 仓库\"></p>\n<p>此处如果需要验证，点击 Add， 选择： Username with password</p>\n<p>在对应窗口输入用户名和密码信息<br><img src=\"http://upload-images.jianshu.io/upload_images/1550996-8af978712a010864.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"用户身份验证\"></p>\n<p>点击添加。</p>\n<p>使用 gitlab 进行源码库管理。</p>\n<h3 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h3><p>触发器负责拉取代码，编译，打包，发布等操作。通过触发器，执行Jenkins。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-beb6ff8faa9843f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"触发器构建\"></p>\n<h3 id=\"构建环境\"><a href=\"#构建环境\" class=\"headerlink\" title=\"构建环境\"></a>构建环境</h3><p>此处只是在Jenkins在打包时，配置任务名称即可。如下图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-45b210c5df916dbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"构建环境\"></p>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><p>这里是最重要滴，配置以下命令，才能进行打包签名等等。</p>\n<p>如下配置，这里需要注意下，构建文件，根目录。在你的目录结构比较复杂的时候，即你的根目录没有 build.gradle 文件时，需要指定一下 build.gradle 目录的位置。</p>\n<p>同时，也是最重要的，勾选上pass job parameters as gradle properties ，不然之前配置的参数无法传递给项目中的 gradle.properties。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-4e4e6e139fc1e856.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"构建\"></p>\n<h3 id=\"构建后操作\"><a href=\"#构建后操作\" class=\"headerlink\" title=\"构建后操作\"></a>构建后操作</h3><p>当项目构建完成后，我们可以通过邮件的方式将产生的Apk文件，以及测试报告，构建日志等信息，发送出来 如下图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-63b6bcb7b2dfd551.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"邮件发送\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;hr/&gt;</span><br><span class=\"line\">(本邮件是程序自动下发的，请勿回复！)&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">项目名称：$&#123;PROJECT_NAME&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">构建编号：$&#123;BUILD_NUMBER&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">构建状态：$&#123;BUILD_STATUS&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">触发原因：$&#123;CAUSE&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">测试报告：&lt;a href=&quot;$&#123;PROJECT_URL&#125;ws/$&#123;PROJECT_NAME&#125;app/build/reports/tests/release/index.html&quot;&gt;$&#123;PROJECT_URL&#125;ws/$&#123;PROJECT_NAME&#125;app/build/reports/tests/release/index.html&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">构建日志地址：&lt;a href=&quot;$&#123;BUILD_URL&#125;console&quot;&gt;$&#123;BUILD_URL&#125;console/&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">构建地址：&lt;a href=&quot;$&#123;PROJECT_URL&#125;&quot;&gt;$&#123;PROJECT_URL&#125;&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">构建报告：&lt;a href=&quot;$&#123;BUILD_URL&#125;testReport&quot;&gt;$&#123;BUILD_URL&#125;testReport&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">变更集:$&#123;JELLY_SCRIPT,template=&quot;html&quot;&#125;&lt;br/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;hr/&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h2><p>回到 Jenkins 首页，点击创建的项目，点击 build with parameters:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-58ecc4965ab845ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Build with Parameters\"></p>\n<p>点击开始构建，启动 Jenkins 构建任务。</p>\n<p>构建成功时，显示为蓝色， 失败为红色，如下图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-4b2fc4b1190ddcd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"构建结果\"></p>\n<p>构建后生成的 Apk 文件，存在 build.gradle 文件中配置的目录。同时也可以使用蒲公英或fir.im 进行发布管理。</p>\n<p>谢谢~</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在项目开发中，我们需要将最新的代码更新，提供给测试人员进行测试，以及发布。</p>\n<p>目前 Android 工作中都在使用很强大的开发、构建以及打包工具，例如： android-studio、Gradle、Git等。</p>\n<p>然，在企业组织并不是很完善的公司里，开发打包发布等工作，时常会由开发人员进行操作，难免在一些地方疏忽掉。</p>\n<p>因此，CI 构建的出现，使得这些繁琐的工作变得轻松起来。</p>\n<p>对于开发工程师，只负责向版本库提交代码，不用关心打包，发布之类的流程。</p>\n<p>对于产品和测试，只需要从发布页面下载 APK 安装文件，不需要每一次都去工程师哪里索取最新的安装文件。</p>\n<p>CI 的基本工作流程如下：<br><img src=\"http://upload-images.jianshu.io/upload_images/1550996-5101eac8d87352a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图1\"></p>\n<p>我们每一次提交代码（通过git/svn作为版本库）到主干上，根据 CI 的定时任务，检测到版本更新，通过 CI ，将进行打包发布等流程操作。</p>","more":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>本文使用 Linux Ubuntu 系统为大家介绍环境的搭建</p>\n<h2 id=\"环境工具\"><a href=\"#环境工具\" class=\"headerlink\" title=\"环境工具\"></a>环境工具</h2><pre><code>1. PC 机(mac/linux)\n2. Java JDK\n3. Android SDK\n4. Gradle\n5. Git\n6. Tomcat\n7. Jenkins\n</code></pre><h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"Java-环境-安装\"><a href=\"#Java-环境-安装\" class=\"headerlink\" title=\"Java 环境 安装\"></a>Java 环境 安装</h3><p>Java JDK, Android SDK, Gradle 可从<a href=\"http://androiddevtools.cn\" target=\"_blank\" rel=\"noopener\">AndroidDevTools</a>处下载获取。</p>\n<h3 id=\"git-安装\"><a href=\"#git-安装\" class=\"headerlink\" title=\"git 安装\"></a>git 安装</h3><p>git 可通过终端进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:git-core/ppa</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure></p>\n<p>安装完成之后通过<code>git --version</code> 检查是否成功</p>\n<p>安装后 git 存储在 <code>/usr/bin/git</code>下</p>\n<h3 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h3><p>通过 Jenkins <a href=\"https://jenkins.io/index.html\" target=\"_blank\" rel=\"noopener\">官方网站</a>下载最新Jenkins.war包</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-d2654c0a1383423a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Jenkins 下载\"></p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>打开 <code>vi /etc/profile</code></p>\n<p>将下列语句添加在文件的末尾后， 执行 esc-&gt;:wq</p>\n<p>其中环境位置根据自己的所在位置进行相应的更改</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-ffd5f1b87d0e5bbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"环境变量\"></p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>激动的你，是不是已经被这些繁琐的东西搞的不耐烦了呢，下面我们开始启动 Jenkins</p>\n<p>将下载好的 Jenkins.war 包， 放入 Tomcat 的 webapps 目录下，进入 bin 目录执行 ./startup.sh 启动 Tomcat。</p>\n<p>启动后，在浏览器中输入： <code>localhost:8080/jenkins</code></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-cbdb39d4f2f4a85f.png?\nimageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"jenkinsmain.png\"></p>\n<h3 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h3><p>系统管理-&gt; 插件管理-&gt;可选插件：</p>\n<p>在搜索框中搜索以下插件，并进行安装</p>\n<p>git plugin<br>gitlab plugin<br>grade plugin<br>Android Lint Plugin<br>Build Pipeline plugin<br>build timeout plugin<br>build name plugin<br>change assembly-version plugin<br>credentials binding plugin<br>description setter plugin<br>Dynamic parameter plugin<br>Email Extension plugin<br>FindBugs plugin<br>JaCoco plugin<br>Unit attachments plugin<br>Project Description plugin<br>Timestamper<br>Workspace cleanup plugin</p>\n<p>安装完成后，重启。</p>\n<h3 id=\"系统设置\"><a href=\"#系统设置\" class=\"headerlink\" title=\"系统设置\"></a>系统设置</h3><p>系统管理-&gt;系统设置：</p>\n<p>配置Android 环境，将地址指向本机的 SDK 目录<br><img src=\"http://upload-images.jianshu.io/upload_images/1550996-5987aabcffb290c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Android environment\"></p>\n<p>系统管理-&gt;全局工具配置</p>\n<p>配置 Java， Git ， Gradle 目录等</p>\n<p>JDK：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-b9e29a1ec2b746e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Java JDK\"></p>\n<p>Git：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-9c4e88d64fcc2ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git\"></p>\n<p>Gradle：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-9fbabc7d5c7ca319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"gradle\"></p>\n<p>到此，环境配置，已基本完成。</p>\n<p>下面我们开始进行项目够将操作</p>\n<h2 id=\"项目构建\"><a href=\"#项目构建\" class=\"headerlink\" title=\"项目构建\"></a>项目构建</h2><h3 id=\"创建Job\"><a href=\"#创建Job\" class=\"headerlink\" title=\"创建Job\"></a>创建Job</h3><p>新建-&gt;构建一个自由风格的软件项目:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-2390d86256678c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"创建CI工程\"></p>\n<h3 id=\"参数化构建\"><a href=\"#参数化构建\" class=\"headerlink\" title=\"参数化构建\"></a>参数化构建</h3><p>通常我们在使用 Android-studio 进行打包时以及签名时，都会用到build.gradle并在其中配置相关属性。再此，我们可以用Jenkins，配置我们的项目参数，例如发布的版本号，构建时间， 上传路径，发布地址，签名打包等等。</p>\n<p>在这里我们先看看 build.gradle 中的构建信息:</p>\n<p>在项目的 moudle 下 build.gradle 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def getDate () &#123;</span><br><span class=\"line\">    def date = new Date()</span><br><span class=\"line\">    def formattedDate = date.format(&quot;yyyyMMddHHmm&quot;)</span><br><span class=\"line\">    return formattedDate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def verName = APP_VERSION</span><br><span class=\"line\">def verCode = 14</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    signingConfigs &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">          keyAlias &apos;&apos;</span><br><span class=\"line\">          keyPassword &apos;&apos;</span><br><span class=\"line\">          storeFile file (&apos;&apos;)</span><br><span class=\"line\">          storePassword &apos;&apos;</span><br><span class=\"line\">       &#125;   </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  defaultConfig &#123;</span><br><span class=\"line\">      applicationId &quot;cn.zhuangbudong.example&quot;</span><br><span class=\"line\">      minSdkVersion 18</span><br><span class=\"line\">      targetSdkVersion 25</span><br><span class=\"line\">      multiDexEnabled true</span><br><span class=\"line\">      versionCode verCode</span><br><span class=\"line\">      versionName verName</span><br><span class=\"line\"></span><br><span class=\"line\">      resValues(&quot;string&quot;, &apos;app_version&apos;, verName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  buildTypes &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">      signingConfig signingConfigs.release</span><br><span class=\"line\">      minifyEnabled false</span><br><span class=\"line\">      proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   lintOptions &#123;</span><br><span class=\"line\">    abortOnError false</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   dexOptions &#123;</span><br><span class=\"line\">      javaMaxHeapSize &apos;2g&apos;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">applicationVariants.all &#123; variant -&gt;</span><br><span class=\"line\">    variant.outputs.each &#123; output -&gt;</span><br><span class=\"line\">        def newName</span><br><span class=\"line\">        def timeNow</span><br><span class=\"line\">        def oldFile = output.outputFile</span><br><span class=\"line\">        def outDirectory = oldFile.parent</span><br><span class=\"line\">        if (&quot;true&quot;.equals(IS_JENKINS)) &#123; </span><br><span class=\"line\">            timeNow = JENKINS_TIME</span><br><span class=\"line\">            outDirectory = &quot;/media/nexd/work/android/package/release/&quot;</span><br><span class=\"line\">            newName = &apos;zhuangbudong_example_&apos; + verName + &quot;_&quot; + timeNow + &quot;_&quot; + variant.buildType.name + &quot;.apk&quot; </span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">            timeNow = getDate()</span><br><span class=\"line\">            if (variant.buildType.name.equals(&apos;debug&apos;)) &#123; </span><br><span class=\"line\">               newName = &apos;zhuangbudong_example_&apos; + verName + &quot;_debug.apk&quot;  </span><br><span class=\"line\">          &#125; else &#123; </span><br><span class=\"line\">               newName = &apos;zhuangbudong_example_&apos; + verName + &quot;_&quot; + timeNow + &quot;_&quot; + variant.buildType.name + &quot;.apk&quot; </span><br><span class=\"line\">           &#125; </span><br><span class=\"line\">       &#125; </span><br><span class=\"line\">       output.outputFile = new File(outDirectory, newName)</span><br><span class=\"line\">    &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>gradle.properties:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_VERSION=2.0.2</span><br><span class=\"line\">IS_JENKINS=false</span><br><span class=\"line\">JENKINS_TIME=&apos;&apos;</span><br></pre></td></tr></table></figure>\n<p>在工程中添加以上代码，并在Jenkins中为这些参数赋值。</p>\n<p>下面介绍 Jenkins 参数配置</p>\n<p>勾选参数化构建过程，如下图：<br><img src=\"http://upload-images.jianshu.io/upload_images/1550996-20f69e63a527814c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"参数化构建\"></p>\n<p>按照下图，添加相关类型的参数，此处注意，Jenkins 配置的参数名要和在android-studio中配置的参数名保持一致</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-e0f4ceb7015ac0da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"JENKINS_TIME\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1550996-6e3f8d0311399d74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"APP_VERSION\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1550996-673c2465bcdc9a89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"IS_JENKINS\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1550996-a82221191b980ad7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ENVIRONMENT\"></p>\n<h3 id=\"源码管理\"><a href=\"#源码管理\" class=\"headerlink\" title=\"源码管理\"></a>源码管理</h3><p>此处负责从版本库中拉去最新的代码</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-6dcbd8dd2dd9456c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git 仓库\"></p>\n<p>此处如果需要验证，点击 Add， 选择： Username with password</p>\n<p>在对应窗口输入用户名和密码信息<br><img src=\"http://upload-images.jianshu.io/upload_images/1550996-8af978712a010864.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"用户身份验证\"></p>\n<p>点击添加。</p>\n<p>使用 gitlab 进行源码库管理。</p>\n<h3 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h3><p>触发器负责拉取代码，编译，打包，发布等操作。通过触发器，执行Jenkins。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-beb6ff8faa9843f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"触发器构建\"></p>\n<h3 id=\"构建环境\"><a href=\"#构建环境\" class=\"headerlink\" title=\"构建环境\"></a>构建环境</h3><p>此处只是在Jenkins在打包时，配置任务名称即可。如下图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-45b210c5df916dbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"构建环境\"></p>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><p>这里是最重要滴，配置以下命令，才能进行打包签名等等。</p>\n<p>如下配置，这里需要注意下，构建文件，根目录。在你的目录结构比较复杂的时候，即你的根目录没有 build.gradle 文件时，需要指定一下 build.gradle 目录的位置。</p>\n<p>同时，也是最重要的，勾选上pass job parameters as gradle properties ，不然之前配置的参数无法传递给项目中的 gradle.properties。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-4e4e6e139fc1e856.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"构建\"></p>\n<h3 id=\"构建后操作\"><a href=\"#构建后操作\" class=\"headerlink\" title=\"构建后操作\"></a>构建后操作</h3><p>当项目构建完成后，我们可以通过邮件的方式将产生的Apk文件，以及测试报告，构建日志等信息，发送出来 如下图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-63b6bcb7b2dfd551.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"邮件发送\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;hr/&gt;</span><br><span class=\"line\">(本邮件是程序自动下发的，请勿回复！)&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">项目名称：$&#123;PROJECT_NAME&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">构建编号：$&#123;BUILD_NUMBER&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">构建状态：$&#123;BUILD_STATUS&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">触发原因：$&#123;CAUSE&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">测试报告：&lt;a href=&quot;$&#123;PROJECT_URL&#125;ws/$&#123;PROJECT_NAME&#125;app/build/reports/tests/release/index.html&quot;&gt;$&#123;PROJECT_URL&#125;ws/$&#123;PROJECT_NAME&#125;app/build/reports/tests/release/index.html&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">构建日志地址：&lt;a href=&quot;$&#123;BUILD_URL&#125;console&quot;&gt;$&#123;BUILD_URL&#125;console/&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">构建地址：&lt;a href=&quot;$&#123;PROJECT_URL&#125;&quot;&gt;$&#123;PROJECT_URL&#125;&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">构建报告：&lt;a href=&quot;$&#123;BUILD_URL&#125;testReport&quot;&gt;$&#123;BUILD_URL&#125;testReport&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\">变更集:$&#123;JELLY_SCRIPT,template=&quot;html&quot;&#125;&lt;br/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;hr/&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h2><p>回到 Jenkins 首页，点击创建的项目，点击 build with parameters:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-58ecc4965ab845ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Build with Parameters\"></p>\n<p>点击开始构建，启动 Jenkins 构建任务。</p>\n<p>构建成功时，显示为蓝色， 失败为红色，如下图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-4b2fc4b1190ddcd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"构建结果\"></p>\n<p>构建后生成的 Apk 文件，存在 build.gradle 文件中配置的目录。同时也可以使用蒲公英或fir.im 进行发布管理。</p>\n<p>谢谢~</p>"},{"title":"adb command","date":"2019-04-16T09:38:08.000Z","_content":"\n1. 查看PID\n\n  ```\n  adb shell ps\n  ```\n\n2. 查看日志\n\n  ```\n  全部日志\n  adb logcat\n  \n  按照 PID 筛选日志\n  adb logcat | grep <PID>\n  ```\n\n3. 查询链接设备\n\n  ```\n  adb devices\n  ```\n<!--more-->\n\n4. 重启机器\n\n  ```\n  adb reboot\n  ```\n\n5. 杀死进程服务\n\n  ```\n  adb kill-server\n  ```\n\n6. 重启进程服务\n\n  ```\n  adb start-server\n  ```\n\n7. 获取机器 Mac 地址\n\n  ```\n  adb shell cat /sys/class/net/wlan0/address\n  ```\n\n8. 安装 APK\n\n  ```\n  普通安装\n  adb install <file path>\n  \n  保留数据和缓存文件\n  adb install -r <file path>\n  \n  安装到 SD 卡上\n  adb install -s <file path>\n  ```\n\n9. 卸载 APK\n\n  ```\n  普通卸载\n  adb uninstall <package name>\n  \n  保留数据和缓存文件\n  adb uninstall -k <package name>\n  ```\n\n10. 启动应用\n\n    ```\n    adb shell am start -n <package name>/.<activity_class_name>\n    ```\n\n11. 查看 CPU 占用率\n\n    ```\n    adb shell top\n    \n    查看内存占用前 6 的 app\n    adb shell top -m 6\n    \n    刷新一次内存\n    adb shell top -n 1\n    ```\n\n12. 杀死进程\n\n    ```\n    adb shell kill <pid>\n    ```\n\n13. 将 System 分区重新挂在为可读写分区\n\n    ```\n    adb remount\n    ```\n\n14. 从本地复制文件到设备\n\n    ```\n    adb push <local> <remote>\n    ```\n\n15. 从设备复制文件到本地\n\n    ```\n    adb pull <remote> <local>\n    ```\n\n16. 查看 WiFi 密码\n\n    ```\n    adb shell cat /data/misc/wifi/*.conf\n    ```\n\n17. 查看 bug 报告\n\n    ```\n    adb bugreport\n    ```\n\n18. 跑 monkey\n\n    ```\n    adb shell monkey -v -p your.package.name 500\n    ```\n\n19. 截图\n\n    ```\n    adb shell screencap -p /sdcard/screenshot.png\n    ```\n\n20. 录屏\n\n    ```\n    adb shell screenrecord /sdcard/demo.mp4\n    ```\n\n21. 查看安装列表\n\n    ```\n    adb shell pm list packages\n    ```\n\n<<<<<<< HEAD\n11. 安装证书\n\n    ```\n    adb shell am start -n com.android.certinstaller/.CertInstallerMain -a android.intent.action.VIEW -t application/x-x509-ca-cert file:///sdcard/cacert.cer\n    ```\n\n\n=======\n22. 查看内存占用\n\n    ```\n    adb shell dumpsys meminfo <package> -d\n    ```\n\n23.  查询栈信息\n\n    ```\n    adb shell dumpsys activity\n    // 获取自己应用\n    adb shell dumpsys activity | grep <package>\n    // 获取处于栈顶的 activity\n    adb shell dumpsys activity | grep mFocusedActivity\n    ```\n\n    \n>>>>>>> f9adb0c31383a6ee73b1b79bc3661b2e25cff86a\n","source":"_posts/adb-command.md","raw":"---\ntitle: adb command\ndate: 2019-04-16 17:38:08\ntags: Android\n\n---\n\n1. 查看PID\n\n  ```\n  adb shell ps\n  ```\n\n2. 查看日志\n\n  ```\n  全部日志\n  adb logcat\n  \n  按照 PID 筛选日志\n  adb logcat | grep <PID>\n  ```\n\n3. 查询链接设备\n\n  ```\n  adb devices\n  ```\n<!--more-->\n\n4. 重启机器\n\n  ```\n  adb reboot\n  ```\n\n5. 杀死进程服务\n\n  ```\n  adb kill-server\n  ```\n\n6. 重启进程服务\n\n  ```\n  adb start-server\n  ```\n\n7. 获取机器 Mac 地址\n\n  ```\n  adb shell cat /sys/class/net/wlan0/address\n  ```\n\n8. 安装 APK\n\n  ```\n  普通安装\n  adb install <file path>\n  \n  保留数据和缓存文件\n  adb install -r <file path>\n  \n  安装到 SD 卡上\n  adb install -s <file path>\n  ```\n\n9. 卸载 APK\n\n  ```\n  普通卸载\n  adb uninstall <package name>\n  \n  保留数据和缓存文件\n  adb uninstall -k <package name>\n  ```\n\n10. 启动应用\n\n    ```\n    adb shell am start -n <package name>/.<activity_class_name>\n    ```\n\n11. 查看 CPU 占用率\n\n    ```\n    adb shell top\n    \n    查看内存占用前 6 的 app\n    adb shell top -m 6\n    \n    刷新一次内存\n    adb shell top -n 1\n    ```\n\n12. 杀死进程\n\n    ```\n    adb shell kill <pid>\n    ```\n\n13. 将 System 分区重新挂在为可读写分区\n\n    ```\n    adb remount\n    ```\n\n14. 从本地复制文件到设备\n\n    ```\n    adb push <local> <remote>\n    ```\n\n15. 从设备复制文件到本地\n\n    ```\n    adb pull <remote> <local>\n    ```\n\n16. 查看 WiFi 密码\n\n    ```\n    adb shell cat /data/misc/wifi/*.conf\n    ```\n\n17. 查看 bug 报告\n\n    ```\n    adb bugreport\n    ```\n\n18. 跑 monkey\n\n    ```\n    adb shell monkey -v -p your.package.name 500\n    ```\n\n19. 截图\n\n    ```\n    adb shell screencap -p /sdcard/screenshot.png\n    ```\n\n20. 录屏\n\n    ```\n    adb shell screenrecord /sdcard/demo.mp4\n    ```\n\n21. 查看安装列表\n\n    ```\n    adb shell pm list packages\n    ```\n\n<<<<<<< HEAD\n11. 安装证书\n\n    ```\n    adb shell am start -n com.android.certinstaller/.CertInstallerMain -a android.intent.action.VIEW -t application/x-x509-ca-cert file:///sdcard/cacert.cer\n    ```\n\n\n=======\n22. 查看内存占用\n\n    ```\n    adb shell dumpsys meminfo <package> -d\n    ```\n\n23.  查询栈信息\n\n    ```\n    adb shell dumpsys activity\n    // 获取自己应用\n    adb shell dumpsys activity | grep <package>\n    // 获取处于栈顶的 activity\n    adb shell dumpsys activity | grep mFocusedActivity\n    ```\n\n    \n>>>>>>> f9adb0c31383a6ee73b1b79bc3661b2e25cff86a\n","slug":"adb-command","published":1,"updated":"2019-08-12T15:33:00.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcnczed000j16y9dyy0xnor","content":"<ol>\n<li><p>查看PID</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell ps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全部日志</span><br><span class=\"line\">adb logcat</span><br><span class=\"line\"></span><br><span class=\"line\">按照 PID 筛选日志</span><br><span class=\"line\">adb logcat | grep &lt;PID&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询链接设备</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb devices</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"4\">\n<li><p>重启机器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb reboot</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>杀死进程服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb kill-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启进程服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb start-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取机器 Mac 地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell cat /sys/class/net/wlan0/address</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 APK</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">普通安装</span><br><span class=\"line\">adb install &lt;file path&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">保留数据和缓存文件</span><br><span class=\"line\">adb install -r &lt;file path&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">安装到 SD 卡上</span><br><span class=\"line\">adb install -s &lt;file path&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卸载 APK</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">普通卸载</span><br><span class=\"line\">adb uninstall &lt;package name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">保留数据和缓存文件</span><br><span class=\"line\">adb uninstall -k &lt;package name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动应用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell am start -n &lt;package name&gt;/.&lt;activity_class_name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 CPU 占用率</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell top</span><br><span class=\"line\"></span><br><span class=\"line\">查看内存占用前 6 的 app</span><br><span class=\"line\">adb shell top -m 6</span><br><span class=\"line\"></span><br><span class=\"line\">刷新一次内存</span><br><span class=\"line\">adb shell top -n 1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>杀死进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell kill &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将 System 分区重新挂在为可读写分区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb remount</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从本地复制文件到设备</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb push &lt;local&gt; &lt;remote&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从设备复制文件到本地</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb pull &lt;remote&gt; &lt;local&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 WiFi 密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell cat /data/misc/wifi/*.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 bug 报告</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb bugreport</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>跑 monkey</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell monkey -v -p your.package.name 500</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>截图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell screencap -p /sdcard/screenshot.png</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>录屏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell screenrecord /sdcard/demo.mp4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看安装列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell pm list packages</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>\n<ol start=\"11\">\n<li><p>安装证书</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell am start -n com.android.certinstaller/.CertInstallerMain -a android.intent.action.VIEW -t application/x-x509-ca-cert file:///sdcard/cacert.cer</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>=======</p>\n<ol start=\"22\">\n<li><p>查看内存占用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys meminfo &lt;package&gt; -d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询栈信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys activity</span><br><span class=\"line\">// 获取自己应用</span><br><span class=\"line\">adb shell dumpsys activity | grep &lt;package&gt;</span><br><span class=\"line\">// 获取处于栈顶的 activity</span><br><span class=\"line\">adb shell dumpsys activity | grep mFocusedActivity</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>f9adb0c31383a6ee73b1b79bc3661b2e25cff86a</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"excerpt":"<ol>\n<li><p>查看PID</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell ps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全部日志</span><br><span class=\"line\">adb logcat</span><br><span class=\"line\"></span><br><span class=\"line\">按照 PID 筛选日志</span><br><span class=\"line\">adb logcat | grep &lt;PID&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询链接设备</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb devices</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol start=\"4\">\n<li><p>重启机器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb reboot</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>杀死进程服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb kill-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启进程服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb start-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取机器 Mac 地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell cat /sys/class/net/wlan0/address</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 APK</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">普通安装</span><br><span class=\"line\">adb install &lt;file path&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">保留数据和缓存文件</span><br><span class=\"line\">adb install -r &lt;file path&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">安装到 SD 卡上</span><br><span class=\"line\">adb install -s &lt;file path&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卸载 APK</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">普通卸载</span><br><span class=\"line\">adb uninstall &lt;package name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">保留数据和缓存文件</span><br><span class=\"line\">adb uninstall -k &lt;package name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动应用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell am start -n &lt;package name&gt;/.&lt;activity_class_name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 CPU 占用率</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell top</span><br><span class=\"line\"></span><br><span class=\"line\">查看内存占用前 6 的 app</span><br><span class=\"line\">adb shell top -m 6</span><br><span class=\"line\"></span><br><span class=\"line\">刷新一次内存</span><br><span class=\"line\">adb shell top -n 1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>杀死进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell kill &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将 System 分区重新挂在为可读写分区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb remount</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从本地复制文件到设备</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb push &lt;local&gt; &lt;remote&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从设备复制文件到本地</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb pull &lt;remote&gt; &lt;local&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 WiFi 密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell cat /data/misc/wifi/*.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 bug 报告</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb bugreport</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>跑 monkey</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell monkey -v -p your.package.name 500</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>截图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell screencap -p /sdcard/screenshot.png</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>录屏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell screenrecord /sdcard/demo.mp4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看安装列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell pm list packages</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>\n<ol start=\"11\">\n<li><p>安装证书</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell am start -n com.android.certinstaller/.CertInstallerMain -a android.intent.action.VIEW -t application/x-x509-ca-cert file:///sdcard/cacert.cer</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>=======</p>\n<ol start=\"22\">\n<li><p>查看内存占用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys meminfo &lt;package&gt; -d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询栈信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys activity</span><br><span class=\"line\">// 获取自己应用</span><br><span class=\"line\">adb shell dumpsys activity | grep &lt;package&gt;</span><br><span class=\"line\">// 获取处于栈顶的 activity</span><br><span class=\"line\">adb shell dumpsys activity | grep mFocusedActivity</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>f9adb0c31383a6ee73b1b79bc3661b2e25cff86a</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>"},{"title":"git command","date":"2019-04-16T09:43:58.000Z","_content":"\n# Git 命令\n\n|     修改记录     |        修改时间        |                  备注                  |\n| :--------------: | :--------------------: | :------------------------------------: |\n| 添加删除远程分支 | 2018年07月26日13:59:22 |            删除远程分支命令            |\n|   更新fork仓库   | 2018年08月10日14:16:08 | 添加fork的仓库，从主仓库更新代码的命令 |\n\n\n整理的还不够完善，以后工作中遇到了会不断补进，如有大神，有可以留言，我们一起来完善。欢迎各位留言^_^\n\n<!--more-->\n\n## Git 文件的三种状态\n\n1. 已提交：表示该文件已经被安全地保存在本地版本库中，执行过git commit。\n2. 已修改：表示修改了某个文件，但还没有提交保存\n3. 已暂存：表示把已修改的文件房子啊下次提交时要保存的清单中，也就是执行了 git add 命令。\n\n## 远程仓库与本地代码的配置\n\n将本地已经有的项目上传到远程空仓库中\n\n``` git\ncd <project path>\ngit init\ngit remote add origin <远程仓库地址>\ngit add .\ngit commit -m '提交日志'\ngit push -u origin master\n```\n\n## Git 基本配置\n\n1. 配置个人的用户名称和电子邮件地址，每次提交时，都会引用这两条信息，以用来说明是谁提交的更新。\n\n\n使用 `--global` 选项，更改的未用户主目录下的配置，如果想在某个特定的项目中使用其他的名称和邮件，只需要去掉 `--global` 选项重新配置，新的配置位于当前项目的 `.git/config` 文件中。\n\n```git\n git config --global user.name ''yourname''\n git config --global user.email  yourname@gmail.com\n```\n\n2. 基础命令\n\n> git init\n\n通过此命令会在当前目录创建一个`.git`的隐藏目录，这是`git`的第一步。\n\n> git status\n\n`git status`是最为常用的命令之一，用于检查本地项目的状态.仔细阅读红色/绿色部分，可以获得相关文件的操作信息，根据提示，判断是执行`git commit` 还是执行`git add` 操作。\n\n\n> git add\n\n将一个或多个文件添加到 `git`仓库中，只有通过 `git add` 添加的文件才会被版本控制管理。\n\n添加单个文件 `git add HelloWorld2.java`\n\n添加多个文件 `git add --a`\n\n添加当前目录所有文件 `git add .`\n\n\n> git rm --cached <file>\n\n将文件从`git`追踪列表中移除，只是逻辑删除（从版本库中移除），并不会将本地文件删除\n\n> git commit\n\n执行过 `git add` 命令后，需要将暂存的文件提交到本地仓库中，此时是真正的提交\n\n带 log 的提交： `git commit -m 'first commit'`\n\n通过编辑器提交: `git commit `\n\n带log 的提交比较方便，但当你的提交信息有一定格式或者需要提交的文字内容较多时，使用编辑器效果会更好.\n\n\n> git log\n\n查看历史提交记录， 包括**提交人**、**时间**、**信息**、**信息指纹**等.\n\n查看提交记录： `git log`\n\n单行展示记录： `git log --pretty=oneline`\n\n展示全部信息： `git log --pretty=fuller`\n\n\n> git clone <远程仓库地址>\n\n拉取远程仓库代码,此项目并不一定是你所创建\n\n例如： `git clone git@github.com:bboyfeiyu/AndroidEventBus.git`\n\n执行完成后，会在本地当前目录创建一个AndroidEventBus的目录来存放仓库代码\n\n> git remote\n\n将本地已经`init`过的工程链接到远程的空仓库中，以此来完成远程版本库的创建\n\n链接远程版本库： `git remote add origin <远程地址>`\n\n\n> git remote set-url <仓库地址>\n\nSSH 和 HTTPS 方式切换\n\n\n```git\n# ssh to https\n$ git remote set-url origin https://github.com/USERNAME/repository.git\n# https to ssh\n$ git remote set-url origin git@github.com:USERNAME/repository.git\n```\n\n可以使用 `git remote -v` 来检查当前仓库地址\n\n```\n> origin git@github.com:username/repository.git (fetch)\n> origin git@github.com:username/repository.git (push)\n```\n\nSSH 和 HTTPS 的区别：\n\n使用 SSH 方式需要在本地配置一个密钥，具体可参见[多个 SSH 公钥提交代码到不同平台](https://xiaoman.ren/2019/04/17/%E5%A4%9A%E4%B8%AA-ssh-%E5%85%AC%E9%92%A5%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0/)中介绍；\n而使用 HTTPS 的方式操作简单，弊端是需要经常输入密码。\n\n\n> git branch\n\n分支是用来管理代码版本、类型的有效工具，可根据不同的服务对象、不同的上线版本等等，来做代码分离，版本管理操作\n\n查看分支： `git branch`\n\n查看带提交信息的分支信息： `git branch -v`\n\n创建分支： `git branch <分支名称>`\n\n创建并切换分支： `git branch -b <分支名称>`\n\n切换分支： `git checkout <分支名称>`\n\n推送分支： `git push origin <分支名称>`\n\n删除分支： `git branch -d <分支名称>`\n\n删除远程分支： `git push origin :<分支名称>`\n\n合并分支： `git merge <分支名称>`\n\n\n\n> git push\n\n推送本地修改到远端服务器\n\n`git push origin master`\n\n有时因两个独立的历史，会导致推送无法达成， 通常在 `git pull` 时会提示 `fatal: refusing to merge unrelated histories  // 拒绝合并无关历史`\n\n这时可是使用 `git pull origin master --allow-unrelated-histories ` 来解决。\n\n\n\n> git tag \n\n会列出所有的 `tag` 标签信息\n\n在完成了所有功能、并且经过测试之后，可以封板上线的版本，通常会打一个标签，***这是一个很重要的功能*** \n\n建议每次上线都要做一次，便于后续的版本检索与维护，通常一个标签就代表了一个正式版本。\n\n查看本地/远程 tag 标签：`git tag`\n\n查看模糊 tag 标签： `git tag -l 'v1.4.2.*'`\n\n查看备注 tag 标签： `git tag -ln`\n\n\n查看标签信息： `git show <标签名>`\n\n\n创建本地 tag 标签： `git tag -a <标签名> -m \"<标签备注信息>\"`\n\n删除本地 tag 标签： `git tag -d <标签名>`\n\n\n推送远程 tag 标签： `git push origin <标签名>`\n\n推送全部 tag 标签： `git push origin -tags`\n\n删除远程 tag 标签： `git push origin :refs/tags/<标签名>`\n\n\n**查看远程机状态**\n> git remote 用来管理， fork 的项目，与主项目的更新操作\n\n```\ngit remote -v\ngit remote add upstream git@github.com:XXX/XXX.git\ngit fetch upstream\ngit merge upstream/master\ngit push\n```\n\n## 使用中的一些技巧\n\n**命名别名**\n复杂并超长的命令，可以通过起别名的方式方便在终端中书协\n\n```\ngit config --global alias.ci commit\ngit config --global alias.ck checkout\ngit config --global alias.st status\n```\n\n然后就可以很愉快的使用git命令了。\n```\ngit st\n```\n\n","source":"_posts/git-command.md","raw":"---\ntitle: git command\ndate: 2019-04-16 17:43:58\ntags: Git\n---\n\n# Git 命令\n\n|     修改记录     |        修改时间        |                  备注                  |\n| :--------------: | :--------------------: | :------------------------------------: |\n| 添加删除远程分支 | 2018年07月26日13:59:22 |            删除远程分支命令            |\n|   更新fork仓库   | 2018年08月10日14:16:08 | 添加fork的仓库，从主仓库更新代码的命令 |\n\n\n整理的还不够完善，以后工作中遇到了会不断补进，如有大神，有可以留言，我们一起来完善。欢迎各位留言^_^\n\n<!--more-->\n\n## Git 文件的三种状态\n\n1. 已提交：表示该文件已经被安全地保存在本地版本库中，执行过git commit。\n2. 已修改：表示修改了某个文件，但还没有提交保存\n3. 已暂存：表示把已修改的文件房子啊下次提交时要保存的清单中，也就是执行了 git add 命令。\n\n## 远程仓库与本地代码的配置\n\n将本地已经有的项目上传到远程空仓库中\n\n``` git\ncd <project path>\ngit init\ngit remote add origin <远程仓库地址>\ngit add .\ngit commit -m '提交日志'\ngit push -u origin master\n```\n\n## Git 基本配置\n\n1. 配置个人的用户名称和电子邮件地址，每次提交时，都会引用这两条信息，以用来说明是谁提交的更新。\n\n\n使用 `--global` 选项，更改的未用户主目录下的配置，如果想在某个特定的项目中使用其他的名称和邮件，只需要去掉 `--global` 选项重新配置，新的配置位于当前项目的 `.git/config` 文件中。\n\n```git\n git config --global user.name ''yourname''\n git config --global user.email  yourname@gmail.com\n```\n\n2. 基础命令\n\n> git init\n\n通过此命令会在当前目录创建一个`.git`的隐藏目录，这是`git`的第一步。\n\n> git status\n\n`git status`是最为常用的命令之一，用于检查本地项目的状态.仔细阅读红色/绿色部分，可以获得相关文件的操作信息，根据提示，判断是执行`git commit` 还是执行`git add` 操作。\n\n\n> git add\n\n将一个或多个文件添加到 `git`仓库中，只有通过 `git add` 添加的文件才会被版本控制管理。\n\n添加单个文件 `git add HelloWorld2.java`\n\n添加多个文件 `git add --a`\n\n添加当前目录所有文件 `git add .`\n\n\n> git rm --cached <file>\n\n将文件从`git`追踪列表中移除，只是逻辑删除（从版本库中移除），并不会将本地文件删除\n\n> git commit\n\n执行过 `git add` 命令后，需要将暂存的文件提交到本地仓库中，此时是真正的提交\n\n带 log 的提交： `git commit -m 'first commit'`\n\n通过编辑器提交: `git commit `\n\n带log 的提交比较方便，但当你的提交信息有一定格式或者需要提交的文字内容较多时，使用编辑器效果会更好.\n\n\n> git log\n\n查看历史提交记录， 包括**提交人**、**时间**、**信息**、**信息指纹**等.\n\n查看提交记录： `git log`\n\n单行展示记录： `git log --pretty=oneline`\n\n展示全部信息： `git log --pretty=fuller`\n\n\n> git clone <远程仓库地址>\n\n拉取远程仓库代码,此项目并不一定是你所创建\n\n例如： `git clone git@github.com:bboyfeiyu/AndroidEventBus.git`\n\n执行完成后，会在本地当前目录创建一个AndroidEventBus的目录来存放仓库代码\n\n> git remote\n\n将本地已经`init`过的工程链接到远程的空仓库中，以此来完成远程版本库的创建\n\n链接远程版本库： `git remote add origin <远程地址>`\n\n\n> git remote set-url <仓库地址>\n\nSSH 和 HTTPS 方式切换\n\n\n```git\n# ssh to https\n$ git remote set-url origin https://github.com/USERNAME/repository.git\n# https to ssh\n$ git remote set-url origin git@github.com:USERNAME/repository.git\n```\n\n可以使用 `git remote -v` 来检查当前仓库地址\n\n```\n> origin git@github.com:username/repository.git (fetch)\n> origin git@github.com:username/repository.git (push)\n```\n\nSSH 和 HTTPS 的区别：\n\n使用 SSH 方式需要在本地配置一个密钥，具体可参见[多个 SSH 公钥提交代码到不同平台](https://xiaoman.ren/2019/04/17/%E5%A4%9A%E4%B8%AA-ssh-%E5%85%AC%E9%92%A5%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0/)中介绍；\n而使用 HTTPS 的方式操作简单，弊端是需要经常输入密码。\n\n\n> git branch\n\n分支是用来管理代码版本、类型的有效工具，可根据不同的服务对象、不同的上线版本等等，来做代码分离，版本管理操作\n\n查看分支： `git branch`\n\n查看带提交信息的分支信息： `git branch -v`\n\n创建分支： `git branch <分支名称>`\n\n创建并切换分支： `git branch -b <分支名称>`\n\n切换分支： `git checkout <分支名称>`\n\n推送分支： `git push origin <分支名称>`\n\n删除分支： `git branch -d <分支名称>`\n\n删除远程分支： `git push origin :<分支名称>`\n\n合并分支： `git merge <分支名称>`\n\n\n\n> git push\n\n推送本地修改到远端服务器\n\n`git push origin master`\n\n有时因两个独立的历史，会导致推送无法达成， 通常在 `git pull` 时会提示 `fatal: refusing to merge unrelated histories  // 拒绝合并无关历史`\n\n这时可是使用 `git pull origin master --allow-unrelated-histories ` 来解决。\n\n\n\n> git tag \n\n会列出所有的 `tag` 标签信息\n\n在完成了所有功能、并且经过测试之后，可以封板上线的版本，通常会打一个标签，***这是一个很重要的功能*** \n\n建议每次上线都要做一次，便于后续的版本检索与维护，通常一个标签就代表了一个正式版本。\n\n查看本地/远程 tag 标签：`git tag`\n\n查看模糊 tag 标签： `git tag -l 'v1.4.2.*'`\n\n查看备注 tag 标签： `git tag -ln`\n\n\n查看标签信息： `git show <标签名>`\n\n\n创建本地 tag 标签： `git tag -a <标签名> -m \"<标签备注信息>\"`\n\n删除本地 tag 标签： `git tag -d <标签名>`\n\n\n推送远程 tag 标签： `git push origin <标签名>`\n\n推送全部 tag 标签： `git push origin -tags`\n\n删除远程 tag 标签： `git push origin :refs/tags/<标签名>`\n\n\n**查看远程机状态**\n> git remote 用来管理， fork 的项目，与主项目的更新操作\n\n```\ngit remote -v\ngit remote add upstream git@github.com:XXX/XXX.git\ngit fetch upstream\ngit merge upstream/master\ngit push\n```\n\n## 使用中的一些技巧\n\n**命名别名**\n复杂并超长的命令，可以通过起别名的方式方便在终端中书协\n\n```\ngit config --global alias.ci commit\ngit config --global alias.ck checkout\ngit config --global alias.st status\n```\n\n然后就可以很愉快的使用git命令了。\n```\ngit st\n```\n\n","slug":"git-command","published":1,"updated":"2019-08-12T15:33:00.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcnczeu000m16y9n6wacuog","content":"<h1 id=\"Git-命令\"><a href=\"#Git-命令\" class=\"headerlink\" title=\"Git 命令\"></a>Git 命令</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">修改记录</th>\n<th style=\"text-align:center\">修改时间</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">添加删除远程分支</td>\n<td style=\"text-align:center\">2018年07月26日13:59:22</td>\n<td style=\"text-align:center\">删除远程分支命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">更新fork仓库</td>\n<td style=\"text-align:center\">2018年08月10日14:16:08</td>\n<td style=\"text-align:center\">添加fork的仓库，从主仓库更新代码的命令</td>\n</tr>\n</tbody>\n</table>\n<p>整理的还不够完善，以后工作中遇到了会不断补进，如有大神，有可以留言，我们一起来完善。欢迎各位留言^_^</p>\n<a id=\"more\"></a>\n<h2 id=\"Git-文件的三种状态\"><a href=\"#Git-文件的三种状态\" class=\"headerlink\" title=\"Git 文件的三种状态\"></a>Git 文件的三种状态</h2><ol>\n<li>已提交：表示该文件已经被安全地保存在本地版本库中，执行过git commit。</li>\n<li>已修改：表示修改了某个文件，但还没有提交保存</li>\n<li>已暂存：表示把已修改的文件房子啊下次提交时要保存的清单中，也就是执行了 git add 命令。</li>\n</ol>\n<h2 id=\"远程仓库与本地代码的配置\"><a href=\"#远程仓库与本地代码的配置\" class=\"headerlink\" title=\"远程仓库与本地代码的配置\"></a>远程仓库与本地代码的配置</h2><p>将本地已经有的项目上传到远程空仓库中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &lt;project path&gt;</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin &lt;远程仓库地址&gt;</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &apos;提交日志&apos;</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<h2 id=\"Git-基本配置\"><a href=\"#Git-基本配置\" class=\"headerlink\" title=\"Git 基本配置\"></a>Git 基本配置</h2><ol>\n<li>配置个人的用户名称和电子邮件地址，每次提交时，都会引用这两条信息，以用来说明是谁提交的更新。</li>\n</ol>\n<p>使用 <code>--global</code> 选项，更改的未用户主目录下的配置，如果想在某个特定的项目中使用其他的名称和邮件，只需要去掉 <code>--global</code> 选项重新配置，新的配置位于当前项目的 <code>.git/config</code> 文件中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &apos;&apos;yourname&apos;&apos;</span><br><span class=\"line\">git config --global user.email  yourname@gmail.com</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>基础命令</li>\n</ol>\n<blockquote>\n<p>git init</p>\n</blockquote>\n<p>通过此命令会在当前目录创建一个<code>.git</code>的隐藏目录，这是<code>git</code>的第一步。</p>\n<blockquote>\n<p>git status</p>\n</blockquote>\n<p><code>git status</code>是最为常用的命令之一，用于检查本地项目的状态.仔细阅读红色/绿色部分，可以获得相关文件的操作信息，根据提示，判断是执行<code>git commit</code> 还是执行<code>git add</code> 操作。</p>\n<blockquote>\n<p>git add</p>\n</blockquote>\n<p>将一个或多个文件添加到 <code>git</code>仓库中，只有通过 <code>git add</code> 添加的文件才会被版本控制管理。</p>\n<p>添加单个文件 <code>git add HelloWorld2.java</code></p>\n<p>添加多个文件 <code>git add --a</code></p>\n<p>添加当前目录所有文件 <code>git add .</code></p>\n<blockquote>\n<p>git rm –cached <file></file></p>\n</blockquote>\n<p>将文件从<code>git</code>追踪列表中移除，只是逻辑删除（从版本库中移除），并不会将本地文件删除</p>\n<blockquote>\n<p>git commit</p>\n</blockquote>\n<p>执行过 <code>git add</code> 命令后，需要将暂存的文件提交到本地仓库中，此时是真正的提交</p>\n<p>带 log 的提交： <code>git commit -m &#39;first commit&#39;</code></p>\n<p>通过编辑器提交: <code>git commit</code></p>\n<p>带log 的提交比较方便，但当你的提交信息有一定格式或者需要提交的文字内容较多时，使用编辑器效果会更好.</p>\n<blockquote>\n<p>git log</p>\n</blockquote>\n<p>查看历史提交记录， 包括<strong>提交人</strong>、<strong>时间</strong>、<strong>信息</strong>、<strong>信息指纹</strong>等.</p>\n<p>查看提交记录： <code>git log</code></p>\n<p>单行展示记录： <code>git log --pretty=oneline</code></p>\n<p>展示全部信息： <code>git log --pretty=fuller</code></p>\n<blockquote>\n<p>git clone &lt;远程仓库地址&gt;</p>\n</blockquote>\n<p>拉取远程仓库代码,此项目并不一定是你所创建</p>\n<p>例如： <code>git clone git@github.com:bboyfeiyu/AndroidEventBus.git</code></p>\n<p>执行完成后，会在本地当前目录创建一个AndroidEventBus的目录来存放仓库代码</p>\n<blockquote>\n<p>git remote</p>\n</blockquote>\n<p>将本地已经<code>init</code>过的工程链接到远程的空仓库中，以此来完成远程版本库的创建</p>\n<p>链接远程版本库： <code>git remote add origin &lt;远程地址&gt;</code></p>\n<blockquote>\n<p>git remote set-url &lt;仓库地址&gt;</p>\n</blockquote>\n<p>SSH 和 HTTPS 方式切换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ssh to https</span><br><span class=\"line\">$ git remote set-url origin https://github.com/USERNAME/repository.git</span><br><span class=\"line\"># https to ssh</span><br><span class=\"line\">$ git remote set-url origin git@github.com:USERNAME/repository.git</span><br></pre></td></tr></table></figure>\n<p>可以使用 <code>git remote -v</code> 来检查当前仓库地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; origin git@github.com:username/repository.git (fetch)</span><br><span class=\"line\">&gt; origin git@github.com:username/repository.git (push)</span><br></pre></td></tr></table></figure>\n<p>SSH 和 HTTPS 的区别：</p>\n<p>使用 SSH 方式需要在本地配置一个密钥，具体可参见<a href=\"https://xiaoman.ren/2019/04/17/%E5%A4%9A%E4%B8%AA-ssh-%E5%85%AC%E9%92%A5%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0/\">多个 SSH 公钥提交代码到不同平台</a>中介绍；<br>而使用 HTTPS 的方式操作简单，弊端是需要经常输入密码。</p>\n<blockquote>\n<p>git branch</p>\n</blockquote>\n<p>分支是用来管理代码版本、类型的有效工具，可根据不同的服务对象、不同的上线版本等等，来做代码分离，版本管理操作</p>\n<p>查看分支： <code>git branch</code></p>\n<p>查看带提交信息的分支信息： <code>git branch -v</code></p>\n<p>创建分支： <code>git branch &lt;分支名称&gt;</code></p>\n<p>创建并切换分支： <code>git branch -b &lt;分支名称&gt;</code></p>\n<p>切换分支： <code>git checkout &lt;分支名称&gt;</code></p>\n<p>推送分支： <code>git push origin &lt;分支名称&gt;</code></p>\n<p>删除分支： <code>git branch -d &lt;分支名称&gt;</code></p>\n<p>删除远程分支： <code>git push origin :&lt;分支名称&gt;</code></p>\n<p>合并分支： <code>git merge &lt;分支名称&gt;</code></p>\n<blockquote>\n<p>git push</p>\n</blockquote>\n<p>推送本地修改到远端服务器</p>\n<p><code>git push origin master</code></p>\n<p>有时因两个独立的历史，会导致推送无法达成， 通常在 <code>git pull</code> 时会提示 <code>fatal: refusing to merge unrelated histories  // 拒绝合并无关历史</code></p>\n<p>这时可是使用 <code>git pull origin master --allow-unrelated-histories</code> 来解决。</p>\n<blockquote>\n<p>git tag </p>\n</blockquote>\n<p>会列出所有的 <code>tag</code> 标签信息</p>\n<p>在完成了所有功能、并且经过测试之后，可以封板上线的版本，通常会打一个标签，<strong><em>这是一个很重要的功能</em></strong> </p>\n<p>建议每次上线都要做一次，便于后续的版本检索与维护，通常一个标签就代表了一个正式版本。</p>\n<p>查看本地/远程 tag 标签：<code>git tag</code></p>\n<p>查看模糊 tag 标签： <code>git tag -l &#39;v1.4.2.*&#39;</code></p>\n<p>查看备注 tag 标签： <code>git tag -ln</code></p>\n<p>查看标签信息： <code>git show &lt;标签名&gt;</code></p>\n<p>创建本地 tag 标签： <code>git tag -a &lt;标签名&gt; -m &quot;&lt;标签备注信息&gt;&quot;</code></p>\n<p>删除本地 tag 标签： <code>git tag -d &lt;标签名&gt;</code></p>\n<p>推送远程 tag 标签： <code>git push origin &lt;标签名&gt;</code></p>\n<p>推送全部 tag 标签： <code>git push origin -tags</code></p>\n<p>删除远程 tag 标签： <code>git push origin :refs/tags/&lt;标签名&gt;</code></p>\n<p><strong>查看远程机状态</strong></p>\n<blockquote>\n<p>git remote 用来管理， fork 的项目，与主项目的更新操作</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br><span class=\"line\">git remote add upstream git@github.com:XXX/XXX.git</span><br><span class=\"line\">git fetch upstream</span><br><span class=\"line\">git merge upstream/master</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用中的一些技巧\"><a href=\"#使用中的一些技巧\" class=\"headerlink\" title=\"使用中的一些技巧\"></a>使用中的一些技巧</h2><p><strong>命名别名</strong><br>复杂并超长的命令，可以通过起别名的方式方便在终端中书协</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.ci commit</span><br><span class=\"line\">git config --global alias.ck checkout</span><br><span class=\"line\">git config --global alias.st status</span><br></pre></td></tr></table></figure>\n<p>然后就可以很愉快的使用git命令了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git st</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Git-命令\"><a href=\"#Git-命令\" class=\"headerlink\" title=\"Git 命令\"></a>Git 命令</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">修改记录</th>\n<th style=\"text-align:center\">修改时间</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">添加删除远程分支</td>\n<td style=\"text-align:center\">2018年07月26日13:59:22</td>\n<td style=\"text-align:center\">删除远程分支命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">更新fork仓库</td>\n<td style=\"text-align:center\">2018年08月10日14:16:08</td>\n<td style=\"text-align:center\">添加fork的仓库，从主仓库更新代码的命令</td>\n</tr>\n</tbody>\n</table>\n<p>整理的还不够完善，以后工作中遇到了会不断补进，如有大神，有可以留言，我们一起来完善。欢迎各位留言^_^</p>","more":"<h2 id=\"Git-文件的三种状态\"><a href=\"#Git-文件的三种状态\" class=\"headerlink\" title=\"Git 文件的三种状态\"></a>Git 文件的三种状态</h2><ol>\n<li>已提交：表示该文件已经被安全地保存在本地版本库中，执行过git commit。</li>\n<li>已修改：表示修改了某个文件，但还没有提交保存</li>\n<li>已暂存：表示把已修改的文件房子啊下次提交时要保存的清单中，也就是执行了 git add 命令。</li>\n</ol>\n<h2 id=\"远程仓库与本地代码的配置\"><a href=\"#远程仓库与本地代码的配置\" class=\"headerlink\" title=\"远程仓库与本地代码的配置\"></a>远程仓库与本地代码的配置</h2><p>将本地已经有的项目上传到远程空仓库中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &lt;project path&gt;</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin &lt;远程仓库地址&gt;</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &apos;提交日志&apos;</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<h2 id=\"Git-基本配置\"><a href=\"#Git-基本配置\" class=\"headerlink\" title=\"Git 基本配置\"></a>Git 基本配置</h2><ol>\n<li>配置个人的用户名称和电子邮件地址，每次提交时，都会引用这两条信息，以用来说明是谁提交的更新。</li>\n</ol>\n<p>使用 <code>--global</code> 选项，更改的未用户主目录下的配置，如果想在某个特定的项目中使用其他的名称和邮件，只需要去掉 <code>--global</code> 选项重新配置，新的配置位于当前项目的 <code>.git/config</code> 文件中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &apos;&apos;yourname&apos;&apos;</span><br><span class=\"line\">git config --global user.email  yourname@gmail.com</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>基础命令</li>\n</ol>\n<blockquote>\n<p>git init</p>\n</blockquote>\n<p>通过此命令会在当前目录创建一个<code>.git</code>的隐藏目录，这是<code>git</code>的第一步。</p>\n<blockquote>\n<p>git status</p>\n</blockquote>\n<p><code>git status</code>是最为常用的命令之一，用于检查本地项目的状态.仔细阅读红色/绿色部分，可以获得相关文件的操作信息，根据提示，判断是执行<code>git commit</code> 还是执行<code>git add</code> 操作。</p>\n<blockquote>\n<p>git add</p>\n</blockquote>\n<p>将一个或多个文件添加到 <code>git</code>仓库中，只有通过 <code>git add</code> 添加的文件才会被版本控制管理。</p>\n<p>添加单个文件 <code>git add HelloWorld2.java</code></p>\n<p>添加多个文件 <code>git add --a</code></p>\n<p>添加当前目录所有文件 <code>git add .</code></p>\n<blockquote>\n<p>git rm –cached <file></file></p>\n</blockquote>\n<p>将文件从<code>git</code>追踪列表中移除，只是逻辑删除（从版本库中移除），并不会将本地文件删除</p>\n<blockquote>\n<p>git commit</p>\n</blockquote>\n<p>执行过 <code>git add</code> 命令后，需要将暂存的文件提交到本地仓库中，此时是真正的提交</p>\n<p>带 log 的提交： <code>git commit -m &#39;first commit&#39;</code></p>\n<p>通过编辑器提交: <code>git commit</code></p>\n<p>带log 的提交比较方便，但当你的提交信息有一定格式或者需要提交的文字内容较多时，使用编辑器效果会更好.</p>\n<blockquote>\n<p>git log</p>\n</blockquote>\n<p>查看历史提交记录， 包括<strong>提交人</strong>、<strong>时间</strong>、<strong>信息</strong>、<strong>信息指纹</strong>等.</p>\n<p>查看提交记录： <code>git log</code></p>\n<p>单行展示记录： <code>git log --pretty=oneline</code></p>\n<p>展示全部信息： <code>git log --pretty=fuller</code></p>\n<blockquote>\n<p>git clone &lt;远程仓库地址&gt;</p>\n</blockquote>\n<p>拉取远程仓库代码,此项目并不一定是你所创建</p>\n<p>例如： <code>git clone git@github.com:bboyfeiyu/AndroidEventBus.git</code></p>\n<p>执行完成后，会在本地当前目录创建一个AndroidEventBus的目录来存放仓库代码</p>\n<blockquote>\n<p>git remote</p>\n</blockquote>\n<p>将本地已经<code>init</code>过的工程链接到远程的空仓库中，以此来完成远程版本库的创建</p>\n<p>链接远程版本库： <code>git remote add origin &lt;远程地址&gt;</code></p>\n<blockquote>\n<p>git remote set-url &lt;仓库地址&gt;</p>\n</blockquote>\n<p>SSH 和 HTTPS 方式切换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ssh to https</span><br><span class=\"line\">$ git remote set-url origin https://github.com/USERNAME/repository.git</span><br><span class=\"line\"># https to ssh</span><br><span class=\"line\">$ git remote set-url origin git@github.com:USERNAME/repository.git</span><br></pre></td></tr></table></figure>\n<p>可以使用 <code>git remote -v</code> 来检查当前仓库地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; origin git@github.com:username/repository.git (fetch)</span><br><span class=\"line\">&gt; origin git@github.com:username/repository.git (push)</span><br></pre></td></tr></table></figure>\n<p>SSH 和 HTTPS 的区别：</p>\n<p>使用 SSH 方式需要在本地配置一个密钥，具体可参见<a href=\"https://xiaoman.ren/2019/04/17/%E5%A4%9A%E4%B8%AA-ssh-%E5%85%AC%E9%92%A5%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0/\">多个 SSH 公钥提交代码到不同平台</a>中介绍；<br>而使用 HTTPS 的方式操作简单，弊端是需要经常输入密码。</p>\n<blockquote>\n<p>git branch</p>\n</blockquote>\n<p>分支是用来管理代码版本、类型的有效工具，可根据不同的服务对象、不同的上线版本等等，来做代码分离，版本管理操作</p>\n<p>查看分支： <code>git branch</code></p>\n<p>查看带提交信息的分支信息： <code>git branch -v</code></p>\n<p>创建分支： <code>git branch &lt;分支名称&gt;</code></p>\n<p>创建并切换分支： <code>git branch -b &lt;分支名称&gt;</code></p>\n<p>切换分支： <code>git checkout &lt;分支名称&gt;</code></p>\n<p>推送分支： <code>git push origin &lt;分支名称&gt;</code></p>\n<p>删除分支： <code>git branch -d &lt;分支名称&gt;</code></p>\n<p>删除远程分支： <code>git push origin :&lt;分支名称&gt;</code></p>\n<p>合并分支： <code>git merge &lt;分支名称&gt;</code></p>\n<blockquote>\n<p>git push</p>\n</blockquote>\n<p>推送本地修改到远端服务器</p>\n<p><code>git push origin master</code></p>\n<p>有时因两个独立的历史，会导致推送无法达成， 通常在 <code>git pull</code> 时会提示 <code>fatal: refusing to merge unrelated histories  // 拒绝合并无关历史</code></p>\n<p>这时可是使用 <code>git pull origin master --allow-unrelated-histories</code> 来解决。</p>\n<blockquote>\n<p>git tag </p>\n</blockquote>\n<p>会列出所有的 <code>tag</code> 标签信息</p>\n<p>在完成了所有功能、并且经过测试之后，可以封板上线的版本，通常会打一个标签，<strong><em>这是一个很重要的功能</em></strong> </p>\n<p>建议每次上线都要做一次，便于后续的版本检索与维护，通常一个标签就代表了一个正式版本。</p>\n<p>查看本地/远程 tag 标签：<code>git tag</code></p>\n<p>查看模糊 tag 标签： <code>git tag -l &#39;v1.4.2.*&#39;</code></p>\n<p>查看备注 tag 标签： <code>git tag -ln</code></p>\n<p>查看标签信息： <code>git show &lt;标签名&gt;</code></p>\n<p>创建本地 tag 标签： <code>git tag -a &lt;标签名&gt; -m &quot;&lt;标签备注信息&gt;&quot;</code></p>\n<p>删除本地 tag 标签： <code>git tag -d &lt;标签名&gt;</code></p>\n<p>推送远程 tag 标签： <code>git push origin &lt;标签名&gt;</code></p>\n<p>推送全部 tag 标签： <code>git push origin -tags</code></p>\n<p>删除远程 tag 标签： <code>git push origin :refs/tags/&lt;标签名&gt;</code></p>\n<p><strong>查看远程机状态</strong></p>\n<blockquote>\n<p>git remote 用来管理， fork 的项目，与主项目的更新操作</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br><span class=\"line\">git remote add upstream git@github.com:XXX/XXX.git</span><br><span class=\"line\">git fetch upstream</span><br><span class=\"line\">git merge upstream/master</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用中的一些技巧\"><a href=\"#使用中的一些技巧\" class=\"headerlink\" title=\"使用中的一些技巧\"></a>使用中的一些技巧</h2><p><strong>命名别名</strong><br>复杂并超长的命令，可以通过起别名的方式方便在终端中书协</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.ci commit</span><br><span class=\"line\">git config --global alias.ck checkout</span><br><span class=\"line\">git config --global alias.st status</span><br></pre></td></tr></table></figure>\n<p>然后就可以很愉快的使用git命令了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git st</span><br></pre></td></tr></table></figure></p>"},{"title":"OkHttp Intercept","date":"2019-04-30T12:42:02.000Z","_content":"\n\nOKHttp 在开发中经常用到,这里介绍一下 OKHttp 的拦截器(interceptor)的几个使用例子\n\n\n\n要是用拦截器很简单,我们只需要自定义一个 interceptor 类, 并实现 Interceptor 接口, 同时重写 intercept 方法.\n\n\n\n这里介绍两种 Interceptor 的实例\n\n\n<!-- more -->\n\n## Log 日志 (LogInterceptor)\n\nLog 在开发调试中的重要性, 不言而喻, 一个好的日志数据,能够为开发时提供很多帮助,可以通过 Log 来获取当前程序的执行状态, 顺序等等.\n\n\n\n这里介绍的 Log 日志拦截器,主要是负责在网络请求时,截获请求中的信息,并将请求信息以 Log 的方式输出到控制台上,可展现当前请求地址,请求参数,以及请求结果等.\n\n\n\n话不多说, 上代码.\n\n\n\n```java\n/**\n* 自定义 log 拦截器,输入请求地址,请求参,请求结果\n*/\npublic class LogInterceptor implements Interceptor {\n\n        @Override\n        public Response intercept(Chain chain) throws IOException {\n            // 拦截请求信息,获取请求地址及请求参数\n            Request request = chain.request();\n\n            long t1 = System.nanoTime();\n            // 获取请求方式\n            String method = request.method();\n            if (\"POST\".equals(method)) {\n                StringBuilder sb = new StringBuilder();\n                if (request.body() instanceof FormBody) {\n                    FormBody body = (FormBody) request.body();\n                    for (int i = 0; i < body.size(); i++) {\n                        sb.append(body.encodedName(i) + \"=\" + body.encodedValue(i) + \",\");\n                    }\n                    sb.delete(sb.length() - 1, sb.length());\n                    LogUtils.d(TAG, String.format(\"Sending request %s on %s %n%s %nRequestParams:{%s}\",\n                            request.url(), chain.connection(), request.headers(), sb.toString()));\n                }\n            } else {\n                LogUtils.d(TAG, String.format(\"Sending request %s on %s %n%s\",\n                        request.url(), chain.connection(), request.headers()));\n            }\n\t\t\t// 获取响应信息\n            Response response = chain.proceed(request);\n            long t2 = System.nanoTime();\n            LogUtils.d(TAG, String.format(\"Received response for %s in %.1fms%n%s\",\n                    response.request().url(), (t2 - t1) / 1e6d, response.headers()));\n\n            MediaType contentType = response.body().contentType();\n            String content = response.body().string();\n            LogUtils.d(TAG, content);\n            ResponseBody wrappedBody = ResponseBody.create(contentType, content);\n            return response.newBuilder().body(wrappedBody).build();\n        }\n    }\n```\n\n\n\n\n\n## 加参\n\n\n\n加参的意义在于,在请求过程中, 需要传递一些基本参数,这些参数是基本保持不变的, 而这些参数又是后台需要校验的依靠,我们俗称他们为**公参**, 如果在请求过程中在每一个接口里面都去添加这些参数,显得非常繁琐,而且麻烦,后续人员接手,又会不知所措,维护起来相当不方便.\n\n\n\n因此,在这里我们还是通过请求拦截器,通过拦截器去添加这些参数.\n\n### 公参拦截器\n\n在请求中,增加一些公共的参数.\n\n```java\npublic class CommonParamsInterceptor implements Interceptor {\n\n    private Map<String, String> queryParamsMap = new HashMap<>();\n    private Map<String, String> paramsMap = new HashMap<>();\n    private Map<String, String> headerParamsMap = new HashMap<>();\n    private List<String> headerLinesList = new ArrayList<>();\n\n    @Override\n    public Response intercept(Chain chain) throws IOException {\n\n        Request request = chain.request();\n        Request.Builder requestBuilder = request.newBuilder();\n\n        // process header params inject\n        Headers.Builder headerBuilder = request.headers().newBuilder();\n        if (headerParamsMap.size() > 0) {\n            Iterator iterator = headerParamsMap.entrySet().iterator();\n            while (iterator.hasNext()) {\n                Map.Entry entry = (Map.Entry) iterator.next();\n                headerBuilder.add((String) entry.getKey(), (String) entry.getValue());\n            }\n        }\n\n        if (headerLinesList.size() > 0) {\n            for (String line : headerLinesList) {\n                headerBuilder.add(line);\n            }\n            requestBuilder.headers(headerBuilder.build());\n        }\n        // process header params end\n\n\n        // process queryParams inject whatever it's GET or POST\n        if (queryParamsMap.size() > 0 && \"GET\".equals(request.method())) {\n//        if (queryParamsMap.size() > 0) {\n            request = injectParamsIntoUrl(request, requestBuilder, queryParamsMap);\n        }\n\n        // process post body inject\n        if (paramsMap != null && paramsMap.size() > 0 && \"POST\".equals(request.method())) {\n            if (request.body() instanceof FormBody) {\n                FormBody.Builder newFormBodyBuilder = new FormBody.Builder();\n                if (paramsMap.size() > 0) {\n                    Iterator iterator = paramsMap.entrySet().iterator();\n                    while (iterator.hasNext()) {\n                        Map.Entry entry = (Map.Entry) iterator.next();\n                        newFormBodyBuilder.add((String) entry.getKey(), (String) entry.getValue());\n                    }\n                }\n\n                FormBody oldFormBody = (FormBody) request.body();\n                int paramSize = oldFormBody.size();\n                if (paramSize > 0) {\n                    for (int i = 0; i < paramSize; i++) {\n                        newFormBodyBuilder.add(oldFormBody.name(i), oldFormBody.value(i));\n                    }\n                }\n\n                requestBuilder.post(newFormBodyBuilder.build());\n                request = requestBuilder.build();\n            } else if (request.body() instanceof MultipartBody) {\n                MultipartBody.Builder multipartBuilder = new MultipartBody.Builder().setType(MultipartBody.FORM);\n\n                Iterator iterator = paramsMap.entrySet().iterator();\n                while (iterator.hasNext()) {\n                    Map.Entry entry = (Map.Entry) iterator.next();\n                    multipartBuilder.addFormDataPart((String) entry.getKey(), (String) entry.getValue());\n                }\n\n                List<MultipartBody.Part> oldParts = ((MultipartBody) request.body()).parts();\n                if (oldParts != null && oldParts.size() > 0) {\n                    for (MultipartBody.Part part : oldParts) {\n                        multipartBuilder.addPart(part);\n                    }\n                }\n\n                requestBuilder.post(multipartBuilder.build());\n                request = requestBuilder.build();\n            }\n\n        }\n        return chain.proceed(request);\n    }\n\n    private boolean canInjectIntoBody(Request request) {\n        if (request == null) {\n            return false;\n        }\n        if (!TextUtils.equals(request.method(), \"POST\")) {\n            return false;\n        }\n        RequestBody body = request.body();\n        if (body == null) {\n            return false;\n        }\n        MediaType mediaType = body.contentType();\n        if (mediaType == null) {\n            return false;\n        }\n        if (!TextUtils.equals(mediaType.subtype(), \"x-www-form-urlencoded\")) {\n            return false;\n        }\n        return true;\n    }\n\n    // func to inject params into url\n    private Request injectParamsIntoUrl(Request request, Request.Builder requestBuilder, Map<String, String> paramsMap) {\n        HttpUrl.Builder httpUrlBuilder = request.url().newBuilder();\n        if (paramsMap.size() > 0) {\n            Iterator iterator = paramsMap.entrySet().iterator();\n            while (iterator.hasNext()) {\n                Map.Entry entry = (Map.Entry) iterator.next();\n                httpUrlBuilder.addEncodedQueryParameter((String) entry.getKey(), (String) entry.getValue());\n            }\n            requestBuilder.url(httpUrlBuilder.build());\n            return requestBuilder.build();\n        }\n\n        return request;\n    }\n\n    private static String bodyToString(final RequestBody request) {\n        try {\n            final RequestBody copy = request;\n            final Buffer buffer = new Buffer();\n            if (copy != null)\n                copy.writeTo(buffer);\n            else\n                return \"\";\n            return buffer.readUtf8();\n        } catch (final IOException e) {\n            return \"did not work\";\n        }\n    }\n\n    public static class Builder {\n\n        CommonParamsInterceptor interceptor;\n\n        public Builder() {\n            interceptor = new CommonParamsInterceptor();\n        }\n\n        public Builder addParam(String key, String value) {\n            interceptor.paramsMap.put(key, value);\n            return this;\n        }\n\n        public Builder addParamsMap(Map<String, String> paramsMap) {\n            interceptor.paramsMap.putAll(paramsMap);\n            return this;\n        }\n\n        public Builder addHeaderParam(String key, String value) {\n            interceptor.headerParamsMap.put(key, value);\n            return this;\n        }\n\n        public Builder addHeaderParamsMap(Map<String, String> headerParamsMap) {\n            interceptor.headerParamsMap.putAll(headerParamsMap);\n            return this;\n        }\n\n        public Builder addHeaderLine(String headerLine) {\n            int index = headerLine.indexOf(\":\");\n            if (index == -1) {\n                throw new IllegalArgumentException(\"Unexpected header: \" + headerLine);\n            }\n            interceptor.headerLinesList.add(headerLine);\n            return this;\n        }\n\n        public Builder addHeaderLinesList(List<String> headerLinesList) {\n            for (String headerLine : headerLinesList) {\n                int index = headerLine.indexOf(\":\");\n                if (index == -1) {\n                    throw new IllegalArgumentException(\"Unexpected header: \" + headerLine);\n                }\n                interceptor.headerLinesList.add(headerLine);\n            }\n            return this;\n        }\n\n        public Builder addQueryParam(String key, String value) {\n            interceptor.queryParamsMap.put(key, value);\n            return this;\n        }\n\n        public Builder addQueryParamsMap(Map<String, String> queryParamsMap) {\n            interceptor.queryParamsMap.putAll(queryParamsMap);\n            return this;\n        }\n\n        public CommonParamsInterceptor build() {\n            return interceptor;\n        }\n    }\n}\n```\n\n\n\n### 加签拦截器\n\n互联网是一个开放的环境,危险无处不在,加密通信是安全的基础.\n\n加密的方式又有很多,比如对称加密/非对称加密/Hash(严格的说不是加密),这里先不对加密进行介绍,我们聊聊加签;\n\n加签,其实就是给报文做一个摘要,相同的签名算法得到的摘要是相同的,比如MD5, SH1, SH256等, 简单的加签并不能防止篡改,因为攻击者可以篡改后,自己生成新的签名.服务端验签还是可以通过的,因此加签时一定要包含一些私有的东西,比如私钥.\n\n\n\n这里介绍一种加签方式,\n\n>  加密规则\n\n1.  根据请求参数 key 进行排序\n2.  按排好的顺序组装成 key=value&key=value 形式的字符串\n3.  将上述字符串拼接  ,最终形成 key=value&key=value的字符串\n4.  将字符串 md5, 生成 auth.\n\n\n\n一个简单的加签逻辑就是这样,下面代码就是对这种规则的实现,看代码↓↓↓↓\n\n```java\npublic class AuthorizeInterceptor implements Interceptor {\n\n    private static final String TAG = \"AuthorizeInterceptor\";\n\n    /**\n     * 生成 auth 的私钥\n     */\n    private String authKey;\n\n    /**\n     * 当前设备 mid,用来生成 auth\n     * 数据由 Builder 类传入\n     */\n    private String mid = \"\";\n\n    private AuthorizeInterceptor() {\n    }\n\n    @Override\n    public Response intercept(Chain chain) throws IOException {\n        Request request = chain.request();\n        Request.Builder requestBuilder = request.newBuilder();\n        String url = request.url().toString();\n        LogUtils.d(TAG, url);\n        if (\"POST\".equals(request.method())) {\n            request = injectionParamIntoBody(request, requestBuilder);\n        } else if (\"GET\".equals(request.method())) {\n            request = injectionAuthIntoUrl(request, requestBuilder);\n        }\n        return chain.proceed(request);\n    }\n\n    /**\n     * GET 请求方式, 生成授权和添加时间戳\n     *\n     * @param request\n     * @param requestBuilder\n     * @return\n     */\n    private Request injectionAuthIntoUrl(Request request, Request.Builder requestBuilder) {\n        //获取到请求地址api\n        HttpUrl newHttpUrl = request.url();\n        TreeMap<String, String> authMap = new TreeMap<>();\n        //通过请求地址(最初始的请求地址)获取到参数列表\n        Set<String> parameterNames = newHttpUrl.queryParameterNames();\n        for (String key : parameterNames) {\n            //循环参数列表,获取参数value,\n                String paramValue = newHttpUrl.queryParameter(key);\n                if (!TextUtils.isEmpty(paramValue)) {\n                    authMap.put(key, paramValue);\n                }\n            \n        }\n        HttpUrl.Builder newBuilder =\n                request.url().newBuilder()\n                        .addEncodedQueryParameter(\"auth\", assembleAuth(authMap, false));\n        requestBuilder.url(newBuilder.build());\n        return requestBuilder.build();\n    }\n\n    /**\n     * 将参数注入到 POST 请求的 body 中\n     *\n     * @param request\n     * @param requestBuilder\n     * @return\n     */\n    private Request injectionParamIntoBody(Request request, Request.Builder requestBuilder) {\n        if (request.body() instanceof FormBody) {\n            // 处理正常表单请求方式\n            FormBody oldFormBody = (FormBody) request.body();\n            return assembleFormBody(request, oldFormBody, requestBuilder);\n        } else if (request.body() instanceof MultipartBody) {\n            return assembleMultipartBody(request, requestBuilder);\n        } else {\n            return request;\n        }\n    }\n\n    /**\n     * 构建流媒体参数的 body\n     *\n     * @param request\n     * @param builder\n     * @return\n     */\n    private Request assembleMultipartBody(Request request, Request.Builder builder) {\n        // 处理流的请求方式\n        MultipartBody body = (MultipartBody) request.body();\n        TreeMap<String, String> authMap = new TreeMap<>();\n        // 获取参数 key 及 value 数据, 将数据写入到 TreeMap 中进行排序\n        if (body != null && body.parts().size() > 0) {\n            for (MultipartBody.Part part : body.parts()) {\n                // 只处理 contentType 为空,或为 text 的情况, image 上传图片的字段,不进行处理\n                if (part.body().contentType() == null\n                        || !\"image\".equals(part.body().contentType().type())\n                        || \"text\".equals(part.body().contentType().type())) {\n                    Headers headers = part.headers();\n                    // 从 header 中获取 Key, form-data; name= 的字段过滤获取key\n                    // 筛选掉 basic, 获取到当前 header,对应的 RequestBody, 通过 buffer 的方式,获取到 value\n                    // 将 key 和 value 填充到 TreeMap 中\n                    for (int i = 0; i < headers.names().size(); i++) {\n                        String headerName = headers.value(i);\n                        if (headerName.contains(\"form-data; name=\")) {\n                            String key = headerName.replace(\"form-data; name=\", \"\").replace(\"\\\"\", \"\");\n                                String value = body2String(part.body());\n                                if (!TextUtils.isEmpty(value)) {\n                                    authMap.put(key, body2String(part.body()));\n                                }\n                                                   }\n                    }\n                }\n            }\n        }\n\n        MultipartBody.Builder multipartBuilder = new MultipartBody.Builder().setType(MultipartBody.FORM);\n        multipartBuilder.addFormDataPart(\"auth\", assembleAuth(authMap, false));\n        List<MultipartBody.Part> oldParts = ((MultipartBody) request.body()).parts();\n        if (oldParts != null && oldParts.size() > 0) {\n            for (MultipartBody.Part part : oldParts) {\n                multipartBuilder.addPart(part);\n            }\n        }\n        builder.post(multipartBuilder.build());\n        return builder.build();\n    }\n\n    /**\n     * 构建 Auth 数据\n     * <p>\n     * TreeMap 数据,按照字母顺序自动排序后,遍历数据,拼接成 key=value&key=value 的形式,\n     * Map 拼接完成后,在其后需要再次拼接上\n     * <p>\n     * 最后将数据 MD5 转化为 32 位小写并返回\n     *\n     * @param treeMap      构建 Auth 的具体数据\n     * @param isNeedDecode 是否需要解码\n     * @return 返回 auth 数据 \n     */\n    private String assembleAuth(TreeMap<String, String> treeMap, boolean isNeedDecode) {\n        StringBuilder stringBuilder = new StringBuilder();\n        if (treeMap.size() > 0) {\n            for (Map.Entry<String, String> stringStringEntry : treeMap.entrySet()) {\n                try {\n                    stringBuilder.append(stringStringEntry.getKey())\n                            .append(\"=\")\n                            .append(isNeedDecode\n                                    ? URLDecoder.decode(stringStringEntry.getValue(), \"UTF-8\")\n                                    : stringStringEntry.getValue())\n                            .append(\"&\");\n                } catch (UnsupportedEncodingException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        treeMap.clear();\n        stringBuilder\n                .append(authKey);\n        Log.d(TAG, stringBuilder.toString());\n        return MD5.MD5(stringBuilder.toString());\n    }\n\n    /**\n     * body 转 string 获取实际参数值\n     *\n     * @param body Part body\n     * @return part 中写如的参数数据\n     */\n    private String body2String(RequestBody body) {\n        if (body != null) {\n            Buffer buffer = new Buffer();\n            try {\n                body.writeTo(buffer);\n                Charset charset = Charset.forName(\"UTF-8\");\n                MediaType contentType = body.contentType();\n                if (contentType != null) {\n                    charset = contentType.charset(charset);\n                }\n                assert charset != null;\n                return buffer.readString(charset);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return \"\";\n    }\n\n    /**\n     * 组装 Form 表单请求数据\n     *\n     * @param request\n     * @param oldFormBody\n     * @param requestBuilder\n     * @return\n     */\n    private Request assembleFormBody(Request request, FormBody oldFormBody, Request.Builder requestBuilder) {\n        TreeMap<String, String> authMap = new TreeMap<>();\n        // 遍历请求参数,非空参数,添加到集合中\n        for (int i = 0; i < oldFormBody.size(); i++) {\n            if (!TextUtils.isEmpty(oldFormBody.encodedValue(i))) {\n                authMap.put(oldFormBody.encodedName(i), oldFormBody.encodedValue(i));\n            }\n        }\n        if (authMap.size() != 0) {\n            // 生成 auth 数据\n            FormBody.Builder newFormBody = new FormBody.Builder();\n            for (int i = 0; i < oldFormBody.size(); i++) {\n                newFormBody.addEncoded(oldFormBody.encodedName(i), oldFormBody.encodedValue(i));\n            }\n            newFormBody.add(\"auth\", assembleAuth(authMap, true));\n            requestBuilder.method(request.method(), newFormBody.build());\n            return requestBuilder.build();\n        }\n\n        return request;\n    }\n\n\n    /**\n     * Builder 构造函数,用来设置 Authorize 的相关参数,及创建工作\n     */\n    public static class Builder {\n        AuthorizeInterceptor authorizeInterceptor;\n\n        public Builder() {\n            authorizeInterceptor = new AuthorizeInterceptor();\n        }\n\n        public Builder setMid(String mid) {\n            authorizeInterceptor.mid = mid;\n            return this;\n        }\n\n        public Builder setAuthKey(String key) {\n            authorizeInterceptor.authKey = key;\n            return this;\n        }\n\n        public AuthorizeInterceptor build() {\n            return authorizeInterceptor;\n        }\n    }\n}\n```\n\n\n\n该加签方式,讲请求参数拼接为 `key=value` 的方式, 难点在于如何从 OkHttp 中获取这些参数,在 GET 请求和 POST 的处理方式又不同,代码中 POST 请求方式,又会根据请求传递的 `contentType` 而又有所不同,这里介绍了`Form`表单提交和 `Multipart` 上传文件的参数获取方式,其他的请举一反三.\n\n","source":"_posts/OkHttp-Intercept.md","raw":"---\ntitle: OkHttp Intercept\ndate: 2019-04-30 20:42:02\ntags: OkHttp\n---\n\n\nOKHttp 在开发中经常用到,这里介绍一下 OKHttp 的拦截器(interceptor)的几个使用例子\n\n\n\n要是用拦截器很简单,我们只需要自定义一个 interceptor 类, 并实现 Interceptor 接口, 同时重写 intercept 方法.\n\n\n\n这里介绍两种 Interceptor 的实例\n\n\n<!-- more -->\n\n## Log 日志 (LogInterceptor)\n\nLog 在开发调试中的重要性, 不言而喻, 一个好的日志数据,能够为开发时提供很多帮助,可以通过 Log 来获取当前程序的执行状态, 顺序等等.\n\n\n\n这里介绍的 Log 日志拦截器,主要是负责在网络请求时,截获请求中的信息,并将请求信息以 Log 的方式输出到控制台上,可展现当前请求地址,请求参数,以及请求结果等.\n\n\n\n话不多说, 上代码.\n\n\n\n```java\n/**\n* 自定义 log 拦截器,输入请求地址,请求参,请求结果\n*/\npublic class LogInterceptor implements Interceptor {\n\n        @Override\n        public Response intercept(Chain chain) throws IOException {\n            // 拦截请求信息,获取请求地址及请求参数\n            Request request = chain.request();\n\n            long t1 = System.nanoTime();\n            // 获取请求方式\n            String method = request.method();\n            if (\"POST\".equals(method)) {\n                StringBuilder sb = new StringBuilder();\n                if (request.body() instanceof FormBody) {\n                    FormBody body = (FormBody) request.body();\n                    for (int i = 0; i < body.size(); i++) {\n                        sb.append(body.encodedName(i) + \"=\" + body.encodedValue(i) + \",\");\n                    }\n                    sb.delete(sb.length() - 1, sb.length());\n                    LogUtils.d(TAG, String.format(\"Sending request %s on %s %n%s %nRequestParams:{%s}\",\n                            request.url(), chain.connection(), request.headers(), sb.toString()));\n                }\n            } else {\n                LogUtils.d(TAG, String.format(\"Sending request %s on %s %n%s\",\n                        request.url(), chain.connection(), request.headers()));\n            }\n\t\t\t// 获取响应信息\n            Response response = chain.proceed(request);\n            long t2 = System.nanoTime();\n            LogUtils.d(TAG, String.format(\"Received response for %s in %.1fms%n%s\",\n                    response.request().url(), (t2 - t1) / 1e6d, response.headers()));\n\n            MediaType contentType = response.body().contentType();\n            String content = response.body().string();\n            LogUtils.d(TAG, content);\n            ResponseBody wrappedBody = ResponseBody.create(contentType, content);\n            return response.newBuilder().body(wrappedBody).build();\n        }\n    }\n```\n\n\n\n\n\n## 加参\n\n\n\n加参的意义在于,在请求过程中, 需要传递一些基本参数,这些参数是基本保持不变的, 而这些参数又是后台需要校验的依靠,我们俗称他们为**公参**, 如果在请求过程中在每一个接口里面都去添加这些参数,显得非常繁琐,而且麻烦,后续人员接手,又会不知所措,维护起来相当不方便.\n\n\n\n因此,在这里我们还是通过请求拦截器,通过拦截器去添加这些参数.\n\n### 公参拦截器\n\n在请求中,增加一些公共的参数.\n\n```java\npublic class CommonParamsInterceptor implements Interceptor {\n\n    private Map<String, String> queryParamsMap = new HashMap<>();\n    private Map<String, String> paramsMap = new HashMap<>();\n    private Map<String, String> headerParamsMap = new HashMap<>();\n    private List<String> headerLinesList = new ArrayList<>();\n\n    @Override\n    public Response intercept(Chain chain) throws IOException {\n\n        Request request = chain.request();\n        Request.Builder requestBuilder = request.newBuilder();\n\n        // process header params inject\n        Headers.Builder headerBuilder = request.headers().newBuilder();\n        if (headerParamsMap.size() > 0) {\n            Iterator iterator = headerParamsMap.entrySet().iterator();\n            while (iterator.hasNext()) {\n                Map.Entry entry = (Map.Entry) iterator.next();\n                headerBuilder.add((String) entry.getKey(), (String) entry.getValue());\n            }\n        }\n\n        if (headerLinesList.size() > 0) {\n            for (String line : headerLinesList) {\n                headerBuilder.add(line);\n            }\n            requestBuilder.headers(headerBuilder.build());\n        }\n        // process header params end\n\n\n        // process queryParams inject whatever it's GET or POST\n        if (queryParamsMap.size() > 0 && \"GET\".equals(request.method())) {\n//        if (queryParamsMap.size() > 0) {\n            request = injectParamsIntoUrl(request, requestBuilder, queryParamsMap);\n        }\n\n        // process post body inject\n        if (paramsMap != null && paramsMap.size() > 0 && \"POST\".equals(request.method())) {\n            if (request.body() instanceof FormBody) {\n                FormBody.Builder newFormBodyBuilder = new FormBody.Builder();\n                if (paramsMap.size() > 0) {\n                    Iterator iterator = paramsMap.entrySet().iterator();\n                    while (iterator.hasNext()) {\n                        Map.Entry entry = (Map.Entry) iterator.next();\n                        newFormBodyBuilder.add((String) entry.getKey(), (String) entry.getValue());\n                    }\n                }\n\n                FormBody oldFormBody = (FormBody) request.body();\n                int paramSize = oldFormBody.size();\n                if (paramSize > 0) {\n                    for (int i = 0; i < paramSize; i++) {\n                        newFormBodyBuilder.add(oldFormBody.name(i), oldFormBody.value(i));\n                    }\n                }\n\n                requestBuilder.post(newFormBodyBuilder.build());\n                request = requestBuilder.build();\n            } else if (request.body() instanceof MultipartBody) {\n                MultipartBody.Builder multipartBuilder = new MultipartBody.Builder().setType(MultipartBody.FORM);\n\n                Iterator iterator = paramsMap.entrySet().iterator();\n                while (iterator.hasNext()) {\n                    Map.Entry entry = (Map.Entry) iterator.next();\n                    multipartBuilder.addFormDataPart((String) entry.getKey(), (String) entry.getValue());\n                }\n\n                List<MultipartBody.Part> oldParts = ((MultipartBody) request.body()).parts();\n                if (oldParts != null && oldParts.size() > 0) {\n                    for (MultipartBody.Part part : oldParts) {\n                        multipartBuilder.addPart(part);\n                    }\n                }\n\n                requestBuilder.post(multipartBuilder.build());\n                request = requestBuilder.build();\n            }\n\n        }\n        return chain.proceed(request);\n    }\n\n    private boolean canInjectIntoBody(Request request) {\n        if (request == null) {\n            return false;\n        }\n        if (!TextUtils.equals(request.method(), \"POST\")) {\n            return false;\n        }\n        RequestBody body = request.body();\n        if (body == null) {\n            return false;\n        }\n        MediaType mediaType = body.contentType();\n        if (mediaType == null) {\n            return false;\n        }\n        if (!TextUtils.equals(mediaType.subtype(), \"x-www-form-urlencoded\")) {\n            return false;\n        }\n        return true;\n    }\n\n    // func to inject params into url\n    private Request injectParamsIntoUrl(Request request, Request.Builder requestBuilder, Map<String, String> paramsMap) {\n        HttpUrl.Builder httpUrlBuilder = request.url().newBuilder();\n        if (paramsMap.size() > 0) {\n            Iterator iterator = paramsMap.entrySet().iterator();\n            while (iterator.hasNext()) {\n                Map.Entry entry = (Map.Entry) iterator.next();\n                httpUrlBuilder.addEncodedQueryParameter((String) entry.getKey(), (String) entry.getValue());\n            }\n            requestBuilder.url(httpUrlBuilder.build());\n            return requestBuilder.build();\n        }\n\n        return request;\n    }\n\n    private static String bodyToString(final RequestBody request) {\n        try {\n            final RequestBody copy = request;\n            final Buffer buffer = new Buffer();\n            if (copy != null)\n                copy.writeTo(buffer);\n            else\n                return \"\";\n            return buffer.readUtf8();\n        } catch (final IOException e) {\n            return \"did not work\";\n        }\n    }\n\n    public static class Builder {\n\n        CommonParamsInterceptor interceptor;\n\n        public Builder() {\n            interceptor = new CommonParamsInterceptor();\n        }\n\n        public Builder addParam(String key, String value) {\n            interceptor.paramsMap.put(key, value);\n            return this;\n        }\n\n        public Builder addParamsMap(Map<String, String> paramsMap) {\n            interceptor.paramsMap.putAll(paramsMap);\n            return this;\n        }\n\n        public Builder addHeaderParam(String key, String value) {\n            interceptor.headerParamsMap.put(key, value);\n            return this;\n        }\n\n        public Builder addHeaderParamsMap(Map<String, String> headerParamsMap) {\n            interceptor.headerParamsMap.putAll(headerParamsMap);\n            return this;\n        }\n\n        public Builder addHeaderLine(String headerLine) {\n            int index = headerLine.indexOf(\":\");\n            if (index == -1) {\n                throw new IllegalArgumentException(\"Unexpected header: \" + headerLine);\n            }\n            interceptor.headerLinesList.add(headerLine);\n            return this;\n        }\n\n        public Builder addHeaderLinesList(List<String> headerLinesList) {\n            for (String headerLine : headerLinesList) {\n                int index = headerLine.indexOf(\":\");\n                if (index == -1) {\n                    throw new IllegalArgumentException(\"Unexpected header: \" + headerLine);\n                }\n                interceptor.headerLinesList.add(headerLine);\n            }\n            return this;\n        }\n\n        public Builder addQueryParam(String key, String value) {\n            interceptor.queryParamsMap.put(key, value);\n            return this;\n        }\n\n        public Builder addQueryParamsMap(Map<String, String> queryParamsMap) {\n            interceptor.queryParamsMap.putAll(queryParamsMap);\n            return this;\n        }\n\n        public CommonParamsInterceptor build() {\n            return interceptor;\n        }\n    }\n}\n```\n\n\n\n### 加签拦截器\n\n互联网是一个开放的环境,危险无处不在,加密通信是安全的基础.\n\n加密的方式又有很多,比如对称加密/非对称加密/Hash(严格的说不是加密),这里先不对加密进行介绍,我们聊聊加签;\n\n加签,其实就是给报文做一个摘要,相同的签名算法得到的摘要是相同的,比如MD5, SH1, SH256等, 简单的加签并不能防止篡改,因为攻击者可以篡改后,自己生成新的签名.服务端验签还是可以通过的,因此加签时一定要包含一些私有的东西,比如私钥.\n\n\n\n这里介绍一种加签方式,\n\n>  加密规则\n\n1.  根据请求参数 key 进行排序\n2.  按排好的顺序组装成 key=value&key=value 形式的字符串\n3.  将上述字符串拼接  ,最终形成 key=value&key=value的字符串\n4.  将字符串 md5, 生成 auth.\n\n\n\n一个简单的加签逻辑就是这样,下面代码就是对这种规则的实现,看代码↓↓↓↓\n\n```java\npublic class AuthorizeInterceptor implements Interceptor {\n\n    private static final String TAG = \"AuthorizeInterceptor\";\n\n    /**\n     * 生成 auth 的私钥\n     */\n    private String authKey;\n\n    /**\n     * 当前设备 mid,用来生成 auth\n     * 数据由 Builder 类传入\n     */\n    private String mid = \"\";\n\n    private AuthorizeInterceptor() {\n    }\n\n    @Override\n    public Response intercept(Chain chain) throws IOException {\n        Request request = chain.request();\n        Request.Builder requestBuilder = request.newBuilder();\n        String url = request.url().toString();\n        LogUtils.d(TAG, url);\n        if (\"POST\".equals(request.method())) {\n            request = injectionParamIntoBody(request, requestBuilder);\n        } else if (\"GET\".equals(request.method())) {\n            request = injectionAuthIntoUrl(request, requestBuilder);\n        }\n        return chain.proceed(request);\n    }\n\n    /**\n     * GET 请求方式, 生成授权和添加时间戳\n     *\n     * @param request\n     * @param requestBuilder\n     * @return\n     */\n    private Request injectionAuthIntoUrl(Request request, Request.Builder requestBuilder) {\n        //获取到请求地址api\n        HttpUrl newHttpUrl = request.url();\n        TreeMap<String, String> authMap = new TreeMap<>();\n        //通过请求地址(最初始的请求地址)获取到参数列表\n        Set<String> parameterNames = newHttpUrl.queryParameterNames();\n        for (String key : parameterNames) {\n            //循环参数列表,获取参数value,\n                String paramValue = newHttpUrl.queryParameter(key);\n                if (!TextUtils.isEmpty(paramValue)) {\n                    authMap.put(key, paramValue);\n                }\n            \n        }\n        HttpUrl.Builder newBuilder =\n                request.url().newBuilder()\n                        .addEncodedQueryParameter(\"auth\", assembleAuth(authMap, false));\n        requestBuilder.url(newBuilder.build());\n        return requestBuilder.build();\n    }\n\n    /**\n     * 将参数注入到 POST 请求的 body 中\n     *\n     * @param request\n     * @param requestBuilder\n     * @return\n     */\n    private Request injectionParamIntoBody(Request request, Request.Builder requestBuilder) {\n        if (request.body() instanceof FormBody) {\n            // 处理正常表单请求方式\n            FormBody oldFormBody = (FormBody) request.body();\n            return assembleFormBody(request, oldFormBody, requestBuilder);\n        } else if (request.body() instanceof MultipartBody) {\n            return assembleMultipartBody(request, requestBuilder);\n        } else {\n            return request;\n        }\n    }\n\n    /**\n     * 构建流媒体参数的 body\n     *\n     * @param request\n     * @param builder\n     * @return\n     */\n    private Request assembleMultipartBody(Request request, Request.Builder builder) {\n        // 处理流的请求方式\n        MultipartBody body = (MultipartBody) request.body();\n        TreeMap<String, String> authMap = new TreeMap<>();\n        // 获取参数 key 及 value 数据, 将数据写入到 TreeMap 中进行排序\n        if (body != null && body.parts().size() > 0) {\n            for (MultipartBody.Part part : body.parts()) {\n                // 只处理 contentType 为空,或为 text 的情况, image 上传图片的字段,不进行处理\n                if (part.body().contentType() == null\n                        || !\"image\".equals(part.body().contentType().type())\n                        || \"text\".equals(part.body().contentType().type())) {\n                    Headers headers = part.headers();\n                    // 从 header 中获取 Key, form-data; name= 的字段过滤获取key\n                    // 筛选掉 basic, 获取到当前 header,对应的 RequestBody, 通过 buffer 的方式,获取到 value\n                    // 将 key 和 value 填充到 TreeMap 中\n                    for (int i = 0; i < headers.names().size(); i++) {\n                        String headerName = headers.value(i);\n                        if (headerName.contains(\"form-data; name=\")) {\n                            String key = headerName.replace(\"form-data; name=\", \"\").replace(\"\\\"\", \"\");\n                                String value = body2String(part.body());\n                                if (!TextUtils.isEmpty(value)) {\n                                    authMap.put(key, body2String(part.body()));\n                                }\n                                                   }\n                    }\n                }\n            }\n        }\n\n        MultipartBody.Builder multipartBuilder = new MultipartBody.Builder().setType(MultipartBody.FORM);\n        multipartBuilder.addFormDataPart(\"auth\", assembleAuth(authMap, false));\n        List<MultipartBody.Part> oldParts = ((MultipartBody) request.body()).parts();\n        if (oldParts != null && oldParts.size() > 0) {\n            for (MultipartBody.Part part : oldParts) {\n                multipartBuilder.addPart(part);\n            }\n        }\n        builder.post(multipartBuilder.build());\n        return builder.build();\n    }\n\n    /**\n     * 构建 Auth 数据\n     * <p>\n     * TreeMap 数据,按照字母顺序自动排序后,遍历数据,拼接成 key=value&key=value 的形式,\n     * Map 拼接完成后,在其后需要再次拼接上\n     * <p>\n     * 最后将数据 MD5 转化为 32 位小写并返回\n     *\n     * @param treeMap      构建 Auth 的具体数据\n     * @param isNeedDecode 是否需要解码\n     * @return 返回 auth 数据 \n     */\n    private String assembleAuth(TreeMap<String, String> treeMap, boolean isNeedDecode) {\n        StringBuilder stringBuilder = new StringBuilder();\n        if (treeMap.size() > 0) {\n            for (Map.Entry<String, String> stringStringEntry : treeMap.entrySet()) {\n                try {\n                    stringBuilder.append(stringStringEntry.getKey())\n                            .append(\"=\")\n                            .append(isNeedDecode\n                                    ? URLDecoder.decode(stringStringEntry.getValue(), \"UTF-8\")\n                                    : stringStringEntry.getValue())\n                            .append(\"&\");\n                } catch (UnsupportedEncodingException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        treeMap.clear();\n        stringBuilder\n                .append(authKey);\n        Log.d(TAG, stringBuilder.toString());\n        return MD5.MD5(stringBuilder.toString());\n    }\n\n    /**\n     * body 转 string 获取实际参数值\n     *\n     * @param body Part body\n     * @return part 中写如的参数数据\n     */\n    private String body2String(RequestBody body) {\n        if (body != null) {\n            Buffer buffer = new Buffer();\n            try {\n                body.writeTo(buffer);\n                Charset charset = Charset.forName(\"UTF-8\");\n                MediaType contentType = body.contentType();\n                if (contentType != null) {\n                    charset = contentType.charset(charset);\n                }\n                assert charset != null;\n                return buffer.readString(charset);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return \"\";\n    }\n\n    /**\n     * 组装 Form 表单请求数据\n     *\n     * @param request\n     * @param oldFormBody\n     * @param requestBuilder\n     * @return\n     */\n    private Request assembleFormBody(Request request, FormBody oldFormBody, Request.Builder requestBuilder) {\n        TreeMap<String, String> authMap = new TreeMap<>();\n        // 遍历请求参数,非空参数,添加到集合中\n        for (int i = 0; i < oldFormBody.size(); i++) {\n            if (!TextUtils.isEmpty(oldFormBody.encodedValue(i))) {\n                authMap.put(oldFormBody.encodedName(i), oldFormBody.encodedValue(i));\n            }\n        }\n        if (authMap.size() != 0) {\n            // 生成 auth 数据\n            FormBody.Builder newFormBody = new FormBody.Builder();\n            for (int i = 0; i < oldFormBody.size(); i++) {\n                newFormBody.addEncoded(oldFormBody.encodedName(i), oldFormBody.encodedValue(i));\n            }\n            newFormBody.add(\"auth\", assembleAuth(authMap, true));\n            requestBuilder.method(request.method(), newFormBody.build());\n            return requestBuilder.build();\n        }\n\n        return request;\n    }\n\n\n    /**\n     * Builder 构造函数,用来设置 Authorize 的相关参数,及创建工作\n     */\n    public static class Builder {\n        AuthorizeInterceptor authorizeInterceptor;\n\n        public Builder() {\n            authorizeInterceptor = new AuthorizeInterceptor();\n        }\n\n        public Builder setMid(String mid) {\n            authorizeInterceptor.mid = mid;\n            return this;\n        }\n\n        public Builder setAuthKey(String key) {\n            authorizeInterceptor.authKey = key;\n            return this;\n        }\n\n        public AuthorizeInterceptor build() {\n            return authorizeInterceptor;\n        }\n    }\n}\n```\n\n\n\n该加签方式,讲请求参数拼接为 `key=value` 的方式, 难点在于如何从 OkHttp 中获取这些参数,在 GET 请求和 POST 的处理方式又不同,代码中 POST 请求方式,又会根据请求传递的 `contentType` 而又有所不同,这里介绍了`Form`表单提交和 `Multipart` 上传文件的参数获取方式,其他的请举一反三.\n\n","slug":"OkHttp-Intercept","published":1,"updated":"2019-06-23T14:36:03.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcnczf3000o16y9x2rjarc9","content":"<p>OKHttp 在开发中经常用到,这里介绍一下 OKHttp 的拦截器(interceptor)的几个使用例子</p>\n<p>要是用拦截器很简单,我们只需要自定义一个 interceptor 类, 并实现 Interceptor 接口, 同时重写 intercept 方法.</p>\n<p>这里介绍两种 Interceptor 的实例</p>\n<a id=\"more\"></a>\n<h2 id=\"Log-日志-LogInterceptor\"><a href=\"#Log-日志-LogInterceptor\" class=\"headerlink\" title=\"Log 日志 (LogInterceptor)\"></a>Log 日志 (LogInterceptor)</h2><p>Log 在开发调试中的重要性, 不言而喻, 一个好的日志数据,能够为开发时提供很多帮助,可以通过 Log 来获取当前程序的执行状态, 顺序等等.</p>\n<p>这里介绍的 Log 日志拦截器,主要是负责在网络请求时,截获请求中的信息,并将请求信息以 Log 的方式输出到控制台上,可展现当前请求地址,请求参数,以及请求结果等.</p>\n<p>话不多说, 上代码.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 自定义 log 拦截器,输入请求地址,请求参,请求结果</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 拦截请求信息,获取请求地址及请求参数</span></span><br><span class=\"line\">            Request request = chain.request();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">long</span> t1 = System.nanoTime();</span><br><span class=\"line\">            <span class=\"comment\">// 获取请求方式</span></span><br><span class=\"line\">            String method = request.method();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"POST\"</span>.equals(method)) &#123;</span><br><span class=\"line\">                StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (request.body() <span class=\"keyword\">instanceof</span> FormBody) &#123;</span><br><span class=\"line\">                    FormBody body = (FormBody) request.body();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; body.size(); i++) &#123;</span><br><span class=\"line\">                        sb.append(body.encodedName(i) + <span class=\"string\">\"=\"</span> + body.encodedValue(i) + <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    sb.delete(sb.length() - <span class=\"number\">1</span>, sb.length());</span><br><span class=\"line\">                    LogUtils.d(TAG, String.format(<span class=\"string\">\"Sending request %s on %s %n%s %nRequestParams:&#123;%s&#125;\"</span>,</span><br><span class=\"line\">                            request.url(), chain.connection(), request.headers(), sb.toString()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                LogUtils.d(TAG, String.format(<span class=\"string\">\"Sending request %s on %s %n%s\"</span>,</span><br><span class=\"line\">                        request.url(), chain.connection(), request.headers()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取响应信息</span></span><br><span class=\"line\">            Response response = chain.proceed(request);</span><br><span class=\"line\">            <span class=\"keyword\">long</span> t2 = System.nanoTime();</span><br><span class=\"line\">            LogUtils.d(TAG, String.format(<span class=\"string\">\"Received response for %s in %.1fms%n%s\"</span>,</span><br><span class=\"line\">                    response.request().url(), (t2 - t1) / <span class=\"number\">1e6</span>d, response.headers()));</span><br><span class=\"line\"></span><br><span class=\"line\">            MediaType contentType = response.body().contentType();</span><br><span class=\"line\">            String content = response.body().string();</span><br><span class=\"line\">            LogUtils.d(TAG, content);</span><br><span class=\"line\">            ResponseBody wrappedBody = ResponseBody.create(contentType, content);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.newBuilder().body(wrappedBody).build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"加参\"><a href=\"#加参\" class=\"headerlink\" title=\"加参\"></a>加参</h2><p>加参的意义在于,在请求过程中, 需要传递一些基本参数,这些参数是基本保持不变的, 而这些参数又是后台需要校验的依靠,我们俗称他们为<strong>公参</strong>, 如果在请求过程中在每一个接口里面都去添加这些参数,显得非常繁琐,而且麻烦,后续人员接手,又会不知所措,维护起来相当不方便.</p>\n<p>因此,在这里我们还是通过请求拦截器,通过拦截器去添加这些参数.</p>\n<h3 id=\"公参拦截器\"><a href=\"#公参拦截器\" class=\"headerlink\" title=\"公参拦截器\"></a>公参拦截器</h3><p>在请求中,增加一些公共的参数.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonParamsInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; queryParamsMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; paramsMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; headerParamsMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; headerLinesList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Request request = chain.request();</span><br><span class=\"line\">        Request.Builder requestBuilder = request.newBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// process header params inject</span></span><br><span class=\"line\">        Headers.Builder headerBuilder = request.headers().newBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headerParamsMap.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Iterator iterator = headerParamsMap.entrySet().iterator();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">                Map.Entry entry = (Map.Entry) iterator.next();</span><br><span class=\"line\">                headerBuilder.add((String) entry.getKey(), (String) entry.getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headerLinesList.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String line : headerLinesList) &#123;</span><br><span class=\"line\">                headerBuilder.add(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            requestBuilder.headers(headerBuilder.build());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// process header params end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// process queryParams inject whatever it's GET or POST</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (queryParamsMap.size() &gt; <span class=\"number\">0</span> &amp;&amp; <span class=\"string\">\"GET\"</span>.equals(request.method())) &#123;</span><br><span class=\"line\"><span class=\"comment\">//        if (queryParamsMap.size() &gt; 0) &#123;</span></span><br><span class=\"line\">            request = injectParamsIntoUrl(request, requestBuilder, queryParamsMap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// process post body inject</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (paramsMap != <span class=\"keyword\">null</span> &amp;&amp; paramsMap.size() &gt; <span class=\"number\">0</span> &amp;&amp; <span class=\"string\">\"POST\"</span>.equals(request.method())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (request.body() <span class=\"keyword\">instanceof</span> FormBody) &#123;</span><br><span class=\"line\">                FormBody.Builder newFormBodyBuilder = <span class=\"keyword\">new</span> FormBody.Builder();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (paramsMap.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    Iterator iterator = paramsMap.entrySet().iterator();</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">                        Map.Entry entry = (Map.Entry) iterator.next();</span><br><span class=\"line\">                        newFormBodyBuilder.add((String) entry.getKey(), (String) entry.getValue());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                FormBody oldFormBody = (FormBody) request.body();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> paramSize = oldFormBody.size();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (paramSize &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; paramSize; i++) &#123;</span><br><span class=\"line\">                        newFormBodyBuilder.add(oldFormBody.name(i), oldFormBody.value(i));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                requestBuilder.post(newFormBodyBuilder.build());</span><br><span class=\"line\">                request = requestBuilder.build();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.body() <span class=\"keyword\">instanceof</span> MultipartBody) &#123;</span><br><span class=\"line\">                MultipartBody.Builder multipartBuilder = <span class=\"keyword\">new</span> MultipartBody.Builder().setType(MultipartBody.FORM);</span><br><span class=\"line\"></span><br><span class=\"line\">                Iterator iterator = paramsMap.entrySet().iterator();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">                    Map.Entry entry = (Map.Entry) iterator.next();</span><br><span class=\"line\">                    multipartBuilder.addFormDataPart((String) entry.getKey(), (String) entry.getValue());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                List&lt;MultipartBody.Part&gt; oldParts = ((MultipartBody) request.body()).parts();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldParts != <span class=\"keyword\">null</span> &amp;&amp; oldParts.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (MultipartBody.Part part : oldParts) &#123;</span><br><span class=\"line\">                        multipartBuilder.addPart(part);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                requestBuilder.post(multipartBuilder.build());</span><br><span class=\"line\">                request = requestBuilder.build();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chain.proceed(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canInjectIntoBody</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!TextUtils.equals(request.method(), <span class=\"string\">\"POST\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        RequestBody body = request.body();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        MediaType mediaType = body.contentType();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mediaType == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!TextUtils.equals(mediaType.subtype(), <span class=\"string\">\"x-www-form-urlencoded\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// func to inject params into url</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">injectParamsIntoUrl</span><span class=\"params\">(Request request, Request.Builder requestBuilder, Map&lt;String, String&gt; paramsMap)</span> </span>&#123;</span><br><span class=\"line\">        HttpUrl.Builder httpUrlBuilder = request.url().newBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (paramsMap.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Iterator iterator = paramsMap.entrySet().iterator();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">                Map.Entry entry = (Map.Entry) iterator.next();</span><br><span class=\"line\">                httpUrlBuilder.addEncodedQueryParameter((String) entry.getKey(), (String) entry.getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            requestBuilder.url(httpUrlBuilder.build());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> requestBuilder.build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">bodyToString</span><span class=\"params\">(<span class=\"keyword\">final</span> RequestBody request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> RequestBody copy = request;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Buffer buffer = <span class=\"keyword\">new</span> Buffer();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (copy != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                copy.writeTo(buffer);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> buffer.readUtf8();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"did not work\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        CommonParamsInterceptor interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            interceptor = <span class=\"keyword\">new</span> CommonParamsInterceptor();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addParam</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">            interceptor.paramsMap.put(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addParamsMap</span><span class=\"params\">(Map&lt;String, String&gt; paramsMap)</span> </span>&#123;</span><br><span class=\"line\">            interceptor.paramsMap.putAll(paramsMap);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addHeaderParam</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">            interceptor.headerParamsMap.put(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addHeaderParamsMap</span><span class=\"params\">(Map&lt;String, String&gt; headerParamsMap)</span> </span>&#123;</span><br><span class=\"line\">            interceptor.headerParamsMap.putAll(headerParamsMap);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addHeaderLine</span><span class=\"params\">(String headerLine)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = headerLine.indexOf(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected header: \"</span> + headerLine);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            interceptor.headerLinesList.add(headerLine);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addHeaderLinesList</span><span class=\"params\">(List&lt;String&gt; headerLinesList)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String headerLine : headerLinesList) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> index = headerLine.indexOf(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (index == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected header: \"</span> + headerLine);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                interceptor.headerLinesList.add(headerLine);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addQueryParam</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">            interceptor.queryParamsMap.put(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addQueryParamsMap</span><span class=\"params\">(Map&lt;String, String&gt; queryParamsMap)</span> </span>&#123;</span><br><span class=\"line\">            interceptor.queryParamsMap.putAll(queryParamsMap);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> CommonParamsInterceptor <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> interceptor;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"加签拦截器\"><a href=\"#加签拦截器\" class=\"headerlink\" title=\"加签拦截器\"></a>加签拦截器</h3><p>互联网是一个开放的环境,危险无处不在,加密通信是安全的基础.</p>\n<p>加密的方式又有很多,比如对称加密/非对称加密/Hash(严格的说不是加密),这里先不对加密进行介绍,我们聊聊加签;</p>\n<p>加签,其实就是给报文做一个摘要,相同的签名算法得到的摘要是相同的,比如MD5, SH1, SH256等, 简单的加签并不能防止篡改,因为攻击者可以篡改后,自己生成新的签名.服务端验签还是可以通过的,因此加签时一定要包含一些私有的东西,比如私钥.</p>\n<p>这里介绍一种加签方式,</p>\n<blockquote>\n<p> 加密规则</p>\n</blockquote>\n<ol>\n<li>根据请求参数 key 进行排序</li>\n<li>按排好的顺序组装成 key=value&amp;key=value 形式的字符串</li>\n<li>将上述字符串拼接  ,最终形成 key=value&amp;key=value的字符串</li>\n<li>将字符串 md5, 生成 auth.</li>\n</ol>\n<p>一个简单的加签逻辑就是这样,下面代码就是对这种规则的实现,看代码↓↓↓↓</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorizeInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"AuthorizeInterceptor\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成 auth 的私钥</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authKey;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前设备 mid,用来生成 auth</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据由 Builder 类传入</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String mid = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">AuthorizeInterceptor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Request request = chain.request();</span><br><span class=\"line\">        Request.Builder requestBuilder = request.newBuilder();</span><br><span class=\"line\">        String url = request.url().toString();</span><br><span class=\"line\">        LogUtils.d(TAG, url);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"POST\"</span>.equals(request.method())) &#123;</span><br><span class=\"line\">            request = injectionParamIntoBody(request, requestBuilder);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"GET\"</span>.equals(request.method())) &#123;</span><br><span class=\"line\">            request = injectionAuthIntoUrl(request, requestBuilder);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chain.proceed(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * GET 请求方式, 生成授权和添加时间戳</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> requestBuilder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">injectionAuthIntoUrl</span><span class=\"params\">(Request request, Request.Builder requestBuilder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取到请求地址api</span></span><br><span class=\"line\">        HttpUrl newHttpUrl = request.url();</span><br><span class=\"line\">        TreeMap&lt;String, String&gt; authMap = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//通过请求地址(最初始的请求地址)获取到参数列表</span></span><br><span class=\"line\">        Set&lt;String&gt; parameterNames = newHttpUrl.queryParameterNames();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : parameterNames) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//循环参数列表,获取参数value,</span></span><br><span class=\"line\">                String paramValue = newHttpUrl.queryParameter(key);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!TextUtils.isEmpty(paramValue)) &#123;</span><br><span class=\"line\">                    authMap.put(key, paramValue);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HttpUrl.Builder newBuilder =</span><br><span class=\"line\">                request.url().newBuilder()</span><br><span class=\"line\">                        .addEncodedQueryParameter(<span class=\"string\">\"auth\"</span>, assembleAuth(authMap, <span class=\"keyword\">false</span>));</span><br><span class=\"line\">        requestBuilder.url(newBuilder.build());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> requestBuilder.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将参数注入到 POST 请求的 body 中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> requestBuilder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">injectionParamIntoBody</span><span class=\"params\">(Request request, Request.Builder requestBuilder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.body() <span class=\"keyword\">instanceof</span> FormBody) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 处理正常表单请求方式</span></span><br><span class=\"line\">            FormBody oldFormBody = (FormBody) request.body();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> assembleFormBody(request, oldFormBody, requestBuilder);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.body() <span class=\"keyword\">instanceof</span> MultipartBody) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> assembleMultipartBody(request, requestBuilder);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构建流媒体参数的 body</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> builder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">assembleMultipartBody</span><span class=\"params\">(Request request, Request.Builder builder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理流的请求方式</span></span><br><span class=\"line\">        MultipartBody body = (MultipartBody) request.body();</span><br><span class=\"line\">        TreeMap&lt;String, String&gt; authMap = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 获取参数 key 及 value 数据, 将数据写入到 TreeMap 中进行排序</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body != <span class=\"keyword\">null</span> &amp;&amp; body.parts().size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (MultipartBody.Part part : body.parts()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 只处理 contentType 为空,或为 text 的情况, image 上传图片的字段,不进行处理</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (part.body().contentType() == <span class=\"keyword\">null</span></span><br><span class=\"line\">                        || !<span class=\"string\">\"image\"</span>.equals(part.body().contentType().type())</span><br><span class=\"line\">                        || <span class=\"string\">\"text\"</span>.equals(part.body().contentType().type())) &#123;</span><br><span class=\"line\">                    Headers headers = part.headers();</span><br><span class=\"line\">                    <span class=\"comment\">// 从 header 中获取 Key, form-data; name= 的字段过滤获取key</span></span><br><span class=\"line\">                    <span class=\"comment\">// 筛选掉 basic, 获取到当前 header,对应的 RequestBody, 通过 buffer 的方式,获取到 value</span></span><br><span class=\"line\">                    <span class=\"comment\">// 将 key 和 value 填充到 TreeMap 中</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; headers.names().size(); i++) &#123;</span><br><span class=\"line\">                        String headerName = headers.value(i);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (headerName.contains(<span class=\"string\">\"form-data; name=\"</span>)) &#123;</span><br><span class=\"line\">                            String key = headerName.replace(<span class=\"string\">\"form-data; name=\"</span>, <span class=\"string\">\"\"</span>).replace(<span class=\"string\">\"\\\"\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                                String value = body2String(part.body());</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!TextUtils.isEmpty(value)) &#123;</span><br><span class=\"line\">                                    authMap.put(key, body2String(part.body()));</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                                   &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MultipartBody.Builder multipartBuilder = <span class=\"keyword\">new</span> MultipartBody.Builder().setType(MultipartBody.FORM);</span><br><span class=\"line\">        multipartBuilder.addFormDataPart(<span class=\"string\">\"auth\"</span>, assembleAuth(authMap, <span class=\"keyword\">false</span>));</span><br><span class=\"line\">        List&lt;MultipartBody.Part&gt; oldParts = ((MultipartBody) request.body()).parts();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldParts != <span class=\"keyword\">null</span> &amp;&amp; oldParts.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (MultipartBody.Part part : oldParts) &#123;</span><br><span class=\"line\">                multipartBuilder.addPart(part);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        builder.post(multipartBuilder.build());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构建 Auth 数据</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * TreeMap 数据,按照字母顺序自动排序后,遍历数据,拼接成 key=value&amp;key=value 的形式,</span></span><br><span class=\"line\"><span class=\"comment\">     * Map 拼接完成后,在其后需要再次拼接上</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 最后将数据 MD5 转化为 32 位小写并返回</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> treeMap      构建 Auth 的具体数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> isNeedDecode 是否需要解码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回 auth 数据 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">assembleAuth</span><span class=\"params\">(TreeMap&lt;String, String&gt; treeMap, <span class=\"keyword\">boolean</span> isNeedDecode)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (treeMap.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Map.Entry&lt;String, String&gt; stringStringEntry : treeMap.entrySet()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    stringBuilder.append(stringStringEntry.getKey())</span><br><span class=\"line\">                            .append(<span class=\"string\">\"=\"</span>)</span><br><span class=\"line\">                            .append(isNeedDecode</span><br><span class=\"line\">                                    ? URLDecoder.decode(stringStringEntry.getValue(), <span class=\"string\">\"UTF-8\"</span>)</span><br><span class=\"line\">                                    : stringStringEntry.getValue())</span><br><span class=\"line\">                            .append(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        treeMap.clear();</span><br><span class=\"line\">        stringBuilder</span><br><span class=\"line\">                .append(authKey);</span><br><span class=\"line\">        Log.d(TAG, stringBuilder.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MD5.MD5(stringBuilder.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * body 转 string 获取实际参数值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> body Part body</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> part 中写如的参数数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">body2String</span><span class=\"params\">(RequestBody body)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Buffer buffer = <span class=\"keyword\">new</span> Buffer();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                body.writeTo(buffer);</span><br><span class=\"line\">                Charset charset = Charset.forName(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">                MediaType contentType = body.contentType();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (contentType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    charset = contentType.charset(charset);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">assert</span> charset != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> buffer.readString(charset);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 组装 Form 表单请求数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> oldFormBody</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> requestBuilder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">assembleFormBody</span><span class=\"params\">(Request request, FormBody oldFormBody, Request.Builder requestBuilder)</span> </span>&#123;</span><br><span class=\"line\">        TreeMap&lt;String, String&gt; authMap = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 遍历请求参数,非空参数,添加到集合中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; oldFormBody.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!TextUtils.isEmpty(oldFormBody.encodedValue(i))) &#123;</span><br><span class=\"line\">                authMap.put(oldFormBody.encodedName(i), oldFormBody.encodedValue(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (authMap.size() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 生成 auth 数据</span></span><br><span class=\"line\">            FormBody.Builder newFormBody = <span class=\"keyword\">new</span> FormBody.Builder();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; oldFormBody.size(); i++) &#123;</span><br><span class=\"line\">                newFormBody.addEncoded(oldFormBody.encodedName(i), oldFormBody.encodedValue(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            newFormBody.add(<span class=\"string\">\"auth\"</span>, assembleAuth(authMap, <span class=\"keyword\">true</span>));</span><br><span class=\"line\">            requestBuilder.method(request.method(), newFormBody.build());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> requestBuilder.build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Builder 构造函数,用来设置 Authorize 的相关参数,及创建工作</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">        AuthorizeInterceptor authorizeInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            authorizeInterceptor = <span class=\"keyword\">new</span> AuthorizeInterceptor();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setMid</span><span class=\"params\">(String mid)</span> </span>&#123;</span><br><span class=\"line\">            authorizeInterceptor.mid = mid;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setAuthKey</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">            authorizeInterceptor.authKey = key;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> AuthorizeInterceptor <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> authorizeInterceptor;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该加签方式,讲请求参数拼接为 <code>key=value</code> 的方式, 难点在于如何从 OkHttp 中获取这些参数,在 GET 请求和 POST 的处理方式又不同,代码中 POST 请求方式,又会根据请求传递的 <code>contentType</code> 而又有所不同,这里介绍了<code>Form</code>表单提交和 <code>Multipart</code> 上传文件的参数获取方式,其他的请举一反三.</p>\n","site":{"data":{}},"excerpt":"<p>OKHttp 在开发中经常用到,这里介绍一下 OKHttp 的拦截器(interceptor)的几个使用例子</p>\n<p>要是用拦截器很简单,我们只需要自定义一个 interceptor 类, 并实现 Interceptor 接口, 同时重写 intercept 方法.</p>\n<p>这里介绍两种 Interceptor 的实例</p>","more":"<h2 id=\"Log-日志-LogInterceptor\"><a href=\"#Log-日志-LogInterceptor\" class=\"headerlink\" title=\"Log 日志 (LogInterceptor)\"></a>Log 日志 (LogInterceptor)</h2><p>Log 在开发调试中的重要性, 不言而喻, 一个好的日志数据,能够为开发时提供很多帮助,可以通过 Log 来获取当前程序的执行状态, 顺序等等.</p>\n<p>这里介绍的 Log 日志拦截器,主要是负责在网络请求时,截获请求中的信息,并将请求信息以 Log 的方式输出到控制台上,可展现当前请求地址,请求参数,以及请求结果等.</p>\n<p>话不多说, 上代码.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 自定义 log 拦截器,输入请求地址,请求参,请求结果</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 拦截请求信息,获取请求地址及请求参数</span></span><br><span class=\"line\">            Request request = chain.request();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">long</span> t1 = System.nanoTime();</span><br><span class=\"line\">            <span class=\"comment\">// 获取请求方式</span></span><br><span class=\"line\">            String method = request.method();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"POST\"</span>.equals(method)) &#123;</span><br><span class=\"line\">                StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (request.body() <span class=\"keyword\">instanceof</span> FormBody) &#123;</span><br><span class=\"line\">                    FormBody body = (FormBody) request.body();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; body.size(); i++) &#123;</span><br><span class=\"line\">                        sb.append(body.encodedName(i) + <span class=\"string\">\"=\"</span> + body.encodedValue(i) + <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    sb.delete(sb.length() - <span class=\"number\">1</span>, sb.length());</span><br><span class=\"line\">                    LogUtils.d(TAG, String.format(<span class=\"string\">\"Sending request %s on %s %n%s %nRequestParams:&#123;%s&#125;\"</span>,</span><br><span class=\"line\">                            request.url(), chain.connection(), request.headers(), sb.toString()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                LogUtils.d(TAG, String.format(<span class=\"string\">\"Sending request %s on %s %n%s\"</span>,</span><br><span class=\"line\">                        request.url(), chain.connection(), request.headers()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取响应信息</span></span><br><span class=\"line\">            Response response = chain.proceed(request);</span><br><span class=\"line\">            <span class=\"keyword\">long</span> t2 = System.nanoTime();</span><br><span class=\"line\">            LogUtils.d(TAG, String.format(<span class=\"string\">\"Received response for %s in %.1fms%n%s\"</span>,</span><br><span class=\"line\">                    response.request().url(), (t2 - t1) / <span class=\"number\">1e6</span>d, response.headers()));</span><br><span class=\"line\"></span><br><span class=\"line\">            MediaType contentType = response.body().contentType();</span><br><span class=\"line\">            String content = response.body().string();</span><br><span class=\"line\">            LogUtils.d(TAG, content);</span><br><span class=\"line\">            ResponseBody wrappedBody = ResponseBody.create(contentType, content);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.newBuilder().body(wrappedBody).build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"加参\"><a href=\"#加参\" class=\"headerlink\" title=\"加参\"></a>加参</h2><p>加参的意义在于,在请求过程中, 需要传递一些基本参数,这些参数是基本保持不变的, 而这些参数又是后台需要校验的依靠,我们俗称他们为<strong>公参</strong>, 如果在请求过程中在每一个接口里面都去添加这些参数,显得非常繁琐,而且麻烦,后续人员接手,又会不知所措,维护起来相当不方便.</p>\n<p>因此,在这里我们还是通过请求拦截器,通过拦截器去添加这些参数.</p>\n<h3 id=\"公参拦截器\"><a href=\"#公参拦截器\" class=\"headerlink\" title=\"公参拦截器\"></a>公参拦截器</h3><p>在请求中,增加一些公共的参数.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonParamsInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; queryParamsMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; paramsMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; headerParamsMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; headerLinesList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Request request = chain.request();</span><br><span class=\"line\">        Request.Builder requestBuilder = request.newBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// process header params inject</span></span><br><span class=\"line\">        Headers.Builder headerBuilder = request.headers().newBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headerParamsMap.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Iterator iterator = headerParamsMap.entrySet().iterator();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">                Map.Entry entry = (Map.Entry) iterator.next();</span><br><span class=\"line\">                headerBuilder.add((String) entry.getKey(), (String) entry.getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headerLinesList.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String line : headerLinesList) &#123;</span><br><span class=\"line\">                headerBuilder.add(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            requestBuilder.headers(headerBuilder.build());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// process header params end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// process queryParams inject whatever it's GET or POST</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (queryParamsMap.size() &gt; <span class=\"number\">0</span> &amp;&amp; <span class=\"string\">\"GET\"</span>.equals(request.method())) &#123;</span><br><span class=\"line\"><span class=\"comment\">//        if (queryParamsMap.size() &gt; 0) &#123;</span></span><br><span class=\"line\">            request = injectParamsIntoUrl(request, requestBuilder, queryParamsMap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// process post body inject</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (paramsMap != <span class=\"keyword\">null</span> &amp;&amp; paramsMap.size() &gt; <span class=\"number\">0</span> &amp;&amp; <span class=\"string\">\"POST\"</span>.equals(request.method())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (request.body() <span class=\"keyword\">instanceof</span> FormBody) &#123;</span><br><span class=\"line\">                FormBody.Builder newFormBodyBuilder = <span class=\"keyword\">new</span> FormBody.Builder();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (paramsMap.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    Iterator iterator = paramsMap.entrySet().iterator();</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">                        Map.Entry entry = (Map.Entry) iterator.next();</span><br><span class=\"line\">                        newFormBodyBuilder.add((String) entry.getKey(), (String) entry.getValue());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                FormBody oldFormBody = (FormBody) request.body();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> paramSize = oldFormBody.size();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (paramSize &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; paramSize; i++) &#123;</span><br><span class=\"line\">                        newFormBodyBuilder.add(oldFormBody.name(i), oldFormBody.value(i));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                requestBuilder.post(newFormBodyBuilder.build());</span><br><span class=\"line\">                request = requestBuilder.build();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.body() <span class=\"keyword\">instanceof</span> MultipartBody) &#123;</span><br><span class=\"line\">                MultipartBody.Builder multipartBuilder = <span class=\"keyword\">new</span> MultipartBody.Builder().setType(MultipartBody.FORM);</span><br><span class=\"line\"></span><br><span class=\"line\">                Iterator iterator = paramsMap.entrySet().iterator();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">                    Map.Entry entry = (Map.Entry) iterator.next();</span><br><span class=\"line\">                    multipartBuilder.addFormDataPart((String) entry.getKey(), (String) entry.getValue());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                List&lt;MultipartBody.Part&gt; oldParts = ((MultipartBody) request.body()).parts();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldParts != <span class=\"keyword\">null</span> &amp;&amp; oldParts.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (MultipartBody.Part part : oldParts) &#123;</span><br><span class=\"line\">                        multipartBuilder.addPart(part);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                requestBuilder.post(multipartBuilder.build());</span><br><span class=\"line\">                request = requestBuilder.build();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chain.proceed(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canInjectIntoBody</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!TextUtils.equals(request.method(), <span class=\"string\">\"POST\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        RequestBody body = request.body();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        MediaType mediaType = body.contentType();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mediaType == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!TextUtils.equals(mediaType.subtype(), <span class=\"string\">\"x-www-form-urlencoded\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// func to inject params into url</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">injectParamsIntoUrl</span><span class=\"params\">(Request request, Request.Builder requestBuilder, Map&lt;String, String&gt; paramsMap)</span> </span>&#123;</span><br><span class=\"line\">        HttpUrl.Builder httpUrlBuilder = request.url().newBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (paramsMap.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Iterator iterator = paramsMap.entrySet().iterator();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">                Map.Entry entry = (Map.Entry) iterator.next();</span><br><span class=\"line\">                httpUrlBuilder.addEncodedQueryParameter((String) entry.getKey(), (String) entry.getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            requestBuilder.url(httpUrlBuilder.build());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> requestBuilder.build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">bodyToString</span><span class=\"params\">(<span class=\"keyword\">final</span> RequestBody request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> RequestBody copy = request;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Buffer buffer = <span class=\"keyword\">new</span> Buffer();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (copy != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                copy.writeTo(buffer);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> buffer.readUtf8();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"did not work\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        CommonParamsInterceptor interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            interceptor = <span class=\"keyword\">new</span> CommonParamsInterceptor();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addParam</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">            interceptor.paramsMap.put(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addParamsMap</span><span class=\"params\">(Map&lt;String, String&gt; paramsMap)</span> </span>&#123;</span><br><span class=\"line\">            interceptor.paramsMap.putAll(paramsMap);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addHeaderParam</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">            interceptor.headerParamsMap.put(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addHeaderParamsMap</span><span class=\"params\">(Map&lt;String, String&gt; headerParamsMap)</span> </span>&#123;</span><br><span class=\"line\">            interceptor.headerParamsMap.putAll(headerParamsMap);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addHeaderLine</span><span class=\"params\">(String headerLine)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = headerLine.indexOf(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected header: \"</span> + headerLine);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            interceptor.headerLinesList.add(headerLine);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addHeaderLinesList</span><span class=\"params\">(List&lt;String&gt; headerLinesList)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String headerLine : headerLinesList) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> index = headerLine.indexOf(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (index == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected header: \"</span> + headerLine);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                interceptor.headerLinesList.add(headerLine);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addQueryParam</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">            interceptor.queryParamsMap.put(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addQueryParamsMap</span><span class=\"params\">(Map&lt;String, String&gt; queryParamsMap)</span> </span>&#123;</span><br><span class=\"line\">            interceptor.queryParamsMap.putAll(queryParamsMap);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> CommonParamsInterceptor <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> interceptor;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"加签拦截器\"><a href=\"#加签拦截器\" class=\"headerlink\" title=\"加签拦截器\"></a>加签拦截器</h3><p>互联网是一个开放的环境,危险无处不在,加密通信是安全的基础.</p>\n<p>加密的方式又有很多,比如对称加密/非对称加密/Hash(严格的说不是加密),这里先不对加密进行介绍,我们聊聊加签;</p>\n<p>加签,其实就是给报文做一个摘要,相同的签名算法得到的摘要是相同的,比如MD5, SH1, SH256等, 简单的加签并不能防止篡改,因为攻击者可以篡改后,自己生成新的签名.服务端验签还是可以通过的,因此加签时一定要包含一些私有的东西,比如私钥.</p>\n<p>这里介绍一种加签方式,</p>\n<blockquote>\n<p> 加密规则</p>\n</blockquote>\n<ol>\n<li>根据请求参数 key 进行排序</li>\n<li>按排好的顺序组装成 key=value&amp;key=value 形式的字符串</li>\n<li>将上述字符串拼接  ,最终形成 key=value&amp;key=value的字符串</li>\n<li>将字符串 md5, 生成 auth.</li>\n</ol>\n<p>一个简单的加签逻辑就是这样,下面代码就是对这种规则的实现,看代码↓↓↓↓</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorizeInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"AuthorizeInterceptor\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成 auth 的私钥</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authKey;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前设备 mid,用来生成 auth</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据由 Builder 类传入</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String mid = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">AuthorizeInterceptor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Request request = chain.request();</span><br><span class=\"line\">        Request.Builder requestBuilder = request.newBuilder();</span><br><span class=\"line\">        String url = request.url().toString();</span><br><span class=\"line\">        LogUtils.d(TAG, url);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"POST\"</span>.equals(request.method())) &#123;</span><br><span class=\"line\">            request = injectionParamIntoBody(request, requestBuilder);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"GET\"</span>.equals(request.method())) &#123;</span><br><span class=\"line\">            request = injectionAuthIntoUrl(request, requestBuilder);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chain.proceed(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * GET 请求方式, 生成授权和添加时间戳</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> requestBuilder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">injectionAuthIntoUrl</span><span class=\"params\">(Request request, Request.Builder requestBuilder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取到请求地址api</span></span><br><span class=\"line\">        HttpUrl newHttpUrl = request.url();</span><br><span class=\"line\">        TreeMap&lt;String, String&gt; authMap = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//通过请求地址(最初始的请求地址)获取到参数列表</span></span><br><span class=\"line\">        Set&lt;String&gt; parameterNames = newHttpUrl.queryParameterNames();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : parameterNames) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//循环参数列表,获取参数value,</span></span><br><span class=\"line\">                String paramValue = newHttpUrl.queryParameter(key);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!TextUtils.isEmpty(paramValue)) &#123;</span><br><span class=\"line\">                    authMap.put(key, paramValue);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HttpUrl.Builder newBuilder =</span><br><span class=\"line\">                request.url().newBuilder()</span><br><span class=\"line\">                        .addEncodedQueryParameter(<span class=\"string\">\"auth\"</span>, assembleAuth(authMap, <span class=\"keyword\">false</span>));</span><br><span class=\"line\">        requestBuilder.url(newBuilder.build());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> requestBuilder.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将参数注入到 POST 请求的 body 中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> requestBuilder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">injectionParamIntoBody</span><span class=\"params\">(Request request, Request.Builder requestBuilder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.body() <span class=\"keyword\">instanceof</span> FormBody) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 处理正常表单请求方式</span></span><br><span class=\"line\">            FormBody oldFormBody = (FormBody) request.body();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> assembleFormBody(request, oldFormBody, requestBuilder);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.body() <span class=\"keyword\">instanceof</span> MultipartBody) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> assembleMultipartBody(request, requestBuilder);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构建流媒体参数的 body</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> builder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">assembleMultipartBody</span><span class=\"params\">(Request request, Request.Builder builder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理流的请求方式</span></span><br><span class=\"line\">        MultipartBody body = (MultipartBody) request.body();</span><br><span class=\"line\">        TreeMap&lt;String, String&gt; authMap = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 获取参数 key 及 value 数据, 将数据写入到 TreeMap 中进行排序</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body != <span class=\"keyword\">null</span> &amp;&amp; body.parts().size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (MultipartBody.Part part : body.parts()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 只处理 contentType 为空,或为 text 的情况, image 上传图片的字段,不进行处理</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (part.body().contentType() == <span class=\"keyword\">null</span></span><br><span class=\"line\">                        || !<span class=\"string\">\"image\"</span>.equals(part.body().contentType().type())</span><br><span class=\"line\">                        || <span class=\"string\">\"text\"</span>.equals(part.body().contentType().type())) &#123;</span><br><span class=\"line\">                    Headers headers = part.headers();</span><br><span class=\"line\">                    <span class=\"comment\">// 从 header 中获取 Key, form-data; name= 的字段过滤获取key</span></span><br><span class=\"line\">                    <span class=\"comment\">// 筛选掉 basic, 获取到当前 header,对应的 RequestBody, 通过 buffer 的方式,获取到 value</span></span><br><span class=\"line\">                    <span class=\"comment\">// 将 key 和 value 填充到 TreeMap 中</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; headers.names().size(); i++) &#123;</span><br><span class=\"line\">                        String headerName = headers.value(i);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (headerName.contains(<span class=\"string\">\"form-data; name=\"</span>)) &#123;</span><br><span class=\"line\">                            String key = headerName.replace(<span class=\"string\">\"form-data; name=\"</span>, <span class=\"string\">\"\"</span>).replace(<span class=\"string\">\"\\\"\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                                String value = body2String(part.body());</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!TextUtils.isEmpty(value)) &#123;</span><br><span class=\"line\">                                    authMap.put(key, body2String(part.body()));</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                                   &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MultipartBody.Builder multipartBuilder = <span class=\"keyword\">new</span> MultipartBody.Builder().setType(MultipartBody.FORM);</span><br><span class=\"line\">        multipartBuilder.addFormDataPart(<span class=\"string\">\"auth\"</span>, assembleAuth(authMap, <span class=\"keyword\">false</span>));</span><br><span class=\"line\">        List&lt;MultipartBody.Part&gt; oldParts = ((MultipartBody) request.body()).parts();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldParts != <span class=\"keyword\">null</span> &amp;&amp; oldParts.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (MultipartBody.Part part : oldParts) &#123;</span><br><span class=\"line\">                multipartBuilder.addPart(part);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        builder.post(multipartBuilder.build());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构建 Auth 数据</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * TreeMap 数据,按照字母顺序自动排序后,遍历数据,拼接成 key=value&amp;key=value 的形式,</span></span><br><span class=\"line\"><span class=\"comment\">     * Map 拼接完成后,在其后需要再次拼接上</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 最后将数据 MD5 转化为 32 位小写并返回</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> treeMap      构建 Auth 的具体数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> isNeedDecode 是否需要解码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回 auth 数据 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">assembleAuth</span><span class=\"params\">(TreeMap&lt;String, String&gt; treeMap, <span class=\"keyword\">boolean</span> isNeedDecode)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (treeMap.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Map.Entry&lt;String, String&gt; stringStringEntry : treeMap.entrySet()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    stringBuilder.append(stringStringEntry.getKey())</span><br><span class=\"line\">                            .append(<span class=\"string\">\"=\"</span>)</span><br><span class=\"line\">                            .append(isNeedDecode</span><br><span class=\"line\">                                    ? URLDecoder.decode(stringStringEntry.getValue(), <span class=\"string\">\"UTF-8\"</span>)</span><br><span class=\"line\">                                    : stringStringEntry.getValue())</span><br><span class=\"line\">                            .append(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        treeMap.clear();</span><br><span class=\"line\">        stringBuilder</span><br><span class=\"line\">                .append(authKey);</span><br><span class=\"line\">        Log.d(TAG, stringBuilder.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MD5.MD5(stringBuilder.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * body 转 string 获取实际参数值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> body Part body</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> part 中写如的参数数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">body2String</span><span class=\"params\">(RequestBody body)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Buffer buffer = <span class=\"keyword\">new</span> Buffer();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                body.writeTo(buffer);</span><br><span class=\"line\">                Charset charset = Charset.forName(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">                MediaType contentType = body.contentType();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (contentType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    charset = contentType.charset(charset);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">assert</span> charset != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> buffer.readString(charset);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 组装 Form 表单请求数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> oldFormBody</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> requestBuilder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">assembleFormBody</span><span class=\"params\">(Request request, FormBody oldFormBody, Request.Builder requestBuilder)</span> </span>&#123;</span><br><span class=\"line\">        TreeMap&lt;String, String&gt; authMap = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 遍历请求参数,非空参数,添加到集合中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; oldFormBody.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!TextUtils.isEmpty(oldFormBody.encodedValue(i))) &#123;</span><br><span class=\"line\">                authMap.put(oldFormBody.encodedName(i), oldFormBody.encodedValue(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (authMap.size() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 生成 auth 数据</span></span><br><span class=\"line\">            FormBody.Builder newFormBody = <span class=\"keyword\">new</span> FormBody.Builder();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; oldFormBody.size(); i++) &#123;</span><br><span class=\"line\">                newFormBody.addEncoded(oldFormBody.encodedName(i), oldFormBody.encodedValue(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            newFormBody.add(<span class=\"string\">\"auth\"</span>, assembleAuth(authMap, <span class=\"keyword\">true</span>));</span><br><span class=\"line\">            requestBuilder.method(request.method(), newFormBody.build());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> requestBuilder.build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Builder 构造函数,用来设置 Authorize 的相关参数,及创建工作</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">        AuthorizeInterceptor authorizeInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            authorizeInterceptor = <span class=\"keyword\">new</span> AuthorizeInterceptor();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setMid</span><span class=\"params\">(String mid)</span> </span>&#123;</span><br><span class=\"line\">            authorizeInterceptor.mid = mid;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setAuthKey</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">            authorizeInterceptor.authKey = key;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> AuthorizeInterceptor <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> authorizeInterceptor;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该加签方式,讲请求参数拼接为 <code>key=value</code> 的方式, 难点在于如何从 OkHttp 中获取这些参数,在 GET 请求和 POST 的处理方式又不同,代码中 POST 请求方式,又会根据请求传递的 <code>contentType</code> 而又有所不同,这里介绍了<code>Form</code>表单提交和 <code>Multipart</code> 上传文件的参数获取方式,其他的请举一反三.</p>"},{"title":"多个 ssh 公钥提交代码到不同平台","date":"2019-04-17T14:09:21.000Z","_content":"\n作为一个技术开发人员，免不了在 `github` 以及 `gitlab` 以及其他 `git` 平台上进行代码管理；\n工作中您可能使用 `svn` （这不在我们的讨论范围）,也有可能使用 `git`, 生活中，您可能会将一些内容分享到你的 `github` 上， 供大家参阅。\n\n`git` 创建版本库很容易， `clone` 代码也仅仅是简单的一句 `git clone https://github.com/xxxx.git`，异或是 `git clone git@github.com:xxxxx.git`；当然，使用 `https` 的方式简单易操作（本人认为是一个傻瓜相机），但是通过使用 `https` 的方式，经常会遇到需要输入账号和密码的情况，这大大的加大了安全问题，虽然某 dear 的图形化工具，会帮助我们 remeber 账号和密码，避免了重复输入，但这不在我们的讨论范围（个人很鄙视使用图形化界面的），接下来要说的就是使用 `SSH` 的方式来处理 `git` 的版本管理。\n\n<!--more-->\n\n## 生成 SSH 密钥\n\n使用 `SSH` 创建一套公密钥，将公钥添加到你要使用的 `Git` 平台账户下\n\n```\nssh-keygen -t rsa -C \"your email addr\" -f ~/.ssh/github\n```\n\n注意：\n1. `-f` 后面的参数是用来自定义 SSH KEY 的存放路径，如果不需要也可以自 -f 开始省略\n2. 命令输入完成后，连击3下回车就可以，不需要处理操作（除非你很想处理）\n\n## 添加生成的 SSH 公钥\n\n添加 ssh 公钥到 `github` **\n    \n1. 打开 `https://github.com/settings/profile` ，选择 `SSH and GPG keys`\n\n    ![](https://raw.githubusercontent.com/boywithsmalleyes/static_file/master/images/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190425135335.png)\n2. 点击 `New SSH key`\n\n    1. title 可以随便写，建议见名知意，能知道是哪台设备\n    2. key 通过刚刚通过 `SSH` 命令生成的 `.pub` 文件中复制即可。文件路径 `.ssh/id_rsa.pub` 异或是存在您 `-f` 之后指定的目录。\n    3. 点击 `add SSH key`\n\n\n## 配置多个 ssh\n\n配置多个 `ssh` 时，需要注意的是：\n\n1. 如果你未指定公钥的存储路径，那么你需要一个一个的手动去创建，并配置 `ssh` 公钥到对应平台，否则，后续的 `ssh` 创建过程， 会覆盖掉之前创建的。\n2. `ssh-keygen` 会同时创建 `id_rsa` 和 `id_rsa.pub` 两个文件， `.pub` 是公钥， 不带后缀的是你的私钥。\n3. 同时配置多个 `ssh` 时，需要您保留私钥在 `.ssh` 目录下，为保证多平台都可以使用，您需要手动修改一下 `id_rsa` 文件的名称，`.pub` 就随便了，配置完，就没用了。\n4. 将密钥添加到 `ssh-agent` 中\n\n    ```\n    ssh-add ~.ssh/id_rsa\n    ```\n    \n    ```\n    # 查看 agent 中的密钥\n    ssh-add -l\n    # 查看 agent 中的公钥\n    ssh-add -L\n    # 删除 agent 中的密钥\n    ssh-add -d .ssh/id_xxx.pub\n    ```\n\n\n## 修改配置文件\n\n说了半天，终于到重点了\n\n1. 在 `~/.ssh` 目录下新建一个 `config` 文件\n\n    对，没有错，就是一个连后缀都没有的文件，这个文件用来存储您的所有平台信息，以及平台对应使用的 `ssh` 密钥。\n    `touch config`\n\n2. 添加以下配置信息\n\n    ```\n    # github\n    Host github.com # 也可以是数字 ip 地址，加不加 http/https 都无所谓\n    HostName github.com # 同上\n    PreferredAuthentications publickey # 这里不要修改\n    IdentityFile ~/.ssh/id_rsa_github # 这里的文件名修改为该平台对应的密钥\n    \n    # gitlab\n    Host 公司 gitlab 地址\n    HostName 公司 gitlab 地址\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_gitlab\n    \n    ...\n    ```\n\n## 测试\n\n命令为：\n\n```\nssh -T git@github.com\n```\n\n结果\n\n```\nHi boywithsmalleyes! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n只需要替换后面的 `git`仓库地址, 其他版本库都可以进行测试。\n\n\n\n## 结语\n\n说了半天， 还是要记住一点，既然要使用 `ssh` 的方式进行版本管理，那么在 `clone` 代码时，也要使用 `ssh` 方式， 不然我说了这么半天，都是白扯。\n\n\n\n\n\n\n\n> 文章内容有瑕疵，请给予指正批评\n\n","source":"_posts/多个-ssh-公钥提交代码到不同平台.md","raw":"---\ntitle: 多个 ssh 公钥提交代码到不同平台\ndate: 2019-04-17 22:09:21\ntags: Git\n---\n\n作为一个技术开发人员，免不了在 `github` 以及 `gitlab` 以及其他 `git` 平台上进行代码管理；\n工作中您可能使用 `svn` （这不在我们的讨论范围）,也有可能使用 `git`, 生活中，您可能会将一些内容分享到你的 `github` 上， 供大家参阅。\n\n`git` 创建版本库很容易， `clone` 代码也仅仅是简单的一句 `git clone https://github.com/xxxx.git`，异或是 `git clone git@github.com:xxxxx.git`；当然，使用 `https` 的方式简单易操作（本人认为是一个傻瓜相机），但是通过使用 `https` 的方式，经常会遇到需要输入账号和密码的情况，这大大的加大了安全问题，虽然某 dear 的图形化工具，会帮助我们 remeber 账号和密码，避免了重复输入，但这不在我们的讨论范围（个人很鄙视使用图形化界面的），接下来要说的就是使用 `SSH` 的方式来处理 `git` 的版本管理。\n\n<!--more-->\n\n## 生成 SSH 密钥\n\n使用 `SSH` 创建一套公密钥，将公钥添加到你要使用的 `Git` 平台账户下\n\n```\nssh-keygen -t rsa -C \"your email addr\" -f ~/.ssh/github\n```\n\n注意：\n1. `-f` 后面的参数是用来自定义 SSH KEY 的存放路径，如果不需要也可以自 -f 开始省略\n2. 命令输入完成后，连击3下回车就可以，不需要处理操作（除非你很想处理）\n\n## 添加生成的 SSH 公钥\n\n添加 ssh 公钥到 `github` **\n    \n1. 打开 `https://github.com/settings/profile` ，选择 `SSH and GPG keys`\n\n    ![](https://raw.githubusercontent.com/boywithsmalleyes/static_file/master/images/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190425135335.png)\n2. 点击 `New SSH key`\n\n    1. title 可以随便写，建议见名知意，能知道是哪台设备\n    2. key 通过刚刚通过 `SSH` 命令生成的 `.pub` 文件中复制即可。文件路径 `.ssh/id_rsa.pub` 异或是存在您 `-f` 之后指定的目录。\n    3. 点击 `add SSH key`\n\n\n## 配置多个 ssh\n\n配置多个 `ssh` 时，需要注意的是：\n\n1. 如果你未指定公钥的存储路径，那么你需要一个一个的手动去创建，并配置 `ssh` 公钥到对应平台，否则，后续的 `ssh` 创建过程， 会覆盖掉之前创建的。\n2. `ssh-keygen` 会同时创建 `id_rsa` 和 `id_rsa.pub` 两个文件， `.pub` 是公钥， 不带后缀的是你的私钥。\n3. 同时配置多个 `ssh` 时，需要您保留私钥在 `.ssh` 目录下，为保证多平台都可以使用，您需要手动修改一下 `id_rsa` 文件的名称，`.pub` 就随便了，配置完，就没用了。\n4. 将密钥添加到 `ssh-agent` 中\n\n    ```\n    ssh-add ~.ssh/id_rsa\n    ```\n    \n    ```\n    # 查看 agent 中的密钥\n    ssh-add -l\n    # 查看 agent 中的公钥\n    ssh-add -L\n    # 删除 agent 中的密钥\n    ssh-add -d .ssh/id_xxx.pub\n    ```\n\n\n## 修改配置文件\n\n说了半天，终于到重点了\n\n1. 在 `~/.ssh` 目录下新建一个 `config` 文件\n\n    对，没有错，就是一个连后缀都没有的文件，这个文件用来存储您的所有平台信息，以及平台对应使用的 `ssh` 密钥。\n    `touch config`\n\n2. 添加以下配置信息\n\n    ```\n    # github\n    Host github.com # 也可以是数字 ip 地址，加不加 http/https 都无所谓\n    HostName github.com # 同上\n    PreferredAuthentications publickey # 这里不要修改\n    IdentityFile ~/.ssh/id_rsa_github # 这里的文件名修改为该平台对应的密钥\n    \n    # gitlab\n    Host 公司 gitlab 地址\n    HostName 公司 gitlab 地址\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_gitlab\n    \n    ...\n    ```\n\n## 测试\n\n命令为：\n\n```\nssh -T git@github.com\n```\n\n结果\n\n```\nHi boywithsmalleyes! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n只需要替换后面的 `git`仓库地址, 其他版本库都可以进行测试。\n\n\n\n## 结语\n\n说了半天， 还是要记住一点，既然要使用 `ssh` 的方式进行版本管理，那么在 `clone` 代码时，也要使用 `ssh` 方式， 不然我说了这么半天，都是白扯。\n\n\n\n\n\n\n\n> 文章内容有瑕疵，请给予指正批评\n\n","slug":"多个-ssh-公钥提交代码到不同平台","published":1,"updated":"2019-06-23T14:35:50.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcnczfv000r16y9pl4612v1","content":"<p>作为一个技术开发人员，免不了在 <code>github</code> 以及 <code>gitlab</code> 以及其他 <code>git</code> 平台上进行代码管理；<br>工作中您可能使用 <code>svn</code> （这不在我们的讨论范围）,也有可能使用 <code>git</code>, 生活中，您可能会将一些内容分享到你的 <code>github</code> 上， 供大家参阅。</p>\n<p><code>git</code> 创建版本库很容易， <code>clone</code> 代码也仅仅是简单的一句 <code>git clone https://github.com/xxxx.git</code>，异或是 <code>git clone git@github.com:xxxxx.git</code>；当然，使用 <code>https</code> 的方式简单易操作（本人认为是一个傻瓜相机），但是通过使用 <code>https</code> 的方式，经常会遇到需要输入账号和密码的情况，这大大的加大了安全问题，虽然某 dear 的图形化工具，会帮助我们 remeber 账号和密码，避免了重复输入，但这不在我们的讨论范围（个人很鄙视使用图形化界面的），接下来要说的就是使用 <code>SSH</code> 的方式来处理 <code>git</code> 的版本管理。</p>\n<a id=\"more\"></a>\n<h2 id=\"生成-SSH-密钥\"><a href=\"#生成-SSH-密钥\" class=\"headerlink\" title=\"生成 SSH 密钥\"></a>生成 SSH 密钥</h2><p>使用 <code>SSH</code> 创建一套公密钥，将公钥添加到你要使用的 <code>Git</code> 平台账户下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;your email addr&quot; -f ~/.ssh/github</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ol>\n<li><code>-f</code> 后面的参数是用来自定义 SSH KEY 的存放路径，如果不需要也可以自 -f 开始省略</li>\n<li>命令输入完成后，连击3下回车就可以，不需要处理操作（除非你很想处理）</li>\n</ol>\n<h2 id=\"添加生成的-SSH-公钥\"><a href=\"#添加生成的-SSH-公钥\" class=\"headerlink\" title=\"添加生成的 SSH 公钥\"></a>添加生成的 SSH 公钥</h2><p>添加 ssh 公钥到 <code>github</code> **</p>\n<ol>\n<li><p>打开 <code>https://github.com/settings/profile</code> ，选择 <code>SSH and GPG keys</code></p>\n<p> <img src=\"https://raw.githubusercontent.com/boywithsmalleyes/static_file/master/images/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190425135335.png\" alt></p>\n</li>\n<li><p>点击 <code>New SSH key</code></p>\n<ol>\n<li>title 可以随便写，建议见名知意，能知道是哪台设备</li>\n<li>key 通过刚刚通过 <code>SSH</code> 命令生成的 <code>.pub</code> 文件中复制即可。文件路径 <code>.ssh/id_rsa.pub</code> 异或是存在您 <code>-f</code> 之后指定的目录。</li>\n<li>点击 <code>add SSH key</code></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"配置多个-ssh\"><a href=\"#配置多个-ssh\" class=\"headerlink\" title=\"配置多个 ssh\"></a>配置多个 ssh</h2><p>配置多个 <code>ssh</code> 时，需要注意的是：</p>\n<ol>\n<li>如果你未指定公钥的存储路径，那么你需要一个一个的手动去创建，并配置 <code>ssh</code> 公钥到对应平台，否则，后续的 <code>ssh</code> 创建过程， 会覆盖掉之前创建的。</li>\n<li><code>ssh-keygen</code> 会同时创建 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件， <code>.pub</code> 是公钥， 不带后缀的是你的私钥。</li>\n<li>同时配置多个 <code>ssh</code> 时，需要您保留私钥在 <code>.ssh</code> 目录下，为保证多平台都可以使用，您需要手动修改一下 <code>id_rsa</code> 文件的名称，<code>.pub</code> 就随便了，配置完，就没用了。</li>\n<li><p>将密钥添加到 <code>ssh-agent</code> 中</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add ~.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看 agent 中的密钥</span><br><span class=\"line\">ssh-add -l</span><br><span class=\"line\"># 查看 agent 中的公钥</span><br><span class=\"line\">ssh-add -L</span><br><span class=\"line\"># 删除 agent 中的密钥</span><br><span class=\"line\">ssh-add -d .ssh/id_xxx.pub</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p>说了半天，终于到重点了</p>\n<ol>\n<li><p>在 <code>~/.ssh</code> 目录下新建一个 <code>config</code> 文件</p>\n<p> 对，没有错，就是一个连后缀都没有的文件，这个文件用来存储您的所有平台信息，以及平台对应使用的 <code>ssh</code> 密钥。<br> <code>touch config</code></p>\n</li>\n<li><p>添加以下配置信息</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># github</span><br><span class=\"line\">Host github.com # 也可以是数字 ip 地址，加不加 http/https 都无所谓</span><br><span class=\"line\">HostName github.com # 同上</span><br><span class=\"line\">PreferredAuthentications publickey # 这里不要修改</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa_github # 这里的文件名修改为该平台对应的密钥</span><br><span class=\"line\"></span><br><span class=\"line\"># gitlab</span><br><span class=\"line\">Host 公司 gitlab 地址</span><br><span class=\"line\">HostName 公司 gitlab 地址</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa_gitlab</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>命令为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi boywithsmalleyes! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n<p>只需要替换后面的 <code>git</code>仓库地址, 其他版本库都可以进行测试。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>说了半天， 还是要记住一点，既然要使用 <code>ssh</code> 的方式进行版本管理，那么在 <code>clone</code> 代码时，也要使用 <code>ssh</code> 方式， 不然我说了这么半天，都是白扯。</p>\n<blockquote>\n<p>文章内容有瑕疵，请给予指正批评</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>作为一个技术开发人员，免不了在 <code>github</code> 以及 <code>gitlab</code> 以及其他 <code>git</code> 平台上进行代码管理；<br>工作中您可能使用 <code>svn</code> （这不在我们的讨论范围）,也有可能使用 <code>git</code>, 生活中，您可能会将一些内容分享到你的 <code>github</code> 上， 供大家参阅。</p>\n<p><code>git</code> 创建版本库很容易， <code>clone</code> 代码也仅仅是简单的一句 <code>git clone https://github.com/xxxx.git</code>，异或是 <code>git clone git@github.com:xxxxx.git</code>；当然，使用 <code>https</code> 的方式简单易操作（本人认为是一个傻瓜相机），但是通过使用 <code>https</code> 的方式，经常会遇到需要输入账号和密码的情况，这大大的加大了安全问题，虽然某 dear 的图形化工具，会帮助我们 remeber 账号和密码，避免了重复输入，但这不在我们的讨论范围（个人很鄙视使用图形化界面的），接下来要说的就是使用 <code>SSH</code> 的方式来处理 <code>git</code> 的版本管理。</p>","more":"<h2 id=\"生成-SSH-密钥\"><a href=\"#生成-SSH-密钥\" class=\"headerlink\" title=\"生成 SSH 密钥\"></a>生成 SSH 密钥</h2><p>使用 <code>SSH</code> 创建一套公密钥，将公钥添加到你要使用的 <code>Git</code> 平台账户下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;your email addr&quot; -f ~/.ssh/github</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ol>\n<li><code>-f</code> 后面的参数是用来自定义 SSH KEY 的存放路径，如果不需要也可以自 -f 开始省略</li>\n<li>命令输入完成后，连击3下回车就可以，不需要处理操作（除非你很想处理）</li>\n</ol>\n<h2 id=\"添加生成的-SSH-公钥\"><a href=\"#添加生成的-SSH-公钥\" class=\"headerlink\" title=\"添加生成的 SSH 公钥\"></a>添加生成的 SSH 公钥</h2><p>添加 ssh 公钥到 <code>github</code> **</p>\n<ol>\n<li><p>打开 <code>https://github.com/settings/profile</code> ，选择 <code>SSH and GPG keys</code></p>\n<p> <img src=\"https://raw.githubusercontent.com/boywithsmalleyes/static_file/master/images/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190425135335.png\" alt></p>\n</li>\n<li><p>点击 <code>New SSH key</code></p>\n<ol>\n<li>title 可以随便写，建议见名知意，能知道是哪台设备</li>\n<li>key 通过刚刚通过 <code>SSH</code> 命令生成的 <code>.pub</code> 文件中复制即可。文件路径 <code>.ssh/id_rsa.pub</code> 异或是存在您 <code>-f</code> 之后指定的目录。</li>\n<li>点击 <code>add SSH key</code></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"配置多个-ssh\"><a href=\"#配置多个-ssh\" class=\"headerlink\" title=\"配置多个 ssh\"></a>配置多个 ssh</h2><p>配置多个 <code>ssh</code> 时，需要注意的是：</p>\n<ol>\n<li>如果你未指定公钥的存储路径，那么你需要一个一个的手动去创建，并配置 <code>ssh</code> 公钥到对应平台，否则，后续的 <code>ssh</code> 创建过程， 会覆盖掉之前创建的。</li>\n<li><code>ssh-keygen</code> 会同时创建 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件， <code>.pub</code> 是公钥， 不带后缀的是你的私钥。</li>\n<li>同时配置多个 <code>ssh</code> 时，需要您保留私钥在 <code>.ssh</code> 目录下，为保证多平台都可以使用，您需要手动修改一下 <code>id_rsa</code> 文件的名称，<code>.pub</code> 就随便了，配置完，就没用了。</li>\n<li><p>将密钥添加到 <code>ssh-agent</code> 中</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add ~.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看 agent 中的密钥</span><br><span class=\"line\">ssh-add -l</span><br><span class=\"line\"># 查看 agent 中的公钥</span><br><span class=\"line\">ssh-add -L</span><br><span class=\"line\"># 删除 agent 中的密钥</span><br><span class=\"line\">ssh-add -d .ssh/id_xxx.pub</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p>说了半天，终于到重点了</p>\n<ol>\n<li><p>在 <code>~/.ssh</code> 目录下新建一个 <code>config</code> 文件</p>\n<p> 对，没有错，就是一个连后缀都没有的文件，这个文件用来存储您的所有平台信息，以及平台对应使用的 <code>ssh</code> 密钥。<br> <code>touch config</code></p>\n</li>\n<li><p>添加以下配置信息</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># github</span><br><span class=\"line\">Host github.com # 也可以是数字 ip 地址，加不加 http/https 都无所谓</span><br><span class=\"line\">HostName github.com # 同上</span><br><span class=\"line\">PreferredAuthentications publickey # 这里不要修改</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa_github # 这里的文件名修改为该平台对应的密钥</span><br><span class=\"line\"></span><br><span class=\"line\"># gitlab</span><br><span class=\"line\">Host 公司 gitlab 地址</span><br><span class=\"line\">HostName 公司 gitlab 地址</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa_gitlab</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>命令为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi boywithsmalleyes! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n<p>只需要替换后面的 <code>git</code>仓库地址, 其他版本库都可以进行测试。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>说了半天， 还是要记住一点，既然要使用 <code>ssh</code> 的方式进行版本管理，那么在 <code>clone</code> 代码时，也要使用 <code>ssh</code> 方式， 不然我说了这么半天，都是白扯。</p>\n<blockquote>\n<p>文章内容有瑕疵，请给予指正批评</p>\n</blockquote>"},{"title":"事件分发","date":"2019-04-16T09:46:00.000Z","_content":"\n\n\n**事件分发的三个方法**\n\n1. dispatchTouchEvent(MotionEvent event) \n\n    判断当前 View 是否要消费此事件，消费，则不再向下传递，反之传递，以此来分发事件；\n2. onInterceptTouchEvent(MotionEvent event) \n\n    通过 dispatchTouchEvent 调用， 返回值用来判断当前 View 是否要消费事件；\n3. onTouchEvent(MotionEvent event) \n\n    当 View 决定消费事件，则将进行该方法的调用，依据具体的事件，及具体业务，实现不同的事件。\n\n<!--more-->\n**关于事件分发的一些结论：**\n\n1. 同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束，在这个过程中所产生的一系列事件，这个事件系列以 down 事件开始， 中间含有若干个 move 事件， 最终以 up 事件结束；\n2. 正常情况下，一个事件序列只能被一个 View 拦截且消耗。这一套哦的原因可以参考 3， 因为一旦一个元素拦截了某个事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个 View 同时处理，但是通过特殊手段可以做到，比如一个 View 将本该自己处理的事件，通过 onTouchEvent强行传递给其他 View 处理；\n3. 某个 View 一旦决定拦截，那么这一个事件序列都只能由它来处理（如果能传递到他的话），并且它的 onInterceptTouchEvent 不会再被调用。\n4. 某个 View 一旦开始处理事件，如果它不消耗 ACTION_DOWN 事件（onTouchEvent 返回 false）， 那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将会重新交由它的父元素去处理，即父元素的 onTouchEvent 会被调用，意思就是事件一旦交由一个 View 处理，那么它就必须消耗掉，否则同一事件序列中的剩下的事件就不在交给他来处理了。\n5. 如果 View 不消耗除 ACTION_DOWN 以外的其他事件， 那么这个点击事件会消失，此时父元素的 onTouchEvent 并不会被调用，并且当前 View 可以持续受到后续的事件，最终这些消失的点击事件会传递给 Activity 处理。\n6. ViewGroup 默认不拦截任何事件，Android 源码中 ViewGroup 的 onInterceptTouchEvent 方法默认返回 false。\n7. View 没有 onInterceptTouchEvent 方法，一旦有点击事件传递给他，那么他的 onTouchEvent 方法就会被调用。\n8. View 的 onTouchEvent 方法默认会消耗掉事件（返回 true），除非他是不可点击的（clickable 和 longClickable 同时为 false）。View 的 longClickable 属性默认都是 false，clickable 属性要分情况，比如 Button 的 clickable 属性默认是 true，而 TextView 的 clickable 默认未 false。\n9. View 的 enable 属性不影响 onTouchEvent 的默认返回值，哪怕一个 View 是 disable 状态，只要他的 clickable 或者 longClickable 有一个为 true， 那么他的 onTouchEvent 就返回true。\n10. onClick 会发生的前提是 View 是可点击的，并且它收到了 down 和 up 事件。\n11. 事件传递过程是有外向内的，即事件总是先传递给父元素，然后在由父元素分发给子 View，通过 requestDisallowInterceptTouchEvent 方法可以在子元素中干预父元素的事件分发过程，但是 ACTION_DOWN 事件除外（*解决滑动冲突，内部拦截法*）。\n12. 事件的传递过程：Activity -> Window(PhoneWindow) -> View -> dispatchTouchEvent -> onInterceptTouchEvent -> onTouchEvent。\n13. 当一个 View 需要处理事件时，如果它设置了 onTouchListener，那么 onTouchListener 中的 onTouch 方法会被回调。这时事件如何处理要看 onTouch 的返回值，返回 false，则当前 View 的 onTouchEvent 被调用，true， 则不调用。View 的 onTouchListener 方法优先级高于 onTouchEvent；onClickListener（需要完成有 up 操作） 方法在 onTouchEvent 中被调用，因此，onClickListener 处于事件传递的尾端。\n\n","source":"_posts/事件分发.md","raw":"---\ntitle: 事件分发\ndate: 2019-04-16 17:46:00\ntags: Android\n---\n\n\n\n**事件分发的三个方法**\n\n1. dispatchTouchEvent(MotionEvent event) \n\n    判断当前 View 是否要消费此事件，消费，则不再向下传递，反之传递，以此来分发事件；\n2. onInterceptTouchEvent(MotionEvent event) \n\n    通过 dispatchTouchEvent 调用， 返回值用来判断当前 View 是否要消费事件；\n3. onTouchEvent(MotionEvent event) \n\n    当 View 决定消费事件，则将进行该方法的调用，依据具体的事件，及具体业务，实现不同的事件。\n\n<!--more-->\n**关于事件分发的一些结论：**\n\n1. 同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束，在这个过程中所产生的一系列事件，这个事件系列以 down 事件开始， 中间含有若干个 move 事件， 最终以 up 事件结束；\n2. 正常情况下，一个事件序列只能被一个 View 拦截且消耗。这一套哦的原因可以参考 3， 因为一旦一个元素拦截了某个事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个 View 同时处理，但是通过特殊手段可以做到，比如一个 View 将本该自己处理的事件，通过 onTouchEvent强行传递给其他 View 处理；\n3. 某个 View 一旦决定拦截，那么这一个事件序列都只能由它来处理（如果能传递到他的话），并且它的 onInterceptTouchEvent 不会再被调用。\n4. 某个 View 一旦开始处理事件，如果它不消耗 ACTION_DOWN 事件（onTouchEvent 返回 false）， 那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将会重新交由它的父元素去处理，即父元素的 onTouchEvent 会被调用，意思就是事件一旦交由一个 View 处理，那么它就必须消耗掉，否则同一事件序列中的剩下的事件就不在交给他来处理了。\n5. 如果 View 不消耗除 ACTION_DOWN 以外的其他事件， 那么这个点击事件会消失，此时父元素的 onTouchEvent 并不会被调用，并且当前 View 可以持续受到后续的事件，最终这些消失的点击事件会传递给 Activity 处理。\n6. ViewGroup 默认不拦截任何事件，Android 源码中 ViewGroup 的 onInterceptTouchEvent 方法默认返回 false。\n7. View 没有 onInterceptTouchEvent 方法，一旦有点击事件传递给他，那么他的 onTouchEvent 方法就会被调用。\n8. View 的 onTouchEvent 方法默认会消耗掉事件（返回 true），除非他是不可点击的（clickable 和 longClickable 同时为 false）。View 的 longClickable 属性默认都是 false，clickable 属性要分情况，比如 Button 的 clickable 属性默认是 true，而 TextView 的 clickable 默认未 false。\n9. View 的 enable 属性不影响 onTouchEvent 的默认返回值，哪怕一个 View 是 disable 状态，只要他的 clickable 或者 longClickable 有一个为 true， 那么他的 onTouchEvent 就返回true。\n10. onClick 会发生的前提是 View 是可点击的，并且它收到了 down 和 up 事件。\n11. 事件传递过程是有外向内的，即事件总是先传递给父元素，然后在由父元素分发给子 View，通过 requestDisallowInterceptTouchEvent 方法可以在子元素中干预父元素的事件分发过程，但是 ACTION_DOWN 事件除外（*解决滑动冲突，内部拦截法*）。\n12. 事件的传递过程：Activity -> Window(PhoneWindow) -> View -> dispatchTouchEvent -> onInterceptTouchEvent -> onTouchEvent。\n13. 当一个 View 需要处理事件时，如果它设置了 onTouchListener，那么 onTouchListener 中的 onTouch 方法会被回调。这时事件如何处理要看 onTouch 的返回值，返回 false，则当前 View 的 onTouchEvent 被调用，true， 则不调用。View 的 onTouchListener 方法优先级高于 onTouchEvent；onClickListener（需要完成有 up 操作） 方法在 onTouchEvent 中被调用，因此，onClickListener 处于事件传递的尾端。\n\n","slug":"事件分发","published":1,"updated":"2019-06-23T14:36:46.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcnczg5000t16y96udzkekl","content":"<p><strong>事件分发的三个方法</strong></p>\n<ol>\n<li><p>dispatchTouchEvent(MotionEvent event) </p>\n<p> 判断当前 View 是否要消费此事件，消费，则不再向下传递，反之传递，以此来分发事件；</p>\n</li>\n<li><p>onInterceptTouchEvent(MotionEvent event) </p>\n<p> 通过 dispatchTouchEvent 调用， 返回值用来判断当前 View 是否要消费事件；</p>\n</li>\n<li><p>onTouchEvent(MotionEvent event) </p>\n<p> 当 View 决定消费事件，则将进行该方法的调用，依据具体的事件，及具体业务，实现不同的事件。</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<p><strong>关于事件分发的一些结论：</strong></p>\n<ol>\n<li>同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束，在这个过程中所产生的一系列事件，这个事件系列以 down 事件开始， 中间含有若干个 move 事件， 最终以 up 事件结束；</li>\n<li>正常情况下，一个事件序列只能被一个 View 拦截且消耗。这一套哦的原因可以参考 3， 因为一旦一个元素拦截了某个事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个 View 同时处理，但是通过特殊手段可以做到，比如一个 View 将本该自己处理的事件，通过 onTouchEvent强行传递给其他 View 处理；</li>\n<li>某个 View 一旦决定拦截，那么这一个事件序列都只能由它来处理（如果能传递到他的话），并且它的 onInterceptTouchEvent 不会再被调用。</li>\n<li>某个 View 一旦开始处理事件，如果它不消耗 ACTION_DOWN 事件（onTouchEvent 返回 false）， 那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将会重新交由它的父元素去处理，即父元素的 onTouchEvent 会被调用，意思就是事件一旦交由一个 View 处理，那么它就必须消耗掉，否则同一事件序列中的剩下的事件就不在交给他来处理了。</li>\n<li>如果 View 不消耗除 ACTION_DOWN 以外的其他事件， 那么这个点击事件会消失，此时父元素的 onTouchEvent 并不会被调用，并且当前 View 可以持续受到后续的事件，最终这些消失的点击事件会传递给 Activity 处理。</li>\n<li>ViewGroup 默认不拦截任何事件，Android 源码中 ViewGroup 的 onInterceptTouchEvent 方法默认返回 false。</li>\n<li>View 没有 onInterceptTouchEvent 方法，一旦有点击事件传递给他，那么他的 onTouchEvent 方法就会被调用。</li>\n<li>View 的 onTouchEvent 方法默认会消耗掉事件（返回 true），除非他是不可点击的（clickable 和 longClickable 同时为 false）。View 的 longClickable 属性默认都是 false，clickable 属性要分情况，比如 Button 的 clickable 属性默认是 true，而 TextView 的 clickable 默认未 false。</li>\n<li>View 的 enable 属性不影响 onTouchEvent 的默认返回值，哪怕一个 View 是 disable 状态，只要他的 clickable 或者 longClickable 有一个为 true， 那么他的 onTouchEvent 就返回true。</li>\n<li>onClick 会发生的前提是 View 是可点击的，并且它收到了 down 和 up 事件。</li>\n<li>事件传递过程是有外向内的，即事件总是先传递给父元素，然后在由父元素分发给子 View，通过 requestDisallowInterceptTouchEvent 方法可以在子元素中干预父元素的事件分发过程，但是 ACTION_DOWN 事件除外（<em>解决滑动冲突，内部拦截法</em>）。</li>\n<li>事件的传递过程：Activity -&gt; Window(PhoneWindow) -&gt; View -&gt; dispatchTouchEvent -&gt; onInterceptTouchEvent -&gt; onTouchEvent。</li>\n<li>当一个 View 需要处理事件时，如果它设置了 onTouchListener，那么 onTouchListener 中的 onTouch 方法会被回调。这时事件如何处理要看 onTouch 的返回值，返回 false，则当前 View 的 onTouchEvent 被调用，true， 则不调用。View 的 onTouchListener 方法优先级高于 onTouchEvent；onClickListener（需要完成有 up 操作） 方法在 onTouchEvent 中被调用，因此，onClickListener 处于事件传递的尾端。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><strong>事件分发的三个方法</strong></p>\n<ol>\n<li><p>dispatchTouchEvent(MotionEvent event) </p>\n<p> 判断当前 View 是否要消费此事件，消费，则不再向下传递，反之传递，以此来分发事件；</p>\n</li>\n<li><p>onInterceptTouchEvent(MotionEvent event) </p>\n<p> 通过 dispatchTouchEvent 调用， 返回值用来判断当前 View 是否要消费事件；</p>\n</li>\n<li><p>onTouchEvent(MotionEvent event) </p>\n<p> 当 View 决定消费事件，则将进行该方法的调用，依据具体的事件，及具体业务，实现不同的事件。</p>\n</li>\n</ol>","more":"<p><strong>关于事件分发的一些结论：</strong></p>\n<ol>\n<li>同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束，在这个过程中所产生的一系列事件，这个事件系列以 down 事件开始， 中间含有若干个 move 事件， 最终以 up 事件结束；</li>\n<li>正常情况下，一个事件序列只能被一个 View 拦截且消耗。这一套哦的原因可以参考 3， 因为一旦一个元素拦截了某个事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个 View 同时处理，但是通过特殊手段可以做到，比如一个 View 将本该自己处理的事件，通过 onTouchEvent强行传递给其他 View 处理；</li>\n<li>某个 View 一旦决定拦截，那么这一个事件序列都只能由它来处理（如果能传递到他的话），并且它的 onInterceptTouchEvent 不会再被调用。</li>\n<li>某个 View 一旦开始处理事件，如果它不消耗 ACTION_DOWN 事件（onTouchEvent 返回 false）， 那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将会重新交由它的父元素去处理，即父元素的 onTouchEvent 会被调用，意思就是事件一旦交由一个 View 处理，那么它就必须消耗掉，否则同一事件序列中的剩下的事件就不在交给他来处理了。</li>\n<li>如果 View 不消耗除 ACTION_DOWN 以外的其他事件， 那么这个点击事件会消失，此时父元素的 onTouchEvent 并不会被调用，并且当前 View 可以持续受到后续的事件，最终这些消失的点击事件会传递给 Activity 处理。</li>\n<li>ViewGroup 默认不拦截任何事件，Android 源码中 ViewGroup 的 onInterceptTouchEvent 方法默认返回 false。</li>\n<li>View 没有 onInterceptTouchEvent 方法，一旦有点击事件传递给他，那么他的 onTouchEvent 方法就会被调用。</li>\n<li>View 的 onTouchEvent 方法默认会消耗掉事件（返回 true），除非他是不可点击的（clickable 和 longClickable 同时为 false）。View 的 longClickable 属性默认都是 false，clickable 属性要分情况，比如 Button 的 clickable 属性默认是 true，而 TextView 的 clickable 默认未 false。</li>\n<li>View 的 enable 属性不影响 onTouchEvent 的默认返回值，哪怕一个 View 是 disable 状态，只要他的 clickable 或者 longClickable 有一个为 true， 那么他的 onTouchEvent 就返回true。</li>\n<li>onClick 会发生的前提是 View 是可点击的，并且它收到了 down 和 up 事件。</li>\n<li>事件传递过程是有外向内的，即事件总是先传递给父元素，然后在由父元素分发给子 View，通过 requestDisallowInterceptTouchEvent 方法可以在子元素中干预父元素的事件分发过程，但是 ACTION_DOWN 事件除外（<em>解决滑动冲突，内部拦截法</em>）。</li>\n<li>事件的传递过程：Activity -&gt; Window(PhoneWindow) -&gt; View -&gt; dispatchTouchEvent -&gt; onInterceptTouchEvent -&gt; onTouchEvent。</li>\n<li>当一个 View 需要处理事件时，如果它设置了 onTouchListener，那么 onTouchListener 中的 onTouch 方法会被回调。这时事件如何处理要看 onTouch 的返回值，返回 false，则当前 View 的 onTouchEvent 被调用，true， 则不调用。View 的 onTouchListener 方法优先级高于 onTouchEvent；onClickListener（需要完成有 up 操作） 方法在 onTouchEvent 中被调用，因此，onClickListener 处于事件传递的尾端。</li>\n</ol>"},{"title":"清香木养殖（一）","date":"2019-05-04T13:54:08.000Z","_content":"\n\n激动的心，颤抖的手，京东上面动动手。\n哈哈，很久就有想养一个绿植的想法，经过了半年的挣扎，终于在 3 天前动起了手，入手一株**清香木**，据老板说，清香木可以散发出香味，充满整个房间，香气四溢（还未鉴定，刚收到，正怀着激动的心在写）。\n\n![清香木](https://raw.githubusercontent.com/boywithsmalleyes/static_file/master/images/WechatIMG68.jpeg)\n\n其实对这枝有一点小失望，就是个头太小，不过没关系，咱俩熬呗，早晚你会长大的。\n<!--more-->\n\n那么问题来了，我是一只程序狗，这种张飞绣花的事儿，着实让我头疼了一番；平日里坐在电脑前，噼里啪啦的敲着键盘，书写着一行行 ABC（突然想起一首歌《都选 C》），徜徉在编码的世界里。忽然之间，生活中多了一株绿植，让那份隐藏在我身体某处多年的小爱心又如雨后春笋一般，萌发了起来。可是啊，在编码的世界里，我可以装装样子，但在 ta 的世界里，我只能装孙子。\n\n自此之后，我将踏上绿植的养护之道，千里之行始于足下，就请你把我带入到你的世界里，深入的了解并爱上你吧。\n\nOK，说正事儿，先来介绍一下**清香木**：\n\n清香木非常收到花友的喜爱，是一种非常理想的盆栽植物，盆景清香木摆放在室内，能营造出一种野外山水树木移入家内的感觉，自然清新。原本生长我国的云脑中部、北部及四川南部等高海拔的干热河谷地带，具有耐阴性，喜好暖，生长缓慢，寿命长等特点（这也会我选择样 ta 的原因）。\n\n这里有一个养花的 APP，[养花大全](https://itunes.apple.com/cn/app/%E5%85%BB%E8%8A%B1%E5%A4%A7%E5%85%A8-%E5%85%BB%E8%8A%B1%E4%BA%BA%E7%9A%84%E5%9C%88%E5%AD%90/id1245612230?mt=8)，我就是在这上学习养花的技术及注意事项的。\n\n虽然我并没有经理过 ta 的出生，但后面的路我想和你一起。为你整理发型（修剪枝叶）、为你安家乐业（上盆定型），呵护你（土壤和水分），一路前行（光照和温度）。\n\n虽然 APP 上介绍了**清香木**一些喜好，也提供了一些养殖方法，但身在门外汉的我还是对绿植界的术语感到头疼，下面来介绍一下\n\n| 术语 | 含义  |\n| --- | --- |\n| 见干见湿 | 见干：土壤干涸，表面看不到潮湿。 见湿：浇水时，看土壤全部浸湿。 |\n| 浇水要浇透 | 浇水时，见到水从底部孔流出 |\n\n这个表格是我在看清香木养殖事项时遇到的问题，以后会继续更新。\n虽然这个术语刚到看的时候，一脸懵。我也请教了我的同事关于养护的问题，他也细心的解释了，而且还特别照顾我这个小白，用很生动的比喻让我理解透了这些属于。\n\n\n那么这里我在详细的说一下我的理解：\n\n* 见干见湿：要解释的和上面的含义一样，那么我还要补充的部分就是，土壤是自上而下干的， 因此表面上虽然干了，但是土壤内部其实还没有干，尤其是土壤底部（植物的根部），这个时候我们可以通过向土壤中插入一根木棍（要插到底儿哦😏），专门用来检测土壤湿度，拔出时记住木棍裸露在土壤外面的位置，拔出后用潮湿的部位去计算位置。保持根部的湿润，可以促进植物根系的发展，因此不需要经常给植物浇水。见湿也就是浇水时，保证土壤湿润即可。\n* 浇水要浇透：当我看到时我也和纳闷什么意思，而且和上面的见湿似乎又冲突，到底是见到土壤湿了就可以，还是要浇透？那什么又是浇透呢？经过我的调研和咨询，终于弄明白，这些情况是和土壤的成分有关系，因为土壤的透气性、保水性都对植物发育有很大影响，一旦有问题，很可能导致叶子发黄，脱落，甚至死亡。Emmm  我们说浇透的事儿，花盆底部是有一个小口的（不养花根部不懂事干嘛的，小时候帮妈妈浇花，水从那漏出来，还以为浪费了呢）。因为土壤成分不同，吸水、蓄水能力也不同，具体土壤成分先不介绍，简单说下原理---可以先浇一遍快水，就是将水分均匀的洒在土壤的表面，不要留干，都浸湿，见盆地有水分流出即可，等到 10 分钟之后，在进行一次浇水，同样是均匀的浇，并底部有水流出即可。这样就可以保证浇透了。\n\n> 小白在这献丑了，后续会持续更新\n\n","source":"_posts/清香木养殖（一）.md","raw":"---\ntitle: 清香木养殖（一）\ndate: 2019-05-04 21:54:08\ntags: 绿植\n---\n\n\n激动的心，颤抖的手，京东上面动动手。\n哈哈，很久就有想养一个绿植的想法，经过了半年的挣扎，终于在 3 天前动起了手，入手一株**清香木**，据老板说，清香木可以散发出香味，充满整个房间，香气四溢（还未鉴定，刚收到，正怀着激动的心在写）。\n\n![清香木](https://raw.githubusercontent.com/boywithsmalleyes/static_file/master/images/WechatIMG68.jpeg)\n\n其实对这枝有一点小失望，就是个头太小，不过没关系，咱俩熬呗，早晚你会长大的。\n<!--more-->\n\n那么问题来了，我是一只程序狗，这种张飞绣花的事儿，着实让我头疼了一番；平日里坐在电脑前，噼里啪啦的敲着键盘，书写着一行行 ABC（突然想起一首歌《都选 C》），徜徉在编码的世界里。忽然之间，生活中多了一株绿植，让那份隐藏在我身体某处多年的小爱心又如雨后春笋一般，萌发了起来。可是啊，在编码的世界里，我可以装装样子，但在 ta 的世界里，我只能装孙子。\n\n自此之后，我将踏上绿植的养护之道，千里之行始于足下，就请你把我带入到你的世界里，深入的了解并爱上你吧。\n\nOK，说正事儿，先来介绍一下**清香木**：\n\n清香木非常收到花友的喜爱，是一种非常理想的盆栽植物，盆景清香木摆放在室内，能营造出一种野外山水树木移入家内的感觉，自然清新。原本生长我国的云脑中部、北部及四川南部等高海拔的干热河谷地带，具有耐阴性，喜好暖，生长缓慢，寿命长等特点（这也会我选择样 ta 的原因）。\n\n这里有一个养花的 APP，[养花大全](https://itunes.apple.com/cn/app/%E5%85%BB%E8%8A%B1%E5%A4%A7%E5%85%A8-%E5%85%BB%E8%8A%B1%E4%BA%BA%E7%9A%84%E5%9C%88%E5%AD%90/id1245612230?mt=8)，我就是在这上学习养花的技术及注意事项的。\n\n虽然我并没有经理过 ta 的出生，但后面的路我想和你一起。为你整理发型（修剪枝叶）、为你安家乐业（上盆定型），呵护你（土壤和水分），一路前行（光照和温度）。\n\n虽然 APP 上介绍了**清香木**一些喜好，也提供了一些养殖方法，但身在门外汉的我还是对绿植界的术语感到头疼，下面来介绍一下\n\n| 术语 | 含义  |\n| --- | --- |\n| 见干见湿 | 见干：土壤干涸，表面看不到潮湿。 见湿：浇水时，看土壤全部浸湿。 |\n| 浇水要浇透 | 浇水时，见到水从底部孔流出 |\n\n这个表格是我在看清香木养殖事项时遇到的问题，以后会继续更新。\n虽然这个术语刚到看的时候，一脸懵。我也请教了我的同事关于养护的问题，他也细心的解释了，而且还特别照顾我这个小白，用很生动的比喻让我理解透了这些属于。\n\n\n那么这里我在详细的说一下我的理解：\n\n* 见干见湿：要解释的和上面的含义一样，那么我还要补充的部分就是，土壤是自上而下干的， 因此表面上虽然干了，但是土壤内部其实还没有干，尤其是土壤底部（植物的根部），这个时候我们可以通过向土壤中插入一根木棍（要插到底儿哦😏），专门用来检测土壤湿度，拔出时记住木棍裸露在土壤外面的位置，拔出后用潮湿的部位去计算位置。保持根部的湿润，可以促进植物根系的发展，因此不需要经常给植物浇水。见湿也就是浇水时，保证土壤湿润即可。\n* 浇水要浇透：当我看到时我也和纳闷什么意思，而且和上面的见湿似乎又冲突，到底是见到土壤湿了就可以，还是要浇透？那什么又是浇透呢？经过我的调研和咨询，终于弄明白，这些情况是和土壤的成分有关系，因为土壤的透气性、保水性都对植物发育有很大影响，一旦有问题，很可能导致叶子发黄，脱落，甚至死亡。Emmm  我们说浇透的事儿，花盆底部是有一个小口的（不养花根部不懂事干嘛的，小时候帮妈妈浇花，水从那漏出来，还以为浪费了呢）。因为土壤成分不同，吸水、蓄水能力也不同，具体土壤成分先不介绍，简单说下原理---可以先浇一遍快水，就是将水分均匀的洒在土壤的表面，不要留干，都浸湿，见盆地有水分流出即可，等到 10 分钟之后，在进行一次浇水，同样是均匀的浇，并底部有水流出即可。这样就可以保证浇透了。\n\n> 小白在这献丑了，后续会持续更新\n\n","slug":"清香木养殖（一）","published":1,"updated":"2019-05-04T14:52:51.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcnczgi000u16y9nw2ztqob","content":"<p>激动的心，颤抖的手，京东上面动动手。<br>哈哈，很久就有想养一个绿植的想法，经过了半年的挣扎，终于在 3 天前动起了手，入手一株<strong>清香木</strong>，据老板说，清香木可以散发出香味，充满整个房间，香气四溢（还未鉴定，刚收到，正怀着激动的心在写）。</p>\n<p><img src=\"https://raw.githubusercontent.com/boywithsmalleyes/static_file/master/images/WechatIMG68.jpeg\" alt=\"清香木\"></p>\n<p>其实对这枝有一点小失望，就是个头太小，不过没关系，咱俩熬呗，早晚你会长大的。<br><a id=\"more\"></a></p>\n<p>那么问题来了，我是一只程序狗，这种张飞绣花的事儿，着实让我头疼了一番；平日里坐在电脑前，噼里啪啦的敲着键盘，书写着一行行 ABC（突然想起一首歌《都选 C》），徜徉在编码的世界里。忽然之间，生活中多了一株绿植，让那份隐藏在我身体某处多年的小爱心又如雨后春笋一般，萌发了起来。可是啊，在编码的世界里，我可以装装样子，但在 ta 的世界里，我只能装孙子。</p>\n<p>自此之后，我将踏上绿植的养护之道，千里之行始于足下，就请你把我带入到你的世界里，深入的了解并爱上你吧。</p>\n<p>OK，说正事儿，先来介绍一下<strong>清香木</strong>：</p>\n<p>清香木非常收到花友的喜爱，是一种非常理想的盆栽植物，盆景清香木摆放在室内，能营造出一种野外山水树木移入家内的感觉，自然清新。原本生长我国的云脑中部、北部及四川南部等高海拔的干热河谷地带，具有耐阴性，喜好暖，生长缓慢，寿命长等特点（这也会我选择样 ta 的原因）。</p>\n<p>这里有一个养花的 APP，<a href=\"https://itunes.apple.com/cn/app/%E5%85%BB%E8%8A%B1%E5%A4%A7%E5%85%A8-%E5%85%BB%E8%8A%B1%E4%BA%BA%E7%9A%84%E5%9C%88%E5%AD%90/id1245612230?mt=8\" target=\"_blank\" rel=\"noopener\">养花大全</a>，我就是在这上学习养花的技术及注意事项的。</p>\n<p>虽然我并没有经理过 ta 的出生，但后面的路我想和你一起。为你整理发型（修剪枝叶）、为你安家乐业（上盆定型），呵护你（土壤和水分），一路前行（光照和温度）。</p>\n<p>虽然 APP 上介绍了<strong>清香木</strong>一些喜好，也提供了一些养殖方法，但身在门外汉的我还是对绿植界的术语感到头疼，下面来介绍一下</p>\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>见干见湿</td>\n<td>见干：土壤干涸，表面看不到潮湿。 见湿：浇水时，看土壤全部浸湿。</td>\n</tr>\n<tr>\n<td>浇水要浇透</td>\n<td>浇水时，见到水从底部孔流出</td>\n</tr>\n</tbody>\n</table>\n<p>这个表格是我在看清香木养殖事项时遇到的问题，以后会继续更新。<br>虽然这个术语刚到看的时候，一脸懵。我也请教了我的同事关于养护的问题，他也细心的解释了，而且还特别照顾我这个小白，用很生动的比喻让我理解透了这些属于。</p>\n<p>那么这里我在详细的说一下我的理解：</p>\n<ul>\n<li>见干见湿：要解释的和上面的含义一样，那么我还要补充的部分就是，土壤是自上而下干的， 因此表面上虽然干了，但是土壤内部其实还没有干，尤其是土壤底部（植物的根部），这个时候我们可以通过向土壤中插入一根木棍（要插到底儿哦😏），专门用来检测土壤湿度，拔出时记住木棍裸露在土壤外面的位置，拔出后用潮湿的部位去计算位置。保持根部的湿润，可以促进植物根系的发展，因此不需要经常给植物浇水。见湿也就是浇水时，保证土壤湿润即可。</li>\n<li>浇水要浇透：当我看到时我也和纳闷什么意思，而且和上面的见湿似乎又冲突，到底是见到土壤湿了就可以，还是要浇透？那什么又是浇透呢？经过我的调研和咨询，终于弄明白，这些情况是和土壤的成分有关系，因为土壤的透气性、保水性都对植物发育有很大影响，一旦有问题，很可能导致叶子发黄，脱落，甚至死亡。Emmm  我们说浇透的事儿，花盆底部是有一个小口的（不养花根部不懂事干嘛的，小时候帮妈妈浇花，水从那漏出来，还以为浪费了呢）。因为土壤成分不同，吸水、蓄水能力也不同，具体土壤成分先不介绍，简单说下原理—可以先浇一遍快水，就是将水分均匀的洒在土壤的表面，不要留干，都浸湿，见盆地有水分流出即可，等到 10 分钟之后，在进行一次浇水，同样是均匀的浇，并底部有水流出即可。这样就可以保证浇透了。</li>\n</ul>\n<blockquote>\n<p>小白在这献丑了，后续会持续更新</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>激动的心，颤抖的手，京东上面动动手。<br>哈哈，很久就有想养一个绿植的想法，经过了半年的挣扎，终于在 3 天前动起了手，入手一株<strong>清香木</strong>，据老板说，清香木可以散发出香味，充满整个房间，香气四溢（还未鉴定，刚收到，正怀着激动的心在写）。</p>\n<p><img src=\"https://raw.githubusercontent.com/boywithsmalleyes/static_file/master/images/WechatIMG68.jpeg\" alt=\"清香木\"></p>\n<p>其实对这枝有一点小失望，就是个头太小，不过没关系，咱俩熬呗，早晚你会长大的。<br>","more":"</p>\n<p>那么问题来了，我是一只程序狗，这种张飞绣花的事儿，着实让我头疼了一番；平日里坐在电脑前，噼里啪啦的敲着键盘，书写着一行行 ABC（突然想起一首歌《都选 C》），徜徉在编码的世界里。忽然之间，生活中多了一株绿植，让那份隐藏在我身体某处多年的小爱心又如雨后春笋一般，萌发了起来。可是啊，在编码的世界里，我可以装装样子，但在 ta 的世界里，我只能装孙子。</p>\n<p>自此之后，我将踏上绿植的养护之道，千里之行始于足下，就请你把我带入到你的世界里，深入的了解并爱上你吧。</p>\n<p>OK，说正事儿，先来介绍一下<strong>清香木</strong>：</p>\n<p>清香木非常收到花友的喜爱，是一种非常理想的盆栽植物，盆景清香木摆放在室内，能营造出一种野外山水树木移入家内的感觉，自然清新。原本生长我国的云脑中部、北部及四川南部等高海拔的干热河谷地带，具有耐阴性，喜好暖，生长缓慢，寿命长等特点（这也会我选择样 ta 的原因）。</p>\n<p>这里有一个养花的 APP，<a href=\"https://itunes.apple.com/cn/app/%E5%85%BB%E8%8A%B1%E5%A4%A7%E5%85%A8-%E5%85%BB%E8%8A%B1%E4%BA%BA%E7%9A%84%E5%9C%88%E5%AD%90/id1245612230?mt=8\" target=\"_blank\" rel=\"noopener\">养花大全</a>，我就是在这上学习养花的技术及注意事项的。</p>\n<p>虽然我并没有经理过 ta 的出生，但后面的路我想和你一起。为你整理发型（修剪枝叶）、为你安家乐业（上盆定型），呵护你（土壤和水分），一路前行（光照和温度）。</p>\n<p>虽然 APP 上介绍了<strong>清香木</strong>一些喜好，也提供了一些养殖方法，但身在门外汉的我还是对绿植界的术语感到头疼，下面来介绍一下</p>\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>见干见湿</td>\n<td>见干：土壤干涸，表面看不到潮湿。 见湿：浇水时，看土壤全部浸湿。</td>\n</tr>\n<tr>\n<td>浇水要浇透</td>\n<td>浇水时，见到水从底部孔流出</td>\n</tr>\n</tbody>\n</table>\n<p>这个表格是我在看清香木养殖事项时遇到的问题，以后会继续更新。<br>虽然这个术语刚到看的时候，一脸懵。我也请教了我的同事关于养护的问题，他也细心的解释了，而且还特别照顾我这个小白，用很生动的比喻让我理解透了这些属于。</p>\n<p>那么这里我在详细的说一下我的理解：</p>\n<ul>\n<li>见干见湿：要解释的和上面的含义一样，那么我还要补充的部分就是，土壤是自上而下干的， 因此表面上虽然干了，但是土壤内部其实还没有干，尤其是土壤底部（植物的根部），这个时候我们可以通过向土壤中插入一根木棍（要插到底儿哦😏），专门用来检测土壤湿度，拔出时记住木棍裸露在土壤外面的位置，拔出后用潮湿的部位去计算位置。保持根部的湿润，可以促进植物根系的发展，因此不需要经常给植物浇水。见湿也就是浇水时，保证土壤湿润即可。</li>\n<li>浇水要浇透：当我看到时我也和纳闷什么意思，而且和上面的见湿似乎又冲突，到底是见到土壤湿了就可以，还是要浇透？那什么又是浇透呢？经过我的调研和咨询，终于弄明白，这些情况是和土壤的成分有关系，因为土壤的透气性、保水性都对植物发育有很大影响，一旦有问题，很可能导致叶子发黄，脱落，甚至死亡。Emmm  我们说浇透的事儿，花盆底部是有一个小口的（不养花根部不懂事干嘛的，小时候帮妈妈浇花，水从那漏出来，还以为浪费了呢）。因为土壤成分不同，吸水、蓄水能力也不同，具体土壤成分先不介绍，简单说下原理—可以先浇一遍快水，就是将水分均匀的洒在土壤的表面，不要留干，都浸湿，见盆地有水分流出即可，等到 10 分钟之后，在进行一次浇水，同样是均匀的浇，并底部有水流出即可。这样就可以保证浇透了。</li>\n</ul>\n<blockquote>\n<p>小白在这献丑了，后续会持续更新</p>\n</blockquote>"},{"title":"开发一个Android IoT App","date":"2019-04-16T09:43:18.000Z","_content":"\n# 构建 Android IoT App\n\n本文翻译自[Building IoT APP for Android Things in 3 step](http://www.survivingwithandroid.com/2017/01/building-iot-app-android-things-android-iot-appplication-development.html)\n\n<!--more-->\n## 前言\n\n这篇文章主要描述了，如何为 Android Things 构建 Android IoT App。 也许你早已经知道了，最近 Google 发布了一个新的 IoT 操作系统-- Android Things。Android Things 系统，是由 Android 系统衍生出来的，更有意思的是，我们可以使用我们的 Android 知识来开发 Android IoT 应用程序。在开始之前，了解 [Android Things and how it works](http://www.survivingwithandroid.com/2017/01/android-things-android-internet-of-things.html) 是很有必要的。\n\n\n## 名词索引\n\nAndroid IoT App ： 安卓物联网应用\n\nRaspberry Pi 3 ： 树莓派 3\n\n\n\n## 目标\n\n这篇文章的目标是：\n\n1. 使用 Android Things 构建一个简单的 RGB Led 控制器\n2. 使用 Android API 构建 Android IoT UI 开发\n\n我们会使用 `Raspberry Pi 3 ` 作为 [IoT 开发板](http://www.survivingwithandroid.com/2016/08/iot-rapid-prototyping-board.html),你也可以使用其他的开发板去开发 Android Things。\n\n此Android IoT应用可帮助您熟悉新的Android Things API。 此外，这个物联网应用程序对于开发Android IoT 应用 UI 的概述很有用。\n\n## 步骤一\n\n通常情况下，一个 IoT 工程有两部分， 电气/电子部分和软件部分。让事情变得简单，使我们可以集中精力在Android IoT App, 这个 IoT 应用控制着一个简单的 RGB LED （共阳极）灯。RGB Led 灯使用220Ω电阻链接到 `Raspberry`， 每个颜色一个，原理图如下：\n\n![引脚原理图](http://upload-images.jianshu.io/upload_images/1550996-ce68329a358d9cb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n共阳极 RGB LED 灯非常常见，因此 `Raspberry Pi 3` 为引脚阳极供电。控制 LED 颜色的 RGB 引脚连接到 `Raspberry` 引脚：\n\n* Pin 29\n* Pin 31\n* Pin 33\n\n这些引脚索引是非常重要的，因为我们会在 Android IoT App 上使用它。 上电前，请仔细检查 Raspberry 链接是否有异常。\n\n现在，我们使用  `Android Studio` 创建一个 IoT 应用，第一步，配置 Android IoT 工程， build.gradle :\n\n```\ndependencies {\n    provided 'com.google.android.things:androidthings:0.1-devpreview'\n}\n```\n\nAndroid Things 使用 Activity ，就像我们在 Android 中使用一样。因此，让我们创建一个 `RGBThingsActivity` 类，并在 `onCreate` 方法中处理 `Pin` 通信。\n\n## 步骤二\n\n使用 `GPIO` 引脚与 RGB LED 传递信息。 `GPIO` 引脚使用可编程的接口去获取设备的状态或者设置输出值（高电平/低电平），使用 Respberry GPIO 音及哦啊，我们开启或关闭三个颜色的组件（红绿蓝）。\n\nAndroid Things SDK 提供了一个 `PeripheralManagerService` 的服务，去抽象 GPIO 通信接口。每当我们想读写数据时都必须使用它。一开始， Android IoT App 初始化服务，并设置引脚值：\n\n```\ntry {\n   PeripheralManagerService manager = new PeripheralManagerService();\n   blueIO = manager.openGpio(\"BCM5\");\n   blueIO.setDirection(Gpio.DIRECTION_OUT_INITIALLY_LOW);\n   greenIO = manager.openGpio(\"BCM6\");\n   greenIO.setDirection(Gpio.DIRECTION_OUT_INITIALLY_HIGH);\n   redIO = manager.openGpio(\"BCM13\");\n   redIO.setDirection(Gpio.DIRECTION_OUT_INITIALLY_LOW);\n   redIO.setValue(false);\n   blueIO.setValue(false);\n   greenIO.setValue(false);\n} catch (IOException e) {\n   Log.w(TAG, \"Unable to access GPIO\", e);\n}\n```\n\n这段代码介绍了一些新的重要的新方面。首先,我们必须选对引脚。如果使用的是 Respberry ，我们需要知道每一个引脚都有对应的序号。同样的方式，Android Things 使用相同的寻址模型，不管怎样，引脚的命名都是用不同的方式。通过 [Respberry Pin reference](https://developer.android.com/things/hardware/raspberrypi-io.html) ,下图：\n\n![树莓派引脚图](http://upload-images.jianshu.io/upload_images/1550996-0957d79bc802bd94?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以了解到 `Respberry Pi 3` 的引脚地址。这些地址名称在上面的代码中使用。 例如，要使用引脚BCM5（或引脚29），代码为：\n\n```\nblueIO = manager.openGpio(\"BCM5\");\n```\n\n开始， 我们设置所有的引脚为低电平状态（低电平即为关闭状态），此时 Led 灯为关闭状态。改变引脚的状态值，由低电平调整到高电平，或者有高电平调整为低电平，我们可以看到灯的颜色变化。\n\n## 步骤三\n\nAndroid Things 另外一个有趣的功能是，为我们提供了 UI Interface。 我们开发一个 UI Interface 给 Android IoT App 和开发 Android UI 一样。就像 Android app 一样， Android Things UI 同样是使用 xml 格式开发。 下面例子，我们去配置控制 RGB Led 显示的 3 个开关：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            android:orientation=\"vertical\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\">\n \n <Switch android:text=\"Red\"\n         android:layout_width=\"wrap_content\"\n         android:layout_height=\"wrap_content\"\n         android:id=\"@+id/switchRed\"\n         android:layout_marginTop=\"20dp\"/>\n \n <Switch android:text=\"Green\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/switchGreen\"\n        android:layout_marginTop=\"20dp\"/>\n \n <Switch android:text=\"Blue\"\n         android:layout_width=\"wrap_content\"\n         android:layout_height=\"wrap_content\"\n         android:id=\"@+id/switchBlue\"\n         android:layout_marginTop=\"20dp\"/>\n \n</LinearLayout>\n```\n\n在 `onCreate` 方法中，我们设置 layout 布局：\n\n```\n@Override\npublic void onCreate (Bundle savedInstanceState) {\n    super.onCreate(saveInstanceState);\n    setContentView(R.layout.activity_main);\n    ...\n}\n```\n\n处理用户开关：\n\n```\nSwitch switchRed = (Switch)findViewById(R.id.switchRed);\nswitch.setOnCheckedChangedListener(new CompoundButton.OnCheckedChangedListener(){\n    @Override\n    public void onCheckedChanged (CompoundButton buttonView, boolean isChecked){\n        try {\n            redIO.setValue(!isChecked);\n        } catch (IOException e) {\n            Log.w(TAG,\"Red GPIO Error\", e);\n        }\n    }\n});\n```\n\n我们必须为其他引脚重复同一段代码。最终结果如下：\n\n因 MarkDown 模式下， 简书不支持视频播放，请点击一下链接观看。\n\n[最终结果展示--需要翻墙 youtube 上观看](https://www.youtube.com/embed/KT_FAqMbbNQ)\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KT_FAqMbbNQ\" frameborder=\"0\" allowfullscreen></iframe>\n\n最后，要使用我们的应用程序，我们必须在 `Manifest.xml` 文件中条件：\n\n```\n<uses-library android:name=\"com.google.android.things\"/>\n```\n\n并且声明我的 `Activity` 是一个 IoT Activity， 启动脚本为：\n\n```\n<intent-filter>\n    <category android:name=\"android.intent.category.IOT_LAUNCHER\"/>\n    <category android:name=\"android.intent.category.DEFAULT”/>\n</intent-filter>\n```\n\n## 总结\n\n文章最后，你已经知道了如何更好的使用 Android Things。 有趣的是，使用一些新的 API Android 开发人员可以准备下一次技术革命成为物联网。此外，开发过程与 Android 应用程序相同。\n\n使用简单的几行代码，一个 Android 开发者就可以构建 Android IoT App.\n\n","source":"_posts/开发一个Android-IoT-App.md","raw":"---\ntitle: 开发一个Android IoT App\ndate: 2019-04-16 17:43:18\ntags: Android Things\n---\n\n# 构建 Android IoT App\n\n本文翻译自[Building IoT APP for Android Things in 3 step](http://www.survivingwithandroid.com/2017/01/building-iot-app-android-things-android-iot-appplication-development.html)\n\n<!--more-->\n## 前言\n\n这篇文章主要描述了，如何为 Android Things 构建 Android IoT App。 也许你早已经知道了，最近 Google 发布了一个新的 IoT 操作系统-- Android Things。Android Things 系统，是由 Android 系统衍生出来的，更有意思的是，我们可以使用我们的 Android 知识来开发 Android IoT 应用程序。在开始之前，了解 [Android Things and how it works](http://www.survivingwithandroid.com/2017/01/android-things-android-internet-of-things.html) 是很有必要的。\n\n\n## 名词索引\n\nAndroid IoT App ： 安卓物联网应用\n\nRaspberry Pi 3 ： 树莓派 3\n\n\n\n## 目标\n\n这篇文章的目标是：\n\n1. 使用 Android Things 构建一个简单的 RGB Led 控制器\n2. 使用 Android API 构建 Android IoT UI 开发\n\n我们会使用 `Raspberry Pi 3 ` 作为 [IoT 开发板](http://www.survivingwithandroid.com/2016/08/iot-rapid-prototyping-board.html),你也可以使用其他的开发板去开发 Android Things。\n\n此Android IoT应用可帮助您熟悉新的Android Things API。 此外，这个物联网应用程序对于开发Android IoT 应用 UI 的概述很有用。\n\n## 步骤一\n\n通常情况下，一个 IoT 工程有两部分， 电气/电子部分和软件部分。让事情变得简单，使我们可以集中精力在Android IoT App, 这个 IoT 应用控制着一个简单的 RGB LED （共阳极）灯。RGB Led 灯使用220Ω电阻链接到 `Raspberry`， 每个颜色一个，原理图如下：\n\n![引脚原理图](http://upload-images.jianshu.io/upload_images/1550996-ce68329a358d9cb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n共阳极 RGB LED 灯非常常见，因此 `Raspberry Pi 3` 为引脚阳极供电。控制 LED 颜色的 RGB 引脚连接到 `Raspberry` 引脚：\n\n* Pin 29\n* Pin 31\n* Pin 33\n\n这些引脚索引是非常重要的，因为我们会在 Android IoT App 上使用它。 上电前，请仔细检查 Raspberry 链接是否有异常。\n\n现在，我们使用  `Android Studio` 创建一个 IoT 应用，第一步，配置 Android IoT 工程， build.gradle :\n\n```\ndependencies {\n    provided 'com.google.android.things:androidthings:0.1-devpreview'\n}\n```\n\nAndroid Things 使用 Activity ，就像我们在 Android 中使用一样。因此，让我们创建一个 `RGBThingsActivity` 类，并在 `onCreate` 方法中处理 `Pin` 通信。\n\n## 步骤二\n\n使用 `GPIO` 引脚与 RGB LED 传递信息。 `GPIO` 引脚使用可编程的接口去获取设备的状态或者设置输出值（高电平/低电平），使用 Respberry GPIO 音及哦啊，我们开启或关闭三个颜色的组件（红绿蓝）。\n\nAndroid Things SDK 提供了一个 `PeripheralManagerService` 的服务，去抽象 GPIO 通信接口。每当我们想读写数据时都必须使用它。一开始， Android IoT App 初始化服务，并设置引脚值：\n\n```\ntry {\n   PeripheralManagerService manager = new PeripheralManagerService();\n   blueIO = manager.openGpio(\"BCM5\");\n   blueIO.setDirection(Gpio.DIRECTION_OUT_INITIALLY_LOW);\n   greenIO = manager.openGpio(\"BCM6\");\n   greenIO.setDirection(Gpio.DIRECTION_OUT_INITIALLY_HIGH);\n   redIO = manager.openGpio(\"BCM13\");\n   redIO.setDirection(Gpio.DIRECTION_OUT_INITIALLY_LOW);\n   redIO.setValue(false);\n   blueIO.setValue(false);\n   greenIO.setValue(false);\n} catch (IOException e) {\n   Log.w(TAG, \"Unable to access GPIO\", e);\n}\n```\n\n这段代码介绍了一些新的重要的新方面。首先,我们必须选对引脚。如果使用的是 Respberry ，我们需要知道每一个引脚都有对应的序号。同样的方式，Android Things 使用相同的寻址模型，不管怎样，引脚的命名都是用不同的方式。通过 [Respberry Pin reference](https://developer.android.com/things/hardware/raspberrypi-io.html) ,下图：\n\n![树莓派引脚图](http://upload-images.jianshu.io/upload_images/1550996-0957d79bc802bd94?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以了解到 `Respberry Pi 3` 的引脚地址。这些地址名称在上面的代码中使用。 例如，要使用引脚BCM5（或引脚29），代码为：\n\n```\nblueIO = manager.openGpio(\"BCM5\");\n```\n\n开始， 我们设置所有的引脚为低电平状态（低电平即为关闭状态），此时 Led 灯为关闭状态。改变引脚的状态值，由低电平调整到高电平，或者有高电平调整为低电平，我们可以看到灯的颜色变化。\n\n## 步骤三\n\nAndroid Things 另外一个有趣的功能是，为我们提供了 UI Interface。 我们开发一个 UI Interface 给 Android IoT App 和开发 Android UI 一样。就像 Android app 一样， Android Things UI 同样是使用 xml 格式开发。 下面例子，我们去配置控制 RGB Led 显示的 3 个开关：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            android:orientation=\"vertical\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\">\n \n <Switch android:text=\"Red\"\n         android:layout_width=\"wrap_content\"\n         android:layout_height=\"wrap_content\"\n         android:id=\"@+id/switchRed\"\n         android:layout_marginTop=\"20dp\"/>\n \n <Switch android:text=\"Green\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/switchGreen\"\n        android:layout_marginTop=\"20dp\"/>\n \n <Switch android:text=\"Blue\"\n         android:layout_width=\"wrap_content\"\n         android:layout_height=\"wrap_content\"\n         android:id=\"@+id/switchBlue\"\n         android:layout_marginTop=\"20dp\"/>\n \n</LinearLayout>\n```\n\n在 `onCreate` 方法中，我们设置 layout 布局：\n\n```\n@Override\npublic void onCreate (Bundle savedInstanceState) {\n    super.onCreate(saveInstanceState);\n    setContentView(R.layout.activity_main);\n    ...\n}\n```\n\n处理用户开关：\n\n```\nSwitch switchRed = (Switch)findViewById(R.id.switchRed);\nswitch.setOnCheckedChangedListener(new CompoundButton.OnCheckedChangedListener(){\n    @Override\n    public void onCheckedChanged (CompoundButton buttonView, boolean isChecked){\n        try {\n            redIO.setValue(!isChecked);\n        } catch (IOException e) {\n            Log.w(TAG,\"Red GPIO Error\", e);\n        }\n    }\n});\n```\n\n我们必须为其他引脚重复同一段代码。最终结果如下：\n\n因 MarkDown 模式下， 简书不支持视频播放，请点击一下链接观看。\n\n[最终结果展示--需要翻墙 youtube 上观看](https://www.youtube.com/embed/KT_FAqMbbNQ)\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KT_FAqMbbNQ\" frameborder=\"0\" allowfullscreen></iframe>\n\n最后，要使用我们的应用程序，我们必须在 `Manifest.xml` 文件中条件：\n\n```\n<uses-library android:name=\"com.google.android.things\"/>\n```\n\n并且声明我的 `Activity` 是一个 IoT Activity， 启动脚本为：\n\n```\n<intent-filter>\n    <category android:name=\"android.intent.category.IOT_LAUNCHER\"/>\n    <category android:name=\"android.intent.category.DEFAULT”/>\n</intent-filter>\n```\n\n## 总结\n\n文章最后，你已经知道了如何更好的使用 Android Things。 有趣的是，使用一些新的 API Android 开发人员可以准备下一次技术革命成为物联网。此外，开发过程与 Android 应用程序相同。\n\n使用简单的几行代码，一个 Android 开发者就可以构建 Android IoT App.\n\n","slug":"开发一个Android-IoT-App","published":1,"updated":"2019-04-17T13:54:19.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcnczgr000x16y9jm7r4pia","content":"<h1 id=\"构建-Android-IoT-App\"><a href=\"#构建-Android-IoT-App\" class=\"headerlink\" title=\"构建 Android IoT App\"></a>构建 Android IoT App</h1><p>本文翻译自<a href=\"http://www.survivingwithandroid.com/2017/01/building-iot-app-android-things-android-iot-appplication-development.html\" target=\"_blank\" rel=\"noopener\">Building IoT APP for Android Things in 3 step</a></p>\n<a id=\"more\"></a>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这篇文章主要描述了，如何为 Android Things 构建 Android IoT App。 也许你早已经知道了，最近 Google 发布了一个新的 IoT 操作系统– Android Things。Android Things 系统，是由 Android 系统衍生出来的，更有意思的是，我们可以使用我们的 Android 知识来开发 Android IoT 应用程序。在开始之前，了解 <a href=\"http://www.survivingwithandroid.com/2017/01/android-things-android-internet-of-things.html\" target=\"_blank\" rel=\"noopener\">Android Things and how it works</a> 是很有必要的。</p>\n<h2 id=\"名词索引\"><a href=\"#名词索引\" class=\"headerlink\" title=\"名词索引\"></a>名词索引</h2><p>Android IoT App ： 安卓物联网应用</p>\n<p>Raspberry Pi 3 ： 树莓派 3</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>这篇文章的目标是：</p>\n<ol>\n<li>使用 Android Things 构建一个简单的 RGB Led 控制器</li>\n<li>使用 Android API 构建 Android IoT UI 开发</li>\n</ol>\n<p>我们会使用 <code>Raspberry Pi 3</code> 作为 <a href=\"http://www.survivingwithandroid.com/2016/08/iot-rapid-prototyping-board.html\" target=\"_blank\" rel=\"noopener\">IoT 开发板</a>,你也可以使用其他的开发板去开发 Android Things。</p>\n<p>此Android IoT应用可帮助您熟悉新的Android Things API。 此外，这个物联网应用程序对于开发Android IoT 应用 UI 的概述很有用。</p>\n<h2 id=\"步骤一\"><a href=\"#步骤一\" class=\"headerlink\" title=\"步骤一\"></a>步骤一</h2><p>通常情况下，一个 IoT 工程有两部分， 电气/电子部分和软件部分。让事情变得简单，使我们可以集中精力在Android IoT App, 这个 IoT 应用控制着一个简单的 RGB LED （共阳极）灯。RGB Led 灯使用220Ω电阻链接到 <code>Raspberry</code>， 每个颜色一个，原理图如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-ce68329a358d9cb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"引脚原理图\"> </p>\n<p>共阳极 RGB LED 灯非常常见，因此 <code>Raspberry Pi 3</code> 为引脚阳极供电。控制 LED 颜色的 RGB 引脚连接到 <code>Raspberry</code> 引脚：</p>\n<ul>\n<li>Pin 29</li>\n<li>Pin 31</li>\n<li>Pin 33</li>\n</ul>\n<p>这些引脚索引是非常重要的，因为我们会在 Android IoT App 上使用它。 上电前，请仔细检查 Raspberry 链接是否有异常。</p>\n<p>现在，我们使用  <code>Android Studio</code> 创建一个 IoT 应用，第一步，配置 Android IoT 工程， build.gradle :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    provided &apos;com.google.android.things:androidthings:0.1-devpreview&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Android Things 使用 Activity ，就像我们在 Android 中使用一样。因此，让我们创建一个 <code>RGBThingsActivity</code> 类，并在 <code>onCreate</code> 方法中处理 <code>Pin</code> 通信。</p>\n<h2 id=\"步骤二\"><a href=\"#步骤二\" class=\"headerlink\" title=\"步骤二\"></a>步骤二</h2><p>使用 <code>GPIO</code> 引脚与 RGB LED 传递信息。 <code>GPIO</code> 引脚使用可编程的接口去获取设备的状态或者设置输出值（高电平/低电平），使用 Respberry GPIO 音及哦啊，我们开启或关闭三个颜色的组件（红绿蓝）。</p>\n<p>Android Things SDK 提供了一个 <code>PeripheralManagerService</code> 的服务，去抽象 GPIO 通信接口。每当我们想读写数据时都必须使用它。一开始， Android IoT App 初始化服务，并设置引脚值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">   PeripheralManagerService manager = new PeripheralManagerService();</span><br><span class=\"line\">   blueIO = manager.openGpio(&quot;BCM5&quot;);</span><br><span class=\"line\">   blueIO.setDirection(Gpio.DIRECTION_OUT_INITIALLY_LOW);</span><br><span class=\"line\">   greenIO = manager.openGpio(&quot;BCM6&quot;);</span><br><span class=\"line\">   greenIO.setDirection(Gpio.DIRECTION_OUT_INITIALLY_HIGH);</span><br><span class=\"line\">   redIO = manager.openGpio(&quot;BCM13&quot;);</span><br><span class=\"line\">   redIO.setDirection(Gpio.DIRECTION_OUT_INITIALLY_LOW);</span><br><span class=\"line\">   redIO.setValue(false);</span><br><span class=\"line\">   blueIO.setValue(false);</span><br><span class=\"line\">   greenIO.setValue(false);</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">   Log.w(TAG, &quot;Unable to access GPIO&quot;, e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码介绍了一些新的重要的新方面。首先,我们必须选对引脚。如果使用的是 Respberry ，我们需要知道每一个引脚都有对应的序号。同样的方式，Android Things 使用相同的寻址模型，不管怎样，引脚的命名都是用不同的方式。通过 <a href=\"https://developer.android.com/things/hardware/raspberrypi-io.html\" target=\"_blank\" rel=\"noopener\">Respberry Pin reference</a> ,下图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-0957d79bc802bd94?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"树莓派引脚图\"></p>\n<p>可以了解到 <code>Respberry Pi 3</code> 的引脚地址。这些地址名称在上面的代码中使用。 例如，要使用引脚BCM5（或引脚29），代码为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blueIO = manager.openGpio(&quot;BCM5&quot;);</span><br></pre></td></tr></table></figure>\n<p>开始， 我们设置所有的引脚为低电平状态（低电平即为关闭状态），此时 Led 灯为关闭状态。改变引脚的状态值，由低电平调整到高电平，或者有高电平调整为低电平，我们可以看到灯的颜色变化。</p>\n<h2 id=\"步骤三\"><a href=\"#步骤三\" class=\"headerlink\" title=\"步骤三\"></a>步骤三</h2><p>Android Things 另外一个有趣的功能是，为我们提供了 UI Interface。 我们开发一个 UI Interface 给 Android IoT App 和开发 Android UI 一样。就像 Android app 一样， Android Things UI 同样是使用 xml 格式开发。 下面例子，我们去配置控制 RGB Led 显示的 3 个开关：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">  &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">            android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;Switch android:text=&quot;Red&quot;</span><br><span class=\"line\">         android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">         android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">         android:id=&quot;@+id/switchRed&quot;</span><br><span class=\"line\">         android:layout_marginTop=&quot;20dp&quot;/&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;Switch android:text=&quot;Green&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:id=&quot;@+id/switchGreen&quot;</span><br><span class=\"line\">        android:layout_marginTop=&quot;20dp&quot;/&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;Switch android:text=&quot;Blue&quot;</span><br><span class=\"line\">         android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">         android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">         android:id=&quot;@+id/switchBlue&quot;</span><br><span class=\"line\">         android:layout_marginTop=&quot;20dp&quot;/&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n<p>在 <code>onCreate</code> 方法中，我们设置 layout 布局：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void onCreate (Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    super.onCreate(saveInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>处理用户开关：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Switch switchRed = (Switch)findViewById(R.id.switchRed);</span><br><span class=\"line\">switch.setOnCheckedChangedListener(new CompoundButton.OnCheckedChangedListener()&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onCheckedChanged (CompoundButton buttonView, boolean isChecked)&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            redIO.setValue(!isChecked);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            Log.w(TAG,&quot;Red GPIO Error&quot;, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们必须为其他引脚重复同一段代码。最终结果如下：</p>\n<p>因 MarkDown 模式下， 简书不支持视频播放，请点击一下链接观看。</p>\n<p><a href=\"https://www.youtube.com/embed/KT_FAqMbbNQ\" target=\"_blank\" rel=\"noopener\">最终结果展示–需要翻墙 youtube 上观看</a></p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KT_FAqMbbNQ\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>最后，要使用我们的应用程序，我们必须在 <code>Manifest.xml</code> 文件中条件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-library android:name=&quot;com.google.android.things&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>并且声明我的 <code>Activity</code> 是一个 IoT Activity， 启动脚本为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;intent-filter&gt;</span><br><span class=\"line\">    &lt;category android:name=&quot;android.intent.category.IOT_LAUNCHER&quot;/&gt;</span><br><span class=\"line\">    &lt;category android:name=&quot;android.intent.category.DEFAULT”/&gt;</span><br><span class=\"line\">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>文章最后，你已经知道了如何更好的使用 Android Things。 有趣的是，使用一些新的 API Android 开发人员可以准备下一次技术革命成为物联网。此外，开发过程与 Android 应用程序相同。</p>\n<p>使用简单的几行代码，一个 Android 开发者就可以构建 Android IoT App.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"构建-Android-IoT-App\"><a href=\"#构建-Android-IoT-App\" class=\"headerlink\" title=\"构建 Android IoT App\"></a>构建 Android IoT App</h1><p>本文翻译自<a href=\"http://www.survivingwithandroid.com/2017/01/building-iot-app-android-things-android-iot-appplication-development.html\" target=\"_blank\" rel=\"noopener\">Building IoT APP for Android Things in 3 step</a></p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这篇文章主要描述了，如何为 Android Things 构建 Android IoT App。 也许你早已经知道了，最近 Google 发布了一个新的 IoT 操作系统– Android Things。Android Things 系统，是由 Android 系统衍生出来的，更有意思的是，我们可以使用我们的 Android 知识来开发 Android IoT 应用程序。在开始之前，了解 <a href=\"http://www.survivingwithandroid.com/2017/01/android-things-android-internet-of-things.html\" target=\"_blank\" rel=\"noopener\">Android Things and how it works</a> 是很有必要的。</p>\n<h2 id=\"名词索引\"><a href=\"#名词索引\" class=\"headerlink\" title=\"名词索引\"></a>名词索引</h2><p>Android IoT App ： 安卓物联网应用</p>\n<p>Raspberry Pi 3 ： 树莓派 3</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>这篇文章的目标是：</p>\n<ol>\n<li>使用 Android Things 构建一个简单的 RGB Led 控制器</li>\n<li>使用 Android API 构建 Android IoT UI 开发</li>\n</ol>\n<p>我们会使用 <code>Raspberry Pi 3</code> 作为 <a href=\"http://www.survivingwithandroid.com/2016/08/iot-rapid-prototyping-board.html\" target=\"_blank\" rel=\"noopener\">IoT 开发板</a>,你也可以使用其他的开发板去开发 Android Things。</p>\n<p>此Android IoT应用可帮助您熟悉新的Android Things API。 此外，这个物联网应用程序对于开发Android IoT 应用 UI 的概述很有用。</p>\n<h2 id=\"步骤一\"><a href=\"#步骤一\" class=\"headerlink\" title=\"步骤一\"></a>步骤一</h2><p>通常情况下，一个 IoT 工程有两部分， 电气/电子部分和软件部分。让事情变得简单，使我们可以集中精力在Android IoT App, 这个 IoT 应用控制着一个简单的 RGB LED （共阳极）灯。RGB Led 灯使用220Ω电阻链接到 <code>Raspberry</code>， 每个颜色一个，原理图如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-ce68329a358d9cb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"引脚原理图\"> </p>\n<p>共阳极 RGB LED 灯非常常见，因此 <code>Raspberry Pi 3</code> 为引脚阳极供电。控制 LED 颜色的 RGB 引脚连接到 <code>Raspberry</code> 引脚：</p>\n<ul>\n<li>Pin 29</li>\n<li>Pin 31</li>\n<li>Pin 33</li>\n</ul>\n<p>这些引脚索引是非常重要的，因为我们会在 Android IoT App 上使用它。 上电前，请仔细检查 Raspberry 链接是否有异常。</p>\n<p>现在，我们使用  <code>Android Studio</code> 创建一个 IoT 应用，第一步，配置 Android IoT 工程， build.gradle :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    provided &apos;com.google.android.things:androidthings:0.1-devpreview&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Android Things 使用 Activity ，就像我们在 Android 中使用一样。因此，让我们创建一个 <code>RGBThingsActivity</code> 类，并在 <code>onCreate</code> 方法中处理 <code>Pin</code> 通信。</p>\n<h2 id=\"步骤二\"><a href=\"#步骤二\" class=\"headerlink\" title=\"步骤二\"></a>步骤二</h2><p>使用 <code>GPIO</code> 引脚与 RGB LED 传递信息。 <code>GPIO</code> 引脚使用可编程的接口去获取设备的状态或者设置输出值（高电平/低电平），使用 Respberry GPIO 音及哦啊，我们开启或关闭三个颜色的组件（红绿蓝）。</p>\n<p>Android Things SDK 提供了一个 <code>PeripheralManagerService</code> 的服务，去抽象 GPIO 通信接口。每当我们想读写数据时都必须使用它。一开始， Android IoT App 初始化服务，并设置引脚值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">   PeripheralManagerService manager = new PeripheralManagerService();</span><br><span class=\"line\">   blueIO = manager.openGpio(&quot;BCM5&quot;);</span><br><span class=\"line\">   blueIO.setDirection(Gpio.DIRECTION_OUT_INITIALLY_LOW);</span><br><span class=\"line\">   greenIO = manager.openGpio(&quot;BCM6&quot;);</span><br><span class=\"line\">   greenIO.setDirection(Gpio.DIRECTION_OUT_INITIALLY_HIGH);</span><br><span class=\"line\">   redIO = manager.openGpio(&quot;BCM13&quot;);</span><br><span class=\"line\">   redIO.setDirection(Gpio.DIRECTION_OUT_INITIALLY_LOW);</span><br><span class=\"line\">   redIO.setValue(false);</span><br><span class=\"line\">   blueIO.setValue(false);</span><br><span class=\"line\">   greenIO.setValue(false);</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">   Log.w(TAG, &quot;Unable to access GPIO&quot;, e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码介绍了一些新的重要的新方面。首先,我们必须选对引脚。如果使用的是 Respberry ，我们需要知道每一个引脚都有对应的序号。同样的方式，Android Things 使用相同的寻址模型，不管怎样，引脚的命名都是用不同的方式。通过 <a href=\"https://developer.android.com/things/hardware/raspberrypi-io.html\" target=\"_blank\" rel=\"noopener\">Respberry Pin reference</a> ,下图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1550996-0957d79bc802bd94?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"树莓派引脚图\"></p>\n<p>可以了解到 <code>Respberry Pi 3</code> 的引脚地址。这些地址名称在上面的代码中使用。 例如，要使用引脚BCM5（或引脚29），代码为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blueIO = manager.openGpio(&quot;BCM5&quot;);</span><br></pre></td></tr></table></figure>\n<p>开始， 我们设置所有的引脚为低电平状态（低电平即为关闭状态），此时 Led 灯为关闭状态。改变引脚的状态值，由低电平调整到高电平，或者有高电平调整为低电平，我们可以看到灯的颜色变化。</p>\n<h2 id=\"步骤三\"><a href=\"#步骤三\" class=\"headerlink\" title=\"步骤三\"></a>步骤三</h2><p>Android Things 另外一个有趣的功能是，为我们提供了 UI Interface。 我们开发一个 UI Interface 给 Android IoT App 和开发 Android UI 一样。就像 Android app 一样， Android Things UI 同样是使用 xml 格式开发。 下面例子，我们去配置控制 RGB Led 显示的 3 个开关：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">  &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">            android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;Switch android:text=&quot;Red&quot;</span><br><span class=\"line\">         android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">         android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">         android:id=&quot;@+id/switchRed&quot;</span><br><span class=\"line\">         android:layout_marginTop=&quot;20dp&quot;/&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;Switch android:text=&quot;Green&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:id=&quot;@+id/switchGreen&quot;</span><br><span class=\"line\">        android:layout_marginTop=&quot;20dp&quot;/&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;Switch android:text=&quot;Blue&quot;</span><br><span class=\"line\">         android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">         android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">         android:id=&quot;@+id/switchBlue&quot;</span><br><span class=\"line\">         android:layout_marginTop=&quot;20dp&quot;/&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n<p>在 <code>onCreate</code> 方法中，我们设置 layout 布局：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void onCreate (Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    super.onCreate(saveInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>处理用户开关：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Switch switchRed = (Switch)findViewById(R.id.switchRed);</span><br><span class=\"line\">switch.setOnCheckedChangedListener(new CompoundButton.OnCheckedChangedListener()&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onCheckedChanged (CompoundButton buttonView, boolean isChecked)&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            redIO.setValue(!isChecked);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            Log.w(TAG,&quot;Red GPIO Error&quot;, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们必须为其他引脚重复同一段代码。最终结果如下：</p>\n<p>因 MarkDown 模式下， 简书不支持视频播放，请点击一下链接观看。</p>\n<p><a href=\"https://www.youtube.com/embed/KT_FAqMbbNQ\" target=\"_blank\" rel=\"noopener\">最终结果展示–需要翻墙 youtube 上观看</a></p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KT_FAqMbbNQ\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>最后，要使用我们的应用程序，我们必须在 <code>Manifest.xml</code> 文件中条件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-library android:name=&quot;com.google.android.things&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>并且声明我的 <code>Activity</code> 是一个 IoT Activity， 启动脚本为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;intent-filter&gt;</span><br><span class=\"line\">    &lt;category android:name=&quot;android.intent.category.IOT_LAUNCHER&quot;/&gt;</span><br><span class=\"line\">    &lt;category android:name=&quot;android.intent.category.DEFAULT”/&gt;</span><br><span class=\"line\">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>文章最后，你已经知道了如何更好的使用 Android Things。 有趣的是，使用一些新的 API Android 开发人员可以准备下一次技术革命成为物联网。此外，开发过程与 Android 应用程序相同。</p>\n<p>使用简单的几行代码，一个 Android 开发者就可以构建 Android IoT App.</p>"},{"title":"清香木养殖（二）","date":"2019-05-08T03:02:23.000Z","_content":"\n心心切切,每天都会关注它的变化,可惜心急吃不得热豆腐;经过了几天, 发现它有一些枯叶和干枝,你是在向我宣战吗?????上网查询了一下发现其实是植物在更换了环境之后,需要一段时间的适应,枯叶干枝属于正常现象, 哈哈哈,还好你不是嫌弃我的小屋.\n\n\n记得高中那会,每天都在书本的海洋里飘荡,生物学自在其中,嘴边也总是在背诵着植物的\"光合作用\",\"呼吸作用\",这些知识早已深深铭记在心中,刻印在脑海,挥之不去.\n\n植物白天进行光合作用,吸收二氧化碳,释放氧气;夜晚呼吸作用吸收氧气,释放二氧化碳.这些知识让我认识了世界,然而并没有让我认识他.起初还是傻乎乎的每天出门上班时,把花放在窗台上,打开窗子,让他沐浴阳光,接受洗礼;可最近在浏览一些网站时,注意到一句话让我困惑不已----\"给予植物充足的光照,可以放在阳台上,但要避免太阳光直射\". 我懵了,我真的懵了, 既然都选择放在窗台上,难道窗台上的阳关就不是太阳直射了嘛????? 我很困惑, 爱琢磨的我在想, 窗台上有玻璃,Uh... 难道是隔着一层玻璃就不算直射了吗,, 哎, 这个问题,到现在我也没有想清楚.在经过不断的查询我发现其实植物进行光合作用并不是之可以有太阳光才可以.\n\n<!--more-->\n\n植物进行光合作用,叶绿体是主要功臣,高等植物的光合色素主要有叶绿素和类胡萝卜素,在颜色上叶绿素(叶绿素a 和叶绿色 b) 主要呈绿色, 类胡萝卜素(胡萝卜素和叶黄素) 呈黄色.叶绿素吸收光的能力极强,而对植物光合作用起到作用的是波长在 640 ~ 670 nm 的红光部分和波长在 430 ~ 450 的蓝紫光部分;因为太阳光不是单一的光,到达地表后波长在 300nm ~ 2600 nm, 只有波长在 390 ~ 770 nm为可见光(也就是我们常说的红橙黄绿青蓝紫,及其混合色),自然太阳光是可以满足植物进行光合作用的,同时,我们日常的照明灯例如:白炽灯,荧光灯,LED 灯,他们也可满足植物进行光合作用,但他们的波长不能满足植物光合作用的所有波长选择, 只能是单一, 比如只满足红光或蓝紫光.使用照明灯进行光照,只会导致植物缺少一些元素;淘宝上也有专门买植物光合作用需要的红光和蓝光的灯,但怎样都不如植物在外面晒几小时,大自然就是这么神奇.\n\n昨天为我的小心念移植了新居,因为刚刚收到他时,他的家有点破败,索性就为他换个豪宅.先用小铲铲松他的根基(不要贴着他,不然会伤害到哦),要不要用力去拔,伤到根部,就再也救不活了.慢慢的,要细心,待整体都很松动,能够连根带土的,一起从盆中带出,在新家先给他挖好容身之所,用手拖住他,细心的放在新家处,并埋好,然后少量的给予一些水分, 让他的家根基更夯实,不要过度浇水,但也要浇头,保持土壤松弛,这样氧气才能进入到土壤,让根部能够充分的进行呼吸作用.一直新家后,小心念属于脆弱的时候,这时不要让他在阳光下暴晒,不利于根部在新家落根.\n\n新家已经安排妥当,之后就是用心去观察他的变化,保持通风,和光照,他才会茁壮成长.\n\n","source":"_posts/清香木养殖（二）.md","raw":"---\ntitle: 清香木养殖（二）\ndate: 2019-05-08 11:02:23\ntags: 绿植\n---\n\n心心切切,每天都会关注它的变化,可惜心急吃不得热豆腐;经过了几天, 发现它有一些枯叶和干枝,你是在向我宣战吗?????上网查询了一下发现其实是植物在更换了环境之后,需要一段时间的适应,枯叶干枝属于正常现象, 哈哈哈,还好你不是嫌弃我的小屋.\n\n\n记得高中那会,每天都在书本的海洋里飘荡,生物学自在其中,嘴边也总是在背诵着植物的\"光合作用\",\"呼吸作用\",这些知识早已深深铭记在心中,刻印在脑海,挥之不去.\n\n植物白天进行光合作用,吸收二氧化碳,释放氧气;夜晚呼吸作用吸收氧气,释放二氧化碳.这些知识让我认识了世界,然而并没有让我认识他.起初还是傻乎乎的每天出门上班时,把花放在窗台上,打开窗子,让他沐浴阳光,接受洗礼;可最近在浏览一些网站时,注意到一句话让我困惑不已----\"给予植物充足的光照,可以放在阳台上,但要避免太阳光直射\". 我懵了,我真的懵了, 既然都选择放在窗台上,难道窗台上的阳关就不是太阳直射了嘛????? 我很困惑, 爱琢磨的我在想, 窗台上有玻璃,Uh... 难道是隔着一层玻璃就不算直射了吗,, 哎, 这个问题,到现在我也没有想清楚.在经过不断的查询我发现其实植物进行光合作用并不是之可以有太阳光才可以.\n\n<!--more-->\n\n植物进行光合作用,叶绿体是主要功臣,高等植物的光合色素主要有叶绿素和类胡萝卜素,在颜色上叶绿素(叶绿素a 和叶绿色 b) 主要呈绿色, 类胡萝卜素(胡萝卜素和叶黄素) 呈黄色.叶绿素吸收光的能力极强,而对植物光合作用起到作用的是波长在 640 ~ 670 nm 的红光部分和波长在 430 ~ 450 的蓝紫光部分;因为太阳光不是单一的光,到达地表后波长在 300nm ~ 2600 nm, 只有波长在 390 ~ 770 nm为可见光(也就是我们常说的红橙黄绿青蓝紫,及其混合色),自然太阳光是可以满足植物进行光合作用的,同时,我们日常的照明灯例如:白炽灯,荧光灯,LED 灯,他们也可满足植物进行光合作用,但他们的波长不能满足植物光合作用的所有波长选择, 只能是单一, 比如只满足红光或蓝紫光.使用照明灯进行光照,只会导致植物缺少一些元素;淘宝上也有专门买植物光合作用需要的红光和蓝光的灯,但怎样都不如植物在外面晒几小时,大自然就是这么神奇.\n\n昨天为我的小心念移植了新居,因为刚刚收到他时,他的家有点破败,索性就为他换个豪宅.先用小铲铲松他的根基(不要贴着他,不然会伤害到哦),要不要用力去拔,伤到根部,就再也救不活了.慢慢的,要细心,待整体都很松动,能够连根带土的,一起从盆中带出,在新家先给他挖好容身之所,用手拖住他,细心的放在新家处,并埋好,然后少量的给予一些水分, 让他的家根基更夯实,不要过度浇水,但也要浇头,保持土壤松弛,这样氧气才能进入到土壤,让根部能够充分的进行呼吸作用.一直新家后,小心念属于脆弱的时候,这时不要让他在阳光下暴晒,不利于根部在新家落根.\n\n新家已经安排妥当,之后就是用心去观察他的变化,保持通风,和光照,他才会茁壮成长.\n\n","slug":"清香木养殖（二）","published":1,"updated":"2019-06-23T14:33:59.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcnczh3000z16y9b48mzdtl","content":"<p>心心切切,每天都会关注它的变化,可惜心急吃不得热豆腐;经过了几天, 发现它有一些枯叶和干枝,你是在向我宣战吗?????上网查询了一下发现其实是植物在更换了环境之后,需要一段时间的适应,枯叶干枝属于正常现象, 哈哈哈,还好你不是嫌弃我的小屋.</p>\n<p>记得高中那会,每天都在书本的海洋里飘荡,生物学自在其中,嘴边也总是在背诵着植物的”光合作用”,”呼吸作用”,这些知识早已深深铭记在心中,刻印在脑海,挥之不去.</p>\n<p>植物白天进行光合作用,吸收二氧化碳,释放氧气;夜晚呼吸作用吸收氧气,释放二氧化碳.这些知识让我认识了世界,然而并没有让我认识他.起初还是傻乎乎的每天出门上班时,把花放在窗台上,打开窗子,让他沐浴阳光,接受洗礼;可最近在浏览一些网站时,注意到一句话让我困惑不已—-“给予植物充足的光照,可以放在阳台上,但要避免太阳光直射”. 我懵了,我真的懵了, 既然都选择放在窗台上,难道窗台上的阳关就不是太阳直射了嘛????? 我很困惑, 爱琢磨的我在想, 窗台上有玻璃,Uh… 难道是隔着一层玻璃就不算直射了吗,, 哎, 这个问题,到现在我也没有想清楚.在经过不断的查询我发现其实植物进行光合作用并不是之可以有太阳光才可以.</p>\n<a id=\"more\"></a>\n<p>植物进行光合作用,叶绿体是主要功臣,高等植物的光合色素主要有叶绿素和类胡萝卜素,在颜色上叶绿素(叶绿素a 和叶绿色 b) 主要呈绿色, 类胡萝卜素(胡萝卜素和叶黄素) 呈黄色.叶绿素吸收光的能力极强,而对植物光合作用起到作用的是波长在 640 ~ 670 nm 的红光部分和波长在 430 ~ 450 的蓝紫光部分;因为太阳光不是单一的光,到达地表后波长在 300nm ~ 2600 nm, 只有波长在 390 ~ 770 nm为可见光(也就是我们常说的红橙黄绿青蓝紫,及其混合色),自然太阳光是可以满足植物进行光合作用的,同时,我们日常的照明灯例如:白炽灯,荧光灯,LED 灯,他们也可满足植物进行光合作用,但他们的波长不能满足植物光合作用的所有波长选择, 只能是单一, 比如只满足红光或蓝紫光.使用照明灯进行光照,只会导致植物缺少一些元素;淘宝上也有专门买植物光合作用需要的红光和蓝光的灯,但怎样都不如植物在外面晒几小时,大自然就是这么神奇.</p>\n<p>昨天为我的小心念移植了新居,因为刚刚收到他时,他的家有点破败,索性就为他换个豪宅.先用小铲铲松他的根基(不要贴着他,不然会伤害到哦),要不要用力去拔,伤到根部,就再也救不活了.慢慢的,要细心,待整体都很松动,能够连根带土的,一起从盆中带出,在新家先给他挖好容身之所,用手拖住他,细心的放在新家处,并埋好,然后少量的给予一些水分, 让他的家根基更夯实,不要过度浇水,但也要浇头,保持土壤松弛,这样氧气才能进入到土壤,让根部能够充分的进行呼吸作用.一直新家后,小心念属于脆弱的时候,这时不要让他在阳光下暴晒,不利于根部在新家落根.</p>\n<p>新家已经安排妥当,之后就是用心去观察他的变化,保持通风,和光照,他才会茁壮成长.</p>\n","site":{"data":{}},"excerpt":"<p>心心切切,每天都会关注它的变化,可惜心急吃不得热豆腐;经过了几天, 发现它有一些枯叶和干枝,你是在向我宣战吗?????上网查询了一下发现其实是植物在更换了环境之后,需要一段时间的适应,枯叶干枝属于正常现象, 哈哈哈,还好你不是嫌弃我的小屋.</p>\n<p>记得高中那会,每天都在书本的海洋里飘荡,生物学自在其中,嘴边也总是在背诵着植物的”光合作用”,”呼吸作用”,这些知识早已深深铭记在心中,刻印在脑海,挥之不去.</p>\n<p>植物白天进行光合作用,吸收二氧化碳,释放氧气;夜晚呼吸作用吸收氧气,释放二氧化碳.这些知识让我认识了世界,然而并没有让我认识他.起初还是傻乎乎的每天出门上班时,把花放在窗台上,打开窗子,让他沐浴阳光,接受洗礼;可最近在浏览一些网站时,注意到一句话让我困惑不已—-“给予植物充足的光照,可以放在阳台上,但要避免太阳光直射”. 我懵了,我真的懵了, 既然都选择放在窗台上,难道窗台上的阳关就不是太阳直射了嘛????? 我很困惑, 爱琢磨的我在想, 窗台上有玻璃,Uh… 难道是隔着一层玻璃就不算直射了吗,, 哎, 这个问题,到现在我也没有想清楚.在经过不断的查询我发现其实植物进行光合作用并不是之可以有太阳光才可以.</p>","more":"<p>植物进行光合作用,叶绿体是主要功臣,高等植物的光合色素主要有叶绿素和类胡萝卜素,在颜色上叶绿素(叶绿素a 和叶绿色 b) 主要呈绿色, 类胡萝卜素(胡萝卜素和叶黄素) 呈黄色.叶绿素吸收光的能力极强,而对植物光合作用起到作用的是波长在 640 ~ 670 nm 的红光部分和波长在 430 ~ 450 的蓝紫光部分;因为太阳光不是单一的光,到达地表后波长在 300nm ~ 2600 nm, 只有波长在 390 ~ 770 nm为可见光(也就是我们常说的红橙黄绿青蓝紫,及其混合色),自然太阳光是可以满足植物进行光合作用的,同时,我们日常的照明灯例如:白炽灯,荧光灯,LED 灯,他们也可满足植物进行光合作用,但他们的波长不能满足植物光合作用的所有波长选择, 只能是单一, 比如只满足红光或蓝紫光.使用照明灯进行光照,只会导致植物缺少一些元素;淘宝上也有专门买植物光合作用需要的红光和蓝光的灯,但怎样都不如植物在外面晒几小时,大自然就是这么神奇.</p>\n<p>昨天为我的小心念移植了新居,因为刚刚收到他时,他的家有点破败,索性就为他换个豪宅.先用小铲铲松他的根基(不要贴着他,不然会伤害到哦),要不要用力去拔,伤到根部,就再也救不活了.慢慢的,要细心,待整体都很松动,能够连根带土的,一起从盆中带出,在新家先给他挖好容身之所,用手拖住他,细心的放在新家处,并埋好,然后少量的给予一些水分, 让他的家根基更夯实,不要过度浇水,但也要浇头,保持土壤松弛,这样氧气才能进入到土壤,让根部能够充分的进行呼吸作用.一直新家后,小心念属于脆弱的时候,这时不要让他在阳光下暴晒,不利于根部在新家落根.</p>\n<p>新家已经安排妥当,之后就是用心去观察他的变化,保持通风,和光照,他才会茁壮成长.</p>"},{"title":"清香木养殖（三）","date":"2019-06-23T11:49:19.000Z","_content":"\n距离上一次更新已经过去一个半月了，请不要担心，他还在！\n作为绿植小白，真真切切的体验养殖的快乐、与惊心动魄的时候，是不会想起来要记录博客的。\n\n这次写这篇文章的目的，依然还是要记录一下它的成长，遭遇，以及一些养殖过程中的经验。好啦，天也不早了，咱也得弄点干货了。\n\n绿植小白，在上手清香木后，查询到的一些养殖的理论知识，在这一个半月的时间里得到了很严峻的挑战。继上次为它替换了新家之后，它就不在是从前的那个可爱的孩子了，淘气的狠；现在造的（东北话，本人东北滴，意思是将自己的身体，外表，或其他弄得破败不堪）还能可看出点模样来。\n\n这段时间，它经历的掉叶、枯黄、旱涝。哈哈，你们有没有感觉到他很可怜。但不论怎样，他现在正在茁壮的成长中，已经逃离了法海。\n\n现在的它，虽然已经没有了挡住的枝繁叶茂，但也没有像我这没程序员一样，寸草不生。那我们就接下来就还是说说它的养殖注意事项吧：\n\n<!--more-->\n\n* 掉叶\n\n掉叶是正常现象，在绿植更新新的环境，移植到新的盆中时，都会因需要对新环境的适应儿掉叶，过几天之后就好了，更换新盆后，将水浇透，静止几天（超过正常浇水周期），但也要考虑突然的蓄水能力以及土壤的潮湿程度。\n\n* 黄叶\n\n黄叶一般是发生在水分过大，导致根部腐烂时会发生，因此我在浇水时，要关注一下突然中水分的含量，适量且有规律的浇水，对绿植的发育是有好处的。\n\n* 土壤\n\n起初我的浇水频率是 3-5 天浇一次，但我发现他经常没有精神，蔫蔫的，每次浇水时，观察土壤都已经要干透了，然后我就改为 2-3 天浇水一次，慢慢的他比以前更加油绿，精神面貌更加挺拔。由此呢，总结下来土壤蓄水能力对植物的生长成正比关系，所以选择好的土壤，更有助于它的生长。目前它的土壤还是自从他来到我这里商家送的，土壤很稀松，杂质比较多，蓄水能力也一般，等到他在打一点，为他换一个新家的时候，会考虑给他换一个土壤。毕竟大自然的力量是很庞大的，也许那时他会成长为参天大树吧。\n\n\n**总结**\n\n总之，老话讲”有志者事竟成“，只要用了真心，就一定会有收获；不论是成功还是失败，我们都要将他看做是我们成功路上的经验，不骄不馁。\n\n习惯是养成的，就像它一样，虽然它在那里，也不会同我讲话，也不会同我互动，就那样静静的看着我，而哪一天看不见它的时候，我也会很想它，有时也不吝自己的目光，多看几眼，只希望它能够拙长成长。\n\n\n","source":"_posts/清香木养殖（三）.md","raw":"---\ntitle: 清香木养殖（三）\ndate: 2019-06-23 19:49:19\ntags: 绿植\n---\n\n距离上一次更新已经过去一个半月了，请不要担心，他还在！\n作为绿植小白，真真切切的体验养殖的快乐、与惊心动魄的时候，是不会想起来要记录博客的。\n\n这次写这篇文章的目的，依然还是要记录一下它的成长，遭遇，以及一些养殖过程中的经验。好啦，天也不早了，咱也得弄点干货了。\n\n绿植小白，在上手清香木后，查询到的一些养殖的理论知识，在这一个半月的时间里得到了很严峻的挑战。继上次为它替换了新家之后，它就不在是从前的那个可爱的孩子了，淘气的狠；现在造的（东北话，本人东北滴，意思是将自己的身体，外表，或其他弄得破败不堪）还能可看出点模样来。\n\n这段时间，它经历的掉叶、枯黄、旱涝。哈哈，你们有没有感觉到他很可怜。但不论怎样，他现在正在茁壮的成长中，已经逃离了法海。\n\n现在的它，虽然已经没有了挡住的枝繁叶茂，但也没有像我这没程序员一样，寸草不生。那我们就接下来就还是说说它的养殖注意事项吧：\n\n<!--more-->\n\n* 掉叶\n\n掉叶是正常现象，在绿植更新新的环境，移植到新的盆中时，都会因需要对新环境的适应儿掉叶，过几天之后就好了，更换新盆后，将水浇透，静止几天（超过正常浇水周期），但也要考虑突然的蓄水能力以及土壤的潮湿程度。\n\n* 黄叶\n\n黄叶一般是发生在水分过大，导致根部腐烂时会发生，因此我在浇水时，要关注一下突然中水分的含量，适量且有规律的浇水，对绿植的发育是有好处的。\n\n* 土壤\n\n起初我的浇水频率是 3-5 天浇一次，但我发现他经常没有精神，蔫蔫的，每次浇水时，观察土壤都已经要干透了，然后我就改为 2-3 天浇水一次，慢慢的他比以前更加油绿，精神面貌更加挺拔。由此呢，总结下来土壤蓄水能力对植物的生长成正比关系，所以选择好的土壤，更有助于它的生长。目前它的土壤还是自从他来到我这里商家送的，土壤很稀松，杂质比较多，蓄水能力也一般，等到他在打一点，为他换一个新家的时候，会考虑给他换一个土壤。毕竟大自然的力量是很庞大的，也许那时他会成长为参天大树吧。\n\n\n**总结**\n\n总之，老话讲”有志者事竟成“，只要用了真心，就一定会有收获；不论是成功还是失败，我们都要将他看做是我们成功路上的经验，不骄不馁。\n\n习惯是养成的，就像它一样，虽然它在那里，也不会同我讲话，也不会同我互动，就那样静静的看着我，而哪一天看不见它的时候，我也会很想它，有时也不吝自己的目光，多看几眼，只希望它能够拙长成长。\n\n\n","slug":"清香木养殖（三）","published":1,"updated":"2019-06-23T14:34:03.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzcnczhe001116y9an7rg8om","content":"<p>距离上一次更新已经过去一个半月了，请不要担心，他还在！<br>作为绿植小白，真真切切的体验养殖的快乐、与惊心动魄的时候，是不会想起来要记录博客的。</p>\n<p>这次写这篇文章的目的，依然还是要记录一下它的成长，遭遇，以及一些养殖过程中的经验。好啦，天也不早了，咱也得弄点干货了。</p>\n<p>绿植小白，在上手清香木后，查询到的一些养殖的理论知识，在这一个半月的时间里得到了很严峻的挑战。继上次为它替换了新家之后，它就不在是从前的那个可爱的孩子了，淘气的狠；现在造的（东北话，本人东北滴，意思是将自己的身体，外表，或其他弄得破败不堪）还能可看出点模样来。</p>\n<p>这段时间，它经历的掉叶、枯黄、旱涝。哈哈，你们有没有感觉到他很可怜。但不论怎样，他现在正在茁壮的成长中，已经逃离了法海。</p>\n<p>现在的它，虽然已经没有了挡住的枝繁叶茂，但也没有像我这没程序员一样，寸草不生。那我们就接下来就还是说说它的养殖注意事项吧：</p>\n<a id=\"more\"></a>\n<ul>\n<li>掉叶</li>\n</ul>\n<p>掉叶是正常现象，在绿植更新新的环境，移植到新的盆中时，都会因需要对新环境的适应儿掉叶，过几天之后就好了，更换新盆后，将水浇透，静止几天（超过正常浇水周期），但也要考虑突然的蓄水能力以及土壤的潮湿程度。</p>\n<ul>\n<li>黄叶</li>\n</ul>\n<p>黄叶一般是发生在水分过大，导致根部腐烂时会发生，因此我在浇水时，要关注一下突然中水分的含量，适量且有规律的浇水，对绿植的发育是有好处的。</p>\n<ul>\n<li>土壤</li>\n</ul>\n<p>起初我的浇水频率是 3-5 天浇一次，但我发现他经常没有精神，蔫蔫的，每次浇水时，观察土壤都已经要干透了，然后我就改为 2-3 天浇水一次，慢慢的他比以前更加油绿，精神面貌更加挺拔。由此呢，总结下来土壤蓄水能力对植物的生长成正比关系，所以选择好的土壤，更有助于它的生长。目前它的土壤还是自从他来到我这里商家送的，土壤很稀松，杂质比较多，蓄水能力也一般，等到他在打一点，为他换一个新家的时候，会考虑给他换一个土壤。毕竟大自然的力量是很庞大的，也许那时他会成长为参天大树吧。</p>\n<p><strong>总结</strong></p>\n<p>总之，老话讲”有志者事竟成“，只要用了真心，就一定会有收获；不论是成功还是失败，我们都要将他看做是我们成功路上的经验，不骄不馁。</p>\n<p>习惯是养成的，就像它一样，虽然它在那里，也不会同我讲话，也不会同我互动，就那样静静的看着我，而哪一天看不见它的时候，我也会很想它，有时也不吝自己的目光，多看几眼，只希望它能够拙长成长。</p>\n","site":{"data":{}},"excerpt":"<p>距离上一次更新已经过去一个半月了，请不要担心，他还在！<br>作为绿植小白，真真切切的体验养殖的快乐、与惊心动魄的时候，是不会想起来要记录博客的。</p>\n<p>这次写这篇文章的目的，依然还是要记录一下它的成长，遭遇，以及一些养殖过程中的经验。好啦，天也不早了，咱也得弄点干货了。</p>\n<p>绿植小白，在上手清香木后，查询到的一些养殖的理论知识，在这一个半月的时间里得到了很严峻的挑战。继上次为它替换了新家之后，它就不在是从前的那个可爱的孩子了，淘气的狠；现在造的（东北话，本人东北滴，意思是将自己的身体，外表，或其他弄得破败不堪）还能可看出点模样来。</p>\n<p>这段时间，它经历的掉叶、枯黄、旱涝。哈哈，你们有没有感觉到他很可怜。但不论怎样，他现在正在茁壮的成长中，已经逃离了法海。</p>\n<p>现在的它，虽然已经没有了挡住的枝繁叶茂，但也没有像我这没程序员一样，寸草不生。那我们就接下来就还是说说它的养殖注意事项吧：</p>","more":"<ul>\n<li>掉叶</li>\n</ul>\n<p>掉叶是正常现象，在绿植更新新的环境，移植到新的盆中时，都会因需要对新环境的适应儿掉叶，过几天之后就好了，更换新盆后，将水浇透，静止几天（超过正常浇水周期），但也要考虑突然的蓄水能力以及土壤的潮湿程度。</p>\n<ul>\n<li>黄叶</li>\n</ul>\n<p>黄叶一般是发生在水分过大，导致根部腐烂时会发生，因此我在浇水时，要关注一下突然中水分的含量，适量且有规律的浇水，对绿植的发育是有好处的。</p>\n<ul>\n<li>土壤</li>\n</ul>\n<p>起初我的浇水频率是 3-5 天浇一次，但我发现他经常没有精神，蔫蔫的，每次浇水时，观察土壤都已经要干透了，然后我就改为 2-3 天浇水一次，慢慢的他比以前更加油绿，精神面貌更加挺拔。由此呢，总结下来土壤蓄水能力对植物的生长成正比关系，所以选择好的土壤，更有助于它的生长。目前它的土壤还是自从他来到我这里商家送的，土壤很稀松，杂质比较多，蓄水能力也一般，等到他在打一点，为他换一个新家的时候，会考虑给他换一个土壤。毕竟大自然的力量是很庞大的，也许那时他会成长为参天大树吧。</p>\n<p><strong>总结</strong></p>\n<p>总之，老话讲”有志者事竟成“，只要用了真心，就一定会有收获；不论是成功还是失败，我们都要将他看做是我们成功路上的经验，不骄不馁。</p>\n<p>习惯是养成的，就像它一样，虽然它在那里，也不会同我讲话，也不会同我互动，就那样静静的看着我，而哪一天看不见它的时候，我也会很想它，有时也不吝自己的目光，多看几眼，只希望它能够拙长成长。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjzcnczc5000816y9baqpke79","tag_id":"cjzcnczap000616y9xi6az39l","_id":"cjzcnczdc000b16y9xtxf4zhe"},{"post_id":"cjzcncz9a000216y9ymja9h42","tag_id":"cjzcnczap000616y9xi6az39l","_id":"cjzcnczdp000d16y90xlaweh5"},{"post_id":"cjzcnczcv000916y9h15kii8y","tag_id":"cjzcnczap000616y9xi6az39l","_id":"cjzcncze4000g16y9ylt40z1r"},{"post_id":"cjzcnczab000416y9n9rwqzc9","tag_id":"cjzcnczap000616y9xi6az39l","_id":"cjzcnczeb000i16y9rbf1e0br"},{"post_id":"cjzcncze5000h16y9ydoiuboa","tag_id":"cjzcnczap000616y9xi6az39l","_id":"cjzcnczer000l16y945bp95b5"},{"post_id":"cjzcnczbk000716y9g85c90rx","tag_id":"cjzcnczap000616y9xi6az39l","_id":"cjzcnczf2000n16y9r53wcag7"},{"post_id":"cjzcnczed000j16y9dyy0xnor","tag_id":"cjzcnczap000616y9xi6az39l","_id":"cjzcnczfu000q16y91e7826jn"},{"post_id":"cjzcnczdr000e16y9udzrdgx5","tag_id":"cjzcnczeo000k16y9tvehrua5","_id":"cjzcnczg4000s16y9ymtn6hfb"},{"post_id":"cjzcnczg5000t16y96udzkekl","tag_id":"cjzcnczap000616y9xi6az39l","_id":"cjzcnczgr000w16y9y49je5db"},{"post_id":"cjzcnczeu000m16y9n6wacuog","tag_id":"cjzcnczft000p16y96d7ppqp8","_id":"cjzcnczh2000y16y9velniufj"},{"post_id":"cjzcnczf3000o16y9x2rjarc9","tag_id":"cjzcnczgp000v16y9plxvnaps","_id":"cjzcnczhg001216y9c2rnoptk"},{"post_id":"cjzcnczfv000r16y9pl4612v1","tag_id":"cjzcnczft000p16y96d7ppqp8","_id":"cjzcnczhj001416y9xj9hgrri"},{"post_id":"cjzcnczgi000u16y9nw2ztqob","tag_id":"cjzcnczhh001316y9nw5815l2","_id":"cjzcnczhq001616y90mwa3map"},{"post_id":"cjzcnczgr000x16y9jm7r4pia","tag_id":"cjzcnczhp001516y95fpm5223","_id":"cjzcnczi8001816y9eoev6slw"},{"post_id":"cjzcnczh3000z16y9b48mzdtl","tag_id":"cjzcnczhh001316y9nw5815l2","_id":"cjzcnczid001a16y9jrns7d1u"},{"post_id":"cjzcnczhe001116y9an7rg8om","tag_id":"cjzcnczhh001316y9nw5815l2","_id":"cjzcnczie001b16y9lf1xuyag"}],"Tag":[{"name":"Android","_id":"cjzcnczap000616y9xi6az39l"},{"name":"Java","_id":"cjzcnczeo000k16y9tvehrua5"},{"name":"Git","_id":"cjzcnczft000p16y96d7ppqp8"},{"name":"OkHttp","_id":"cjzcnczgp000v16y9plxvnaps"},{"name":"绿植","_id":"cjzcnczhh001316y9nw5815l2"},{"name":"Android Things","_id":"cjzcnczhp001516y95fpm5223"}]}}