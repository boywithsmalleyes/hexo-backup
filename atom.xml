<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小 man</title>
  <icon>https://www.gravatar.com/avatar/f27b936c2ac428d82177b6d3626c8e3a</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiaoman.ren/"/>
  <updated>2019-05-08T05:58:03.251Z</updated>
  <id>http://xiaoman.ren/</id>
  
  <author>
    <name>小 man</name>
    <email>zhuangbudong@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>清香木养殖（二）</title>
    <link href="http://xiaoman.ren/2019/05/08/%E6%B8%85%E9%A6%99%E6%9C%A8%E5%85%BB%E6%AE%96%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://xiaoman.ren/2019/05/08/清香木养殖（二）/</id>
    <published>2019-05-08T03:02:23.000Z</published>
    <updated>2019-05-08T05:58:03.251Z</updated>
    
    <content type="html"><![CDATA[<p>心心切切,每天都会关注它的变化,可惜心急吃不得热豆腐;经过了几天, 发现它有一些枯叶和干枝,你是在向我宣战吗?????上网查询了一下发现其实是植物在更换了环境之后,需要一段时间的适应,枯叶干枝属于正常现象, 哈哈哈,还好你不是嫌弃我的小屋.</p><a id="more"></a><p>记得高中那会,每天都在书本的海洋里飘荡,生物学自在其中,嘴边也总是在背诵着植物的”光合作用”,”呼吸作用”,这些知识早已深深铭记在心中,刻印在脑海,挥之不去.</p><p>植物白天进行光合作用,吸收二氧化碳,释放氧气;夜晚呼吸作用吸收氧气,释放二氧化碳.这些知识让我认识了世界,然而并没有让我认识他.起初还是傻乎乎的每天出门上班时,把花放在窗台上,打开窗子,让他沐浴阳光,接受洗礼;可最近在浏览一些网站时,注意到一句话让我困惑不已—-“给予植物充足的光照,可以放在阳台上,但要避免太阳光直射”. 我懵了,我真的懵了, 既然都选择放在窗台上,难道窗台上的阳关就不是太阳直射了嘛????? 我很困惑, 爱琢磨的我在想, 窗台上有玻璃,Uh… 难道是隔着一层玻璃就不算直射了吗,, 哎, 这个问题,到现在我也没有想清楚.在经过不断的查询我发现其实植物进行光合作用并不是之可以有太阳光才可以.</p><p>植物进行光合作用,叶绿体是主要功臣,高等植物的光合色素主要有叶绿素和类胡萝卜素,在颜色上叶绿素(叶绿素a 和叶绿色 b) 主要呈绿色, 类胡萝卜素(胡萝卜素和叶黄素) 呈黄色.叶绿素吸收光的能力极强,而对植物光合作用起到作用的是波长在 640 ~ 670 nm 的红光部分和波长在 430 ~ 450 的蓝紫光部分;因为太阳光不是单一的光,到达地表后波长在 300nm ~ 2600 nm, 只有波长在 390 ~ 770 nm为可见光(也就是我们常说的红橙黄绿青蓝紫,及其混合色),自然太阳光是可以满足植物进行光合作用的,同时,我们日常的照明灯例如:白炽灯,荧光灯,LED 灯,他们也可满足植物进行光合作用,但他们的波长不能满足植物光合作用的所有波长选择, 只能是单一, 比如只满足红光或蓝紫光.使用照明灯进行光照,只会导致植物缺少一些元素;淘宝上也有专门买植物光合作用需要的红光和蓝光的灯,但怎样都不如植物在外面晒几小时,大自然就是这么神奇.</p><p>昨天为我的小心念移植了新居,因为刚刚收到他时,他的家有点破败,索性就为他换个豪宅.先用小铲铲松他的根基(不要贴着他,不然会伤害到哦),要不要用力去拔,伤到根部,就再也救不活了.慢慢的,要细心,待整体都很松动,能够连根带土的,一起从盆中带出,在新家先给他挖好容身之所,用手拖住他,细心的放在新家处,并埋好,然后少量的给予一些水分, 让他的家根基更夯实,不要过度浇水,但也要浇头,保持土壤松弛,这样氧气才能进入到土壤,让根部能够充分的进行呼吸作用.一直新家后,小心念属于脆弱的时候,这时不要让他在阳光下暴晒,不利于根部在新家落根.</p><p>新家已经安排妥当,之后就是用心去观察他的变化,保持通风,和光照,他才会茁壮成长.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;心心切切,每天都会关注它的变化,可惜心急吃不得热豆腐;经过了几天, 发现它有一些枯叶和干枝,你是在向我宣战吗?????上网查询了一下发现其实是植物在更换了环境之后,需要一段时间的适应,枯叶干枝属于正常现象, 哈哈哈,还好你不是嫌弃我的小屋.&lt;/p&gt;
    
    </summary>
    
    
      <category term="绿植" scheme="http://xiaoman.ren/tags/%E7%BB%BF%E6%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>清香木养殖（一）</title>
    <link href="http://xiaoman.ren/2019/05/04/%E6%B8%85%E9%A6%99%E6%9C%A8%E5%85%BB%E6%AE%96%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://xiaoman.ren/2019/05/04/清香木养殖（一）/</id>
    <published>2019-05-04T13:54:08.000Z</published>
    <updated>2019-05-08T03:01:19.062Z</updated>
    
    <content type="html"><![CDATA[<p>激动的心，颤抖的手，京东上面动动手。<br>哈哈，很久就有想养一个绿植的想法，经过了半年的挣扎，终于在 3 天前动起了手，入手一株<strong>清香木</strong>，据老板说，清香木可以散发出香味，充满整个房间，香气四溢（还未鉴定，刚收到，正怀着激动的心在写）。</p><p><img src="https://raw.githubusercontent.com/boywithsmalleyes/static_file/master/images/WechatIMG68.jpeg" alt="清香木"></p><p>其实对这枝有一点小失望，就是个头太小，不过没关系，咱俩熬呗，早晚你会长大的。<br><a id="more"></a></p><p>那么问题来了，我是一只程序狗，这种张飞绣花的事儿，着实让我头疼了一番；平日里坐在电脑前，噼里啪啦的敲着键盘，书写着一行行 ABC（突然想起一首歌《都选 C》），徜徉在编码的世界里。忽然之间，生活中多了一株绿植，让那份隐藏在我身体某处多年的小爱心又如雨后春笋一般，萌发了起来。可是啊，在编码的世界里，我可以装装样子，但在 ta 的世界里，我只能装孙子。</p><p>自此之后，我将踏上绿植的养护之道，千里之行始于足下，就请你把我带入到你的世界里，深入的了解并爱上你吧。</p><p>OK，说正事儿，先来介绍一下<strong>清香木</strong>：</p><p>清香木非常收到花友的喜爱，是一种非常理想的盆栽植物，盆景清香木摆放在室内，能营造出一种野外山水树木移入家内的感觉，自然清新。原本生长我国的云脑中部、北部及四川南部等高海拔的干热河谷地带，具有耐阴性，喜好暖，生长缓慢，寿命长等特点（这也会我选择样 ta 的原因）。</p><p>这里有一个养花的 APP，<a href="https://itunes.apple.com/cn/app/%E5%85%BB%E8%8A%B1%E5%A4%A7%E5%85%A8-%E5%85%BB%E8%8A%B1%E4%BA%BA%E7%9A%84%E5%9C%88%E5%AD%90/id1245612230?mt=8" target="_blank" rel="noopener">养花大全</a>，我就是在这上学习养花的技术及注意事项的。</p><p>虽然我并没有经理过 ta 的出生，但后面的路我想和你一起。为你整理发型（修剪枝叶）、为你安家乐业（上盆定型），呵护你（土壤和水分），一路前行（光照和温度）。</p><p>虽然 APP 上介绍了<strong>清香木</strong>一些喜好，也提供了一些养殖方法，但身在门外汉的我还是对绿植界的术语感到头疼，下面来介绍一下</p><table><thead><tr><th>术语</th><th>含义</th></tr></thead><tbody><tr><td>见干见湿</td><td>见干：土壤干涸，表面看不到潮湿。 见湿：浇水时，看土壤全部浸湿。</td></tr><tr><td>浇水要浇透</td><td>浇水时，见到水从底部孔流出</td></tr></tbody></table><p>这个表格是我在看清香木养殖事项时遇到的问题，以后会继续更新。<br>虽然这个术语刚到看的时候，一脸懵。我也请教了我的同事关于养护的问题，他也细心的解释了，而且还特别照顾我这个小白，用很生动的比喻让我理解透了这些属于。</p><p>那么这里我在详细的说一下我的理解：</p><ul><li>见干见湿：要解释的和上面的含义一样，那么我还要补充的部分就是，土壤是自上而下干的， 因此表面上虽然干了，但是土壤内部其实还没有干，尤其是土壤底部（植物的根部），这个时候我们可以通过向土壤中插入一根木棍（要插到底儿哦😏），专门用来检测土壤湿度，拔出时记住木棍裸露在土壤外面的位置，拔出后用潮湿的部位去计算位置。保持根部的湿润，可以促进植物根系的发展，因此不需要经常给植物浇水。见湿也就是浇水时，保证土壤湿润即可。</li><li>浇水要浇透：当我看到时我也和纳闷什么意思，而且和上面的见湿似乎又冲突，到底是见到土壤湿了就可以，还是要浇透？那什么又是浇透呢？经过我的调研和咨询，终于弄明白，这些情况是和土壤的成分有关系，因为土壤的透气性、保水性都对植物发育有很大影响，一旦有问题，很可能导致叶子发黄，脱落，甚至死亡。Emmm  我们说浇透的事儿，花盆底部是有一个小口的（不养花根部不懂事干嘛的，小时候帮妈妈浇花，水从那漏出来，还以为浪费了呢）。因为土壤成分不同，吸水、蓄水能力也不同，具体土壤成分先不介绍，简单说下原理—可以先浇一遍快水，就是将水分均匀的洒在土壤的表面，不要留干，都浸湿，见盆地有水分流出即可，等到 10 分钟之后，在进行一次浇水，同样是均匀的浇，并底部有水流出即可。这样就可以保证浇透了。</li></ul><blockquote><p>小白在这献丑了，后续会持续更新</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;激动的心，颤抖的手，京东上面动动手。&lt;br&gt;哈哈，很久就有想养一个绿植的想法，经过了半年的挣扎，终于在 3 天前动起了手，入手一株&lt;strong&gt;清香木&lt;/strong&gt;，据老板说，清香木可以散发出香味，充满整个房间，香气四溢（还未鉴定，刚收到，正怀着激动的心在写）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/boywithsmalleyes/static_file/master/images/WechatIMG68.jpeg&quot; alt=&quot;清香木&quot;&gt;&lt;/p&gt;
&lt;p&gt;其实对这枝有一点小失望，就是个头太小，不过没关系，咱俩熬呗，早晚你会长大的。&lt;br&gt;
    
    </summary>
    
    
      <category term="绿植" scheme="http://xiaoman.ren/tags/%E7%BB%BF%E6%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>OkHttp Intercept.md</title>
    <link href="http://xiaoman.ren/2019/04/30/OkHttp-Intercept/"/>
    <id>http://xiaoman.ren/2019/04/30/OkHttp-Intercept/</id>
    <published>2019-04-30T12:42:02.000Z</published>
    <updated>2019-04-30T13:35:29.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OkHttp-Interceptor"><a href="#OkHttp-Interceptor" class="headerlink" title="OkHttp Interceptor"></a>OkHttp Interceptor</h1><p>OKHttp 在开发中经常用到,这里介绍一下 OKHttp 的拦截器(interceptor)的几个使用例子</p><p>要是用拦截器很简单,我们只需要自定义一个 interceptor 类, 并实现 Interceptor 接口, 同时重写 intercept 方法.</p><p>这里介绍两种 Interceptor 的实例</p><h2 id="Log-日志-LogInterceptor"><a href="#Log-日志-LogInterceptor" class="headerlink" title="Log 日志 (LogInterceptor)"></a>Log 日志 (LogInterceptor)</h2><p>Log 在开发调试中的重要性, 不言而喻, 一个好的日志数据,能够为开发时提供很多帮助,可以通过 Log 来获取当前程序的执行状态, 顺序等等.</p><a id="more"></a><p>这里介绍的 Log 日志拦截器,主要是负责在网络请求时,截获请求中的信息,并将请求信息以 Log 的方式输出到控制台上,可展现当前请求地址,请求参数,以及请求结果等.</p><p>话不多说, 上代码.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 自定义 log 拦截器,输入请求地址,请求参,请求结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="comment">// 拦截请求信息,获取请求地址及请求参数</span></span><br><span class="line">            Request request = chain.request();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">            <span class="comment">// 获取请求方式</span></span><br><span class="line">            String method = request.method();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"POST"</span>.equals(method)) &#123;</span><br><span class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">if</span> (request.body() <span class="keyword">instanceof</span> FormBody) &#123;</span><br><span class="line">                    FormBody body = (FormBody) request.body();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; body.size(); i++) &#123;</span><br><span class="line">                        sb.append(body.encodedName(i) + <span class="string">"="</span> + body.encodedValue(i) + <span class="string">","</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    sb.delete(sb.length() - <span class="number">1</span>, sb.length());</span><br><span class="line">                    LogUtils.d(TAG, String.format(<span class="string">"Sending request %s on %s %n%s %nRequestParams:&#123;%s&#125;"</span>,</span><br><span class="line">                            request.url(), chain.connection(), request.headers(), sb.toString()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                LogUtils.d(TAG, String.format(<span class="string">"Sending request %s on %s %n%s"</span>,</span><br><span class="line">                        request.url(), chain.connection(), request.headers()));</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 获取响应信息</span></span><br><span class="line">            Response response = chain.proceed(request);</span><br><span class="line">            <span class="keyword">long</span> t2 = System.nanoTime();</span><br><span class="line">            LogUtils.d(TAG, String.format(<span class="string">"Received response for %s in %.1fms%n%s"</span>,</span><br><span class="line">                    response.request().url(), (t2 - t1) / <span class="number">1e6</span>d, response.headers()));</span><br><span class="line"></span><br><span class="line">            MediaType contentType = response.body().contentType();</span><br><span class="line">            String content = response.body().string();</span><br><span class="line">            LogUtils.d(TAG, content);</span><br><span class="line">            ResponseBody wrappedBody = ResponseBody.create(contentType, content);</span><br><span class="line">            <span class="keyword">return</span> response.newBuilder().body(wrappedBody).build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="加参"><a href="#加参" class="headerlink" title="加参"></a>加参</h2><p>加参的意义在于,在请求过程中, 需要传递一些基本参数,这些参数是基本保持不变的, 而这些参数又是后台需要校验的依靠,我们俗称他们为<strong>公参</strong>, 如果在请求过程中在每一个接口里面都去添加这些参数,显得非常繁琐,而且麻烦,后续人员接手,又会不知所措,维护起来相当不方便.</p><p>因此,在这里我们还是通过请求拦截器,通过拦截器去添加这些参数.</p><h3 id="公参拦截器"><a href="#公参拦截器" class="headerlink" title="公参拦截器"></a>公参拦截器</h3><p>在请求中,增加一些公共的参数.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonParamsInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; queryParamsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; paramsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; headerParamsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; headerLinesList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Request request = chain.request();</span><br><span class="line">        Request.Builder requestBuilder = request.newBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// process header params inject</span></span><br><span class="line">        Headers.Builder headerBuilder = request.headers().newBuilder();</span><br><span class="line">        <span class="keyword">if</span> (headerParamsMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Iterator iterator = headerParamsMap.entrySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                Map.Entry entry = (Map.Entry) iterator.next();</span><br><span class="line">                headerBuilder.add((String) entry.getKey(), (String) entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (headerLinesList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String line : headerLinesList) &#123;</span><br><span class="line">                headerBuilder.add(line);</span><br><span class="line">            &#125;</span><br><span class="line">            requestBuilder.headers(headerBuilder.build());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// process header params end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// process queryParams inject whatever it's GET or POST</span></span><br><span class="line">        <span class="keyword">if</span> (queryParamsMap.size() &gt; <span class="number">0</span> &amp;&amp; <span class="string">"GET"</span>.equals(request.method())) &#123;</span><br><span class="line"><span class="comment">//        if (queryParamsMap.size() &gt; 0) &#123;</span></span><br><span class="line">            request = injectParamsIntoUrl(request, requestBuilder, queryParamsMap);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// process post body inject</span></span><br><span class="line">        <span class="keyword">if</span> (paramsMap != <span class="keyword">null</span> &amp;&amp; paramsMap.size() &gt; <span class="number">0</span> &amp;&amp; <span class="string">"POST"</span>.equals(request.method())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (request.body() <span class="keyword">instanceof</span> FormBody) &#123;</span><br><span class="line">                FormBody.Builder newFormBodyBuilder = <span class="keyword">new</span> FormBody.Builder();</span><br><span class="line">                <span class="keyword">if</span> (paramsMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    Iterator iterator = paramsMap.entrySet().iterator();</span><br><span class="line">                    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                        Map.Entry entry = (Map.Entry) iterator.next();</span><br><span class="line">                        newFormBodyBuilder.add((String) entry.getKey(), (String) entry.getValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                FormBody oldFormBody = (FormBody) request.body();</span><br><span class="line">                <span class="keyword">int</span> paramSize = oldFormBody.size();</span><br><span class="line">                <span class="keyword">if</span> (paramSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramSize; i++) &#123;</span><br><span class="line">                        newFormBodyBuilder.add(oldFormBody.name(i), oldFormBody.value(i));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                requestBuilder.post(newFormBodyBuilder.build());</span><br><span class="line">                request = requestBuilder.build();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (request.body() <span class="keyword">instanceof</span> MultipartBody) &#123;</span><br><span class="line">                MultipartBody.Builder multipartBuilder = <span class="keyword">new</span> MultipartBody.Builder().setType(MultipartBody.FORM);</span><br><span class="line"></span><br><span class="line">                Iterator iterator = paramsMap.entrySet().iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    Map.Entry entry = (Map.Entry) iterator.next();</span><br><span class="line">                    multipartBuilder.addFormDataPart((String) entry.getKey(), (String) entry.getValue());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                List&lt;MultipartBody.Part&gt; oldParts = ((MultipartBody) request.body()).parts();</span><br><span class="line">                <span class="keyword">if</span> (oldParts != <span class="keyword">null</span> &amp;&amp; oldParts.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (MultipartBody.Part part : oldParts) &#123;</span><br><span class="line">                        multipartBuilder.addPart(part);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                requestBuilder.post(multipartBuilder.build());</span><br><span class="line">                request = requestBuilder.build();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.proceed(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">canInjectIntoBody</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.equals(request.method(), <span class="string">"POST"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RequestBody body = request.body();</span><br><span class="line">        <span class="keyword">if</span> (body == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        MediaType mediaType = body.contentType();</span><br><span class="line">        <span class="keyword">if</span> (mediaType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.equals(mediaType.subtype(), <span class="string">"x-www-form-urlencoded"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// func to inject params into url</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Request <span class="title">injectParamsIntoUrl</span><span class="params">(Request request, Request.Builder requestBuilder, Map&lt;String, String&gt; paramsMap)</span> </span>&#123;</span><br><span class="line">        HttpUrl.Builder httpUrlBuilder = request.url().newBuilder();</span><br><span class="line">        <span class="keyword">if</span> (paramsMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Iterator iterator = paramsMap.entrySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                Map.Entry entry = (Map.Entry) iterator.next();</span><br><span class="line">                httpUrlBuilder.addEncodedQueryParameter((String) entry.getKey(), (String) entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            requestBuilder.url(httpUrlBuilder.build());</span><br><span class="line">            <span class="keyword">return</span> requestBuilder.build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">bodyToString</span><span class="params">(<span class="keyword">final</span> RequestBody request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> RequestBody copy = request;</span><br><span class="line">            <span class="keyword">final</span> Buffer buffer = <span class="keyword">new</span> Buffer();</span><br><span class="line">            <span class="keyword">if</span> (copy != <span class="keyword">null</span>)</span><br><span class="line">                copy.writeTo(buffer);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">return</span> buffer.readUtf8();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"did not work"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CommonParamsInterceptor interceptor;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            interceptor = <span class="keyword">new</span> CommonParamsInterceptor();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">addParam</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">            interceptor.paramsMap.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">addParamsMap</span><span class="params">(Map&lt;String, String&gt; paramsMap)</span> </span>&#123;</span><br><span class="line">            interceptor.paramsMap.putAll(paramsMap);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">addHeaderParam</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">            interceptor.headerParamsMap.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">addHeaderParamsMap</span><span class="params">(Map&lt;String, String&gt; headerParamsMap)</span> </span>&#123;</span><br><span class="line">            interceptor.headerParamsMap.putAll(headerParamsMap);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">addHeaderLine</span><span class="params">(String headerLine)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> index = headerLine.indexOf(<span class="string">":"</span>);</span><br><span class="line">            <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unexpected header: "</span> + headerLine);</span><br><span class="line">            &#125;</span><br><span class="line">            interceptor.headerLinesList.add(headerLine);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">addHeaderLinesList</span><span class="params">(List&lt;String&gt; headerLinesList)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (String headerLine : headerLinesList) &#123;</span><br><span class="line">                <span class="keyword">int</span> index = headerLine.indexOf(<span class="string">":"</span>);</span><br><span class="line">                <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unexpected header: "</span> + headerLine);</span><br><span class="line">                &#125;</span><br><span class="line">                interceptor.headerLinesList.add(headerLine);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">addQueryParam</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">            interceptor.queryParamsMap.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">addQueryParamsMap</span><span class="params">(Map&lt;String, String&gt; queryParamsMap)</span> </span>&#123;</span><br><span class="line">            interceptor.queryParamsMap.putAll(queryParamsMap);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CommonParamsInterceptor <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> interceptor;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加签拦截器"><a href="#加签拦截器" class="headerlink" title="加签拦截器"></a>加签拦截器</h3><p>互联网是一个开放的环境,危险无处不在,加密通信是安全的基础.</p><p>加密的方式又有很多,比如对称加密/非对称加密/Hash(严格的说不是加密),这里先不对加密进行介绍,我们聊聊加签;</p><p>加签,其实就是给报文做一个摘要,相同的签名算法得到的摘要是相同的,比如MD5, SH1, SH256等, 简单的加签并不能防止篡改,因为攻击者可以篡改后,自己生成新的签名.服务端验签还是可以通过的,因此加签时一定要包含一些私有的东西,比如私钥.</p><p>这里介绍一种加签方式,</p><blockquote><p> 加密规则</p></blockquote><ol><li>根据请求参数 key 进行排序</li><li>按排好的顺序组装成 key=value&amp;key=value 形式的字符串</li><li>将上述字符串拼接 mid, timestamp, key(私钥) ,最终形成 key=value&amp;key=value&amp;mid&amp;timestamp&amp;key 的字符串</li><li>将字符串 md5 32位小写加密, 生成 auth.</li></ol><p>一个简单的加签逻辑就是这样,下面代码就是对这种规则的实现,看代码↓↓↓↓</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizeInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"AuthorizeInterceptor"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 auth 的私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String authKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前设备 mid,用来生成 auth</span></span><br><span class="line"><span class="comment">     * 数据由 Builder 类传入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mid = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AuthorizeInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = chain.request();</span><br><span class="line">        Request.Builder requestBuilder = request.newBuilder();</span><br><span class="line">        String url = request.url().toString();</span><br><span class="line">        LogUtils.d(TAG, url);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"POST"</span>.equals(request.method())) &#123;</span><br><span class="line">            request = injectionParamIntoBody(request, requestBuilder);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"GET"</span>.equals(request.method())) &#123;</span><br><span class="line">            request = injectionAuthIntoUrl(request, requestBuilder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.proceed(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GET 请求方式, 生成授权和添加时间戳</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestBuilder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Request <span class="title">injectionAuthIntoUrl</span><span class="params">(Request request, Request.Builder requestBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取到请求地址api</span></span><br><span class="line">        HttpUrl newHttpUrl = request.url();</span><br><span class="line">        TreeMap&lt;String, String&gt; authMap = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//通过请求地址(最初始的请求地址)获取到参数列表</span></span><br><span class="line">        Set&lt;String&gt; parameterNames = newHttpUrl.queryParameterNames();</span><br><span class="line">        <span class="keyword">long</span> timestamp = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (String key : parameterNames) &#123;</span><br><span class="line">            <span class="comment">//循环参数列表</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">"basic"</span>.equals(key)) &#123;</span><br><span class="line">                <span class="comment">// 获取参数value,</span></span><br><span class="line">                String paramValue = newHttpUrl.queryParameter(key);</span><br><span class="line">                <span class="keyword">if</span> (!TextUtils.isEmpty(paramValue)) &#123;</span><br><span class="line">                    authMap.put(key, paramValue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        LogUtils.d(TAG, <span class="string">"===================================== Get 开始生成 auth =========================================="</span>);</span><br><span class="line">        HttpUrl.Builder newBuilder =</span><br><span class="line">                request.url().newBuilder()</span><br><span class="line">                        .addEncodedQueryParameter(<span class="string">"auth"</span>, assembleAuth(authMap, timestamp, <span class="keyword">false</span>))</span><br><span class="line">                        .addEncodedQueryParameter(<span class="string">"timestamp"</span>, String.valueOf(timestamp));</span><br><span class="line">        requestBuilder.url(newBuilder.build());</span><br><span class="line">        <span class="keyword">return</span> requestBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将参数注入到 POST 请求的 body 中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestBuilder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Request <span class="title">injectionParamIntoBody</span><span class="params">(Request request, Request.Builder requestBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.body() <span class="keyword">instanceof</span> FormBody) &#123;</span><br><span class="line">            <span class="comment">// 处理正常表单请求方式</span></span><br><span class="line">            FormBody oldFormBody = (FormBody) request.body();</span><br><span class="line">            <span class="keyword">return</span> assembleFormBody(request, oldFormBody, requestBuilder);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (request.body() <span class="keyword">instanceof</span> MultipartBody) &#123;</span><br><span class="line">            <span class="keyword">return</span> assembleMultipartBody(request, requestBuilder);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> request;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建流媒体参数的 body</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> builder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Request <span class="title">assembleMultipartBody</span><span class="params">(Request request, Request.Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理流的请求方式</span></span><br><span class="line">        MultipartBody body = (MultipartBody) request.body();</span><br><span class="line">        TreeMap&lt;String, String&gt; authMap = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">long</span> timestamp = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 获取参数 key 及 value 数据, 将数据写入到 TreeMap 中进行排序</span></span><br><span class="line">        <span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; body.parts().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (MultipartBody.Part part : body.parts()) &#123;</span><br><span class="line">                <span class="comment">// 只处理 contentType 为空,或为 text 的情况, image 上传图片的字段,不进行处理</span></span><br><span class="line">                <span class="keyword">if</span> (part.body().contentType() == <span class="keyword">null</span></span><br><span class="line">                        || !<span class="string">"image"</span>.equals(part.body().contentType().type())</span><br><span class="line">                        || <span class="string">"text"</span>.equals(part.body().contentType().type())) &#123;</span><br><span class="line">                    Headers headers = part.headers();</span><br><span class="line">                    <span class="comment">// 从 header 中获取 Key, form-data; name= 的字段过滤获取key</span></span><br><span class="line">                    <span class="comment">// 筛选掉 basic, 获取到当前 header,对应的 RequestBody, 通过 buffer 的方式,获取到 value</span></span><br><span class="line">                    <span class="comment">// 将 key 和 value 填充到 TreeMap 中</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headers.names().size(); i++) &#123;</span><br><span class="line">                        String headerName = headers.value(i);</span><br><span class="line">                        <span class="keyword">if</span> (headerName.contains(<span class="string">"form-data; name="</span>)) &#123;</span><br><span class="line">                            String key = headerName.replace(<span class="string">"form-data; name="</span>, <span class="string">""</span>).replace(<span class="string">"\""</span>, <span class="string">""</span>);</span><br><span class="line">                            <span class="keyword">if</span> (!<span class="string">"basic"</span>.equals(key)) &#123;</span><br><span class="line">                                String value = body2String(part.body());</span><br><span class="line">                                <span class="keyword">if</span> (!TextUtils.isEmpty(value)) &#123;</span><br><span class="line">                                    authMap.put(key, body2String(part.body()));</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LogUtils.d(TAG, <span class="string">"============================ MultipartBody 准备生成 Auth ====================================="</span>);</span><br><span class="line">        MultipartBody.Builder multipartBuilder = <span class="keyword">new</span> MultipartBody.Builder().setType(MultipartBody.FORM);</span><br><span class="line">        multipartBuilder.addFormDataPart(<span class="string">"auth"</span>, assembleAuth(authMap, timestamp, <span class="keyword">false</span>));</span><br><span class="line">        multipartBuilder.addFormDataPart(<span class="string">"timestamp"</span>, String.valueOf(timestamp));</span><br><span class="line">        List&lt;MultipartBody.Part&gt; oldParts = ((MultipartBody) request.body()).parts();</span><br><span class="line">        <span class="keyword">if</span> (oldParts != <span class="keyword">null</span> &amp;&amp; oldParts.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (MultipartBody.Part part : oldParts) &#123;</span><br><span class="line">                multipartBuilder.addPart(part);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        builder.post(multipartBuilder.build());</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建 Auth 数据</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * TreeMap 数据,按照字母顺序自动排序后,遍历数据,拼接成 key=value&amp;key=value 的形式,</span></span><br><span class="line"><span class="comment">     * Map 拼接完成后,在其后需要再次拼接上 &amp;mid&amp;timestamp&amp;key</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 最后将数据 MD5 转化为 32 位小写并返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> treeMap      构建 Auth 的具体数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timestamp    当前时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isNeedDecode 是否需要解码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 auth 数据 --- 32位小写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">assembleAuth</span><span class="params">(TreeMap&lt;String, String&gt; treeMap, <span class="keyword">long</span> timestamp, <span class="keyword">boolean</span> isNeedDecode)</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (treeMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; stringStringEntry : treeMap.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stringBuilder.append(stringStringEntry.getKey())</span><br><span class="line">                            .append(<span class="string">"="</span>)</span><br><span class="line">                            .append(isNeedDecode</span><br><span class="line">                                    ? URLDecoder.decode(stringStringEntry.getValue(), <span class="string">"UTF-8"</span>)</span><br><span class="line">                                    : stringStringEntry.getValue())</span><br><span class="line">                            .append(<span class="string">"&amp;"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        treeMap.clear();</span><br><span class="line">        stringBuilder.append(mid)</span><br><span class="line">                .append(<span class="string">"&amp;"</span>)</span><br><span class="line">                .append(timestamp)</span><br><span class="line">                .append(<span class="string">"&amp;"</span>)</span><br><span class="line">                .append(authKey);</span><br><span class="line">        LogUtils.d(TAG, stringBuilder.toString());</span><br><span class="line">        LogUtils.d(TAG, <span class="string">"============================ Auth 生成完成 ====================================="</span>);</span><br><span class="line">        <span class="keyword">return</span> MD5.MD5_32(stringBuilder.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * body 转 string 获取实际参数值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body Part body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> part 中写如的参数数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">body2String</span><span class="params">(RequestBody body)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (body != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Buffer buffer = <span class="keyword">new</span> Buffer();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                body.writeTo(buffer);</span><br><span class="line">                Charset charset = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line">                MediaType contentType = body.contentType();</span><br><span class="line">                <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    charset = contentType.charset(charset);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">assert</span> charset != <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span> buffer.readString(charset);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组装 Form 表单请求数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldFormBody</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestBuilder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Request <span class="title">assembleFormBody</span><span class="params">(Request request, FormBody oldFormBody, Request.Builder requestBuilder)</span> </span>&#123;</span><br><span class="line">        TreeMap&lt;String, String&gt; authMap = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历请求参数,非空参数,添加到集合中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oldFormBody.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">"basic"</span>.equals(oldFormBody.encodedName(i)) &amp;&amp; !TextUtils.isEmpty(oldFormBody.encodedValue(i))) &#123;</span><br><span class="line">                authMap.put(oldFormBody.encodedName(i), oldFormBody.encodedValue(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> timestamp = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (authMap.size() != <span class="number">0</span>) &#123;</span><br><span class="line">            LogUtils.d(TAG, <span class="string">"============================ FormBody 准备生成 auth ==========================="</span>);</span><br><span class="line">            <span class="comment">// 生成 auth 数据</span></span><br><span class="line">            FormBody.Builder newFormBody = <span class="keyword">new</span> FormBody.Builder();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oldFormBody.size(); i++) &#123;</span><br><span class="line">                newFormBody.addEncoded(oldFormBody.encodedName(i), oldFormBody.encodedValue(i));</span><br><span class="line">            &#125;</span><br><span class="line">            newFormBody.add(<span class="string">"auth"</span>, assembleAuth(authMap, timestamp, <span class="keyword">true</span>));</span><br><span class="line">            newFormBody.add(<span class="string">"timestamp"</span>, String.valueOf(timestamp));</span><br><span class="line">            requestBuilder.method(request.method(), newFormBody.build());</span><br><span class="line">            <span class="keyword">return</span> requestBuilder.build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Builder 构造函数,用来设置 Authorize 的相关参数,及创建工作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        AuthorizeInterceptor authorizeInterceptor;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            authorizeInterceptor = <span class="keyword">new</span> AuthorizeInterceptor();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setMid</span><span class="params">(String mid)</span> </span>&#123;</span><br><span class="line">            authorizeInterceptor.mid = mid;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setAuthKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">            authorizeInterceptor.authKey = key;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> AuthorizeInterceptor <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> authorizeInterceptor;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该加签方式,讲请求参数拼接为 <code>key=value</code> 的方式, 难点在于如何从 OkHttp 中获取这些参数,在 GET 请求和 POST 的处理方式又不同,代码中 POST 请求方式,又会根据请求传递的 <code>contentType</code> 而又有所不同,这里介绍了<code>Form</code>表单提交和 <code>Multipart</code> 上传文件的参数获取方式,其他的请举一反三.</p><blockquote><p>文章有瑕疵, 请大神批评指正.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OkHttp-Interceptor&quot;&gt;&lt;a href=&quot;#OkHttp-Interceptor&quot; class=&quot;headerlink&quot; title=&quot;OkHttp Interceptor&quot;&gt;&lt;/a&gt;OkHttp Interceptor&lt;/h1&gt;&lt;p&gt;OKHttp 在开发中经常用到,这里介绍一下 OKHttp 的拦截器(interceptor)的几个使用例子&lt;/p&gt;
&lt;p&gt;要是用拦截器很简单,我们只需要自定义一个 interceptor 类, 并实现 Interceptor 接口, 同时重写 intercept 方法.&lt;/p&gt;
&lt;p&gt;这里介绍两种 Interceptor 的实例&lt;/p&gt;
&lt;h2 id=&quot;Log-日志-LogInterceptor&quot;&gt;&lt;a href=&quot;#Log-日志-LogInterceptor&quot; class=&quot;headerlink&quot; title=&quot;Log 日志 (LogInterceptor)&quot;&gt;&lt;/a&gt;Log 日志 (LogInterceptor)&lt;/h2&gt;&lt;p&gt;Log 在开发调试中的重要性, 不言而喻, 一个好的日志数据,能够为开发时提供很多帮助,可以通过 Log 来获取当前程序的执行状态, 顺序等等.&lt;/p&gt;
    
    </summary>
    
    
      <category term="OkHttp" scheme="http://xiaoman.ren/tags/OkHttp/"/>
    
  </entry>
  
  <entry>
    <title>多个 ssh 公钥提交代码到不同平台</title>
    <link href="http://xiaoman.ren/2019/04/17/%E5%A4%9A%E4%B8%AA-ssh-%E5%85%AC%E9%92%A5%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0/"/>
    <id>http://xiaoman.ren/2019/04/17/多个-ssh-公钥提交代码到不同平台/</id>
    <published>2019-04-17T14:09:21.000Z</published>
    <updated>2019-05-08T03:01:19.062Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="多个-SSH-公钥提交代码到不同平台"><a href="#多个-SSH-公钥提交代码到不同平台" class="headerlink" title="多个 SSH 公钥提交代码到不同平台"></a>多个 SSH 公钥提交代码到不同平台</h1><p>作为一个技术开发人员，免不了在 <code>github</code> 以及 <code>gitlab</code> 以及其他 <code>git</code> 平台上进行代码管理；<br>工作中您可能使用 <code>svn</code> （这不在我们的讨论范围）,也有可能使用 <code>git</code>, 生活中，您可能会将一些内容分享到你的 <code>github</code> 上， 供大家参阅。</p><p><code>git</code> 创建版本库很容易， <code>clone</code> 代码也仅仅是简单的一句 <code>git clone https://github.com/xxxx.git</code>，异或是 <code>git clone git@github.com:xxxxx.git</code>；当然，使用 <code>https</code> 的方式简单易操作（本人认为是一个傻瓜相机），但是通过使用 <code>https</code> 的方式，经常会遇到需要输入账号和密码的情况，这大大的加大了安全问题，虽然某 dear 的图形化工具，会帮助我们 remeber 账号和密码，避免了重复输入，但这不在我们的讨论范围（个人很鄙视使用图形化界面的），接下来要说的就是使用 <code>SSH</code> 的方式来处理 <code>git</code> 的版本管理。</p><a id="more"></a><h2 id="生成-SSH-密钥"><a href="#生成-SSH-密钥" class="headerlink" title="生成 SSH 密钥"></a>生成 SSH 密钥</h2><p>使用 <code>SSH</code> 创建一套公密钥，将公钥添加到你要使用的 <code>Git</code> 平台账户下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your email addr&quot; -f ~/.ssh/github</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><code>-f</code> 后面的参数是用来自定义 SSH KEY 的存放路径，如果不需要也可以自 -f 开始省略</li><li>命令输入完成后，连击3下回车就可以，不需要处理操作（除非你很想处理）</li></ol><h2 id="添加生成的-SSH-公钥"><a href="#添加生成的-SSH-公钥" class="headerlink" title="添加生成的 SSH 公钥"></a>添加生成的 SSH 公钥</h2><p>添加 ssh 公钥到 <code>github</code> **</p><ol><li><p>打开 <code>https://github.com/settings/profile</code> ，选择 <code>SSH and GPG keys</code></p><p> <img src="https://raw.githubusercontent.com/boywithsmalleyes/static_file/master/images/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190425135335.png" alt></p></li><li><p>点击 <code>New SSH key</code></p><ol><li>title 可以随便写，建议见名知意，能知道是哪台设备</li><li>key 通过刚刚通过 <code>SSH</code> 命令生成的 <code>.pub</code> 文件中复制即可。文件路径 <code>.ssh/id_rsa.pub</code> 异或是存在您 <code>-f</code> 之后指定的目录。</li><li>点击 <code>add SSH key</code></li></ol></li></ol><h2 id="配置多个-ssh"><a href="#配置多个-ssh" class="headerlink" title="配置多个 ssh"></a>配置多个 ssh</h2><p>配置多个 <code>ssh</code> 时，需要注意的是：</p><ol><li>如果你未指定公钥的存储路径，那么你需要一个一个的手动去创建，并配置 <code>ssh</code> 公钥到对应平台，否则，后续的 <code>ssh</code> 创建过程， 会覆盖掉之前创建的。</li><li><code>ssh-keygen</code> 会同时创建 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件， <code>.pub</code> 是公钥， 不带后缀的是你的私钥。</li><li>同时配置多个 <code>ssh</code> 时，需要您保留私钥在 <code>.ssh</code> 目录下，为保证多平台都可以使用，您需要手动修改一下 <code>id_rsa</code> 文件的名称，<code>.pub</code> 就随便了，配置完，就没用了。</li><li><p>将密钥添加到 <code>ssh-agent</code> 中</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~.ssh/id_rsa</span><br></pre></td></tr></table></figure></li></ol><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看 agent 中的密钥</span><br><span class="line">ssh-add -l</span><br><span class="line"># 查看 agent 中的公钥</span><br><span class="line">ssh-add -L</span><br><span class="line"># 删除 agent 中的密钥</span><br><span class="line">ssh-add -d .ssh/id_xxx.pub</span><br></pre></td></tr></table></figure></code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>说了半天，终于到重点了</p><ol><li><p>在 <code>~/.ssh</code> 目录下新建一个 <code>config</code> 文件</p><p> 对，没有错，就是一个连后缀都没有的文件，这个文件用来存储您的所有平台信息，以及平台对应使用的 <code>ssh</code> 密钥。<br> <code>touch config</code></p></li><li><p>添加以下配置信息</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># github</span><br><span class="line">Host github.com # 也可以是数字 ip 地址，加不加 http/https 都无所谓</span><br><span class="line">HostName github.com # 同上</span><br><span class="line">PreferredAuthentications publickey # 这里不要修改</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github # 这里的文件名修改为该平台对应的密钥</span><br><span class="line"></span><br><span class="line"># gitlab</span><br><span class="line">Host 公司 gitlab 地址</span><br><span class="line">HostName 公司 gitlab 地址</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_gitlab</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>命令为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi boywithsmalleyes! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>只需要替换后面的 <code>git</code>仓库地址, 其他版本库都可以进行测试。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>说了半天， 还是要记住一点，既然要使用 <code>ssh</code> 的方式进行版本管理，那么在 <code>clone</code> 代码时，也要使用 <code>ssh</code> 方式， 不然我说了这么半天，都是白扯。</p><blockquote><p>文章内容有瑕疵，请给予指正批评</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;多个-SSH-公钥提交代码到不同平台&quot;&gt;&lt;a href=&quot;#多个-SSH-公钥提交代码到不同平台&quot; class=&quot;headerlink&quot; title=&quot;多个 SSH 公钥提交代码到不同平台&quot;&gt;&lt;/a&gt;多个 SSH 公钥提交代码到不同平台&lt;/h1&gt;&lt;p&gt;作为一个技术开发人员，免不了在 &lt;code&gt;github&lt;/code&gt; 以及 &lt;code&gt;gitlab&lt;/code&gt; 以及其他 &lt;code&gt;git&lt;/code&gt; 平台上进行代码管理；&lt;br&gt;工作中您可能使用 &lt;code&gt;svn&lt;/code&gt; （这不在我们的讨论范围）,也有可能使用 &lt;code&gt;git&lt;/code&gt;, 生活中，您可能会将一些内容分享到你的 &lt;code&gt;github&lt;/code&gt; 上， 供大家参阅。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git&lt;/code&gt; 创建版本库很容易， &lt;code&gt;clone&lt;/code&gt; 代码也仅仅是简单的一句 &lt;code&gt;git clone https://github.com/xxxx.git&lt;/code&gt;，异或是 &lt;code&gt;git clone git@github.com:xxxxx.git&lt;/code&gt;；当然，使用 &lt;code&gt;https&lt;/code&gt; 的方式简单易操作（本人认为是一个傻瓜相机），但是通过使用 &lt;code&gt;https&lt;/code&gt; 的方式，经常会遇到需要输入账号和密码的情况，这大大的加大了安全问题，虽然某 dear 的图形化工具，会帮助我们 remeber 账号和密码，避免了重复输入，但这不在我们的讨论范围（个人很鄙视使用图形化界面的），接下来要说的就是使用 &lt;code&gt;SSH&lt;/code&gt; 的方式来处理 &lt;code&gt;git&lt;/code&gt; 的版本管理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://xiaoman.ren/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Java 判断字符串是否是数字的方法</title>
    <link href="http://xiaoman.ren/2019/04/16/Java-%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E6%98%AF%E6%95%B0%E5%AD%97%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://xiaoman.ren/2019/04/16/Java-判断字符串是否是数字的方法/</id>
    <published>2019-04-16T09:47:06.000Z</published>
    <updated>2019-04-30T08:10:57.567Z</updated>
    
    <content type="html"><![CDATA[<ul><li>使用 Java自带的函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isNumeric (String str) &#123;</span><br><span class="line">    for (int i = str.length(); --i &gt;=0) &#123;</span><br><span class="line">          if (!Character.isDigit(str.charAt(i))) &#123;</span><br><span class="line">                return false;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>使用正则表达式</li></ul><p>方法一:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isNumeric(String str) &#123;</span><br><span class="line">    Pattern pattern = Pattern.compile(&quot;^[-\\+]?[\\d]*$&quot;);</span><br><span class="line">    return pattern.matcher(str).matches();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isNumeric(String str) &#123;</span><br><span class="line">    if (str != null &amp;&amp; !&quot;&quot;.equals(str.trim())) &#123;</span><br><span class="line">          return s.matches(&quot;^[0-9]*$&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> public static boolean isNumeric (String str) &#123;</span><br><span class="line">    Pattern pattern = Pattern.compile(&quot;[0-9]*&quot;);</span><br><span class="line">    return pattern.matcher(str).matcher();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 ASCII 码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isNumeric (String str) &#123;</span><br><span class="line">    for (int i = str.length(); --i&gt;=0;) &#123;</span><br><span class="line">        int chr = str.charAt(i);</span><br><span class="line">        if (chr &lt; 48 || chr &gt; 57) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判断是不是浮点型数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isDouble(String str) &#123;</span><br><span class="line">    Pattern pattern = Pattern.compile(&quot;^[-\\+]?[.\\d]*$&quot;);</span><br><span class="line">    return pattern.matcher(str).matches();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;使用 Java自带的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static boolean isNumeric (String str) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (int i = str.length(); --i &amp;gt;=0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          if (!Character.isDigit(str.charAt(i))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://xiaoman.ren/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android 中设置全屏的方法</title>
    <link href="http://xiaoman.ren/2019/04/16/Android-%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%8F%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://xiaoman.ren/2019/04/16/Android-中设置全屏的方法/</id>
    <published>2019-04-16T09:46:31.000Z</published>
    <updated>2019-04-30T08:10:57.567Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中,我们经常需要把我们的应用设置为全屏,这里有两种方式: 一是在代码中设置; 二是在配置文件中设置</p><h1 id="一-在代码中设置"><a href="#一-在代码中设置" class="headerlink" title="一. 在代码中设置"></a>一. 在代码中设置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class BaseActivity extends Activity &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(saveInstanceState);</span><br><span class="line">        // 无title</span><br><span class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        // 全屏</span><br><span class="line">        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>强调一点: <strong> 设置全屏的两段代码,必须在 <code>setContentView()</code> 之前调用,不然会报错 </strong></p><h1 id="二-在配置文件中修改"><a href="#二-在配置文件中修改" class="headerlink" title="二. 在配置文件中修改"></a>二. 在配置文件中修改</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;manifest </span><br><span class="line">  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">  package=&quot;com.android.test&quot;</span><br><span class="line">  android:versionCode=&quot;1&quot;</span><br><span class="line">  ndroid:versionName=&quot;1.0&quot;&gt;</span><br><span class="line">  &lt;application android:icon=&quot;@drawable/icon&quot;</span><br><span class="line">    android:lable=&quot;@string/app_name&gt;</span><br><span class="line">    &lt;activity android:name=&quot;.BaseActivity&quot; </span><br><span class="line">        android:theme=&quot;@android:style/Theme.NotitleBar.Fullscreen&quot;</span><br><span class="line">        android:lable=&quot;@string/app_name&quot;&gt;</span><br><span class="line">        &lt;intent-filter&gt;</span><br><span class="line">            &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</span><br><span class="line">            &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</span><br><span class="line">        &lt;/intent-filter&gt;</span><br><span class="line">  &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><p>使用第一种方法,会在应用运行后,看到一个短暂的状态来, 然后才全屏, 而第二种方法是不会有这种情况的,大家根据需要自行选择.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发中,我们经常需要把我们的应用设置为全屏,这里有两种方式: 一是在代码中设置; 二是在配置文件中设置&lt;/p&gt;
&lt;h1 id=&quot;一-在代码中设置&quot;&gt;&lt;a href=&quot;#一-在代码中设置&quot; class=&quot;headerlink&quot; title=&quot;一. 在代码中设置&quot;&gt;&lt;/a&gt;一
      
    
    </summary>
    
    
      <category term="Android" scheme="http://xiaoman.ren/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 获取 IP 地址</title>
    <link href="http://xiaoman.ren/2019/04/16/Android-%E8%8E%B7%E5%8F%96-IP-%E5%9C%B0%E5%9D%80/"/>
    <id>http://xiaoman.ren/2019/04/16/Android-获取-IP-地址/</id>
    <published>2019-04-16T09:46:00.000Z</published>
    <updated>2019-04-30T08:10:57.567Z</updated>
    
    <content type="html"><![CDATA[<p>开发中经常会需要判断当前是否连接网络, WiFi 或 移动数据连接判断的需求,</p><p><strong>第一种方法: </strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WifiManager wifiManager = (WifiManager) getSystemService(WIFI_SERVICE);  </span><br><span class="line">WifiInfo wifiInfo = wifiManager.getConnectionInfo();  </span><br><span class="line"><span class="keyword">int</span> ipAddress = wifiInfo.getIpAddress();</span><br></pre></td></tr></table></figure><p>通过这种方式获取到的 IP 地址为一串数字,我们并不能看懂,因此我们需要通过下面的方法进行转换:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String ip = (ipAddress &amp; 0xff) + &quot;.&quot; + (ipAddress&gt;&gt;8 &amp; 0xff) + &quot;.&quot; + (ipAddress&gt;&gt;16 &amp; 0xff) + &quot;.&quot; + (ipAddress &gt;&gt; 24 &amp; 0xff);</span><br></pre></td></tr></table></figure><p>这样转换之后,我们获取到的 IP 地址就是我们平时认识的, 比如: 192.168.1.108</p><p>这种方法在飞行模式下获取到的 IP 地址为 0.0.0.0</p><p><strong>第二种方法:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  public String getLocalIpAddress() &#123;  </span><br><span class="line">    try &#123;  </span><br><span class="line">        for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) &#123;  </span><br><span class="line">            NetworkInterface intf = en.nextElement();  </span><br><span class="line">            for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) &#123;  </span><br><span class="line">                InetAddress inetAddress = enumIpAddr.nextElement();  </span><br><span class="line">                if (!inetAddress.isLoopbackAddress()) &#123;  </span><br><span class="line">                    return inetAddress.getHostAddress().toString();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; catch (SocketException ex) &#123;  </span><br><span class="line">        Log.e(LOG_TAG, ex.toString());  </span><br><span class="line">    &#125;  </span><br><span class="line">    return null;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方式是比较通用的,在WiFi和3G/4G 状态下,都可以获取到正确的地址.比如: fe80::8e3a:e3ff:fe45:a018</p><p>这种方法在手机处于飞行状态下时, 获取到的 IP 地址为 null</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发中经常会需要判断当前是否连接网络, WiFi 或 移动数据连接判断的需求,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一种方法: &lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
      <category term="Android" scheme="http://xiaoman.ren/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>事件分发</title>
    <link href="http://xiaoman.ren/2019/04/16/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    <id>http://xiaoman.ren/2019/04/16/事件分发/</id>
    <published>2019-04-16T09:46:00.000Z</published>
    <updated>2019-04-30T08:10:57.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件分发"><a href="#事件分发" class="headerlink" title="事件分发"></a>事件分发</h1><p><strong>事件分发的三个方法</strong></p><ol><li><p>dispatchTouchEvent(MotionEvent event) </p><p> 判断当前 View 是否要消费此事件，消费，则不再向下传递，反之传递，以此来分发事件；</p></li><li><p>onInterceptTouchEvent(MotionEvent event) </p><p> 通过 dispatchTouchEvent 调用， 返回值用来判断当前 View 是否要消费事件；</p></li><li><p>onTouchEvent(MotionEvent event) </p><p> 当 View 决定消费事件，则将进行该方法的调用，依据具体的事件，及具体业务，实现不同的事件。</p></li></ol><a id="more"></a><p><strong>关于事件分发的一些结论：</strong></p><ol><li>同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束，在这个过程中所产生的一系列事件，这个事件系列以 down 事件开始， 中间含有若干个 move 事件， 最终以 up 事件结束；</li><li>正常情况下，一个事件序列只能被一个 View 拦截且消耗。这一套哦的原因可以参考 3， 因为一旦一个元素拦截了某个事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个 View 同时处理，但是通过特殊手段可以做到，比如一个 View 将本该自己处理的事件，通过 onTouchEvent强行传递给其他 View 处理；</li><li>某个 View 一旦决定拦截，那么这一个事件序列都只能由它来处理（如果能传递到他的话），并且它的 onInterceptTouchEvent 不会再被调用。</li><li>某个 View 一旦开始处理事件，如果它不消耗 ACTION_DOWN 事件（onTouchEvent 返回 false）， 那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将会重新交由它的父元素去处理，即父元素的 onTouchEvent 会被调用，意思就是事件一旦交由一个 View 处理，那么它就必须消耗掉，否则同一事件序列中的剩下的事件就不在交给他来处理了。</li><li>如果 View 不消耗除 ACTION_DOWN 以外的其他事件， 那么这个点击事件会消失，此时父元素的 onTouchEvent 并不会被调用，并且当前 View 可以持续受到后续的事件，最终这些消失的点击事件会传递给 Activity 处理。</li><li>ViewGroup 默认不拦截任何事件，Android 源码中 ViewGroup 的 onInterceptTouchEvent 方法默认返回 false。</li><li>View 没有 onInterceptTouchEvent 方法，一旦有点击事件传递给他，那么他的 onTouchEvent 方法就会被调用。</li><li>View 的 onTouchEvent 方法默认会消耗掉事件（返回 true），除非他是不可点击的（clickable 和 longClickable 同时为 false）。View 的 longClickable 属性默认都是 false，clickable 属性要分情况，比如 Button 的 clickable 属性默认是 true，而 TextView 的 clickable 默认未 false。</li><li>View 的 enable 属性不影响 onTouchEvent 的默认返回值，哪怕一个 View 是 disable 状态，只要他的 clickable 或者 longClickable 有一个为 true， 那么他的 onTouchEvent 就返回true。</li><li>onClick 会发生的前提是 View 是可点击的，并且它收到了 down 和 up 事件。</li><li>事件传递过程是有外向内的，即事件总是先传递给父元素，然后在由父元素分发给子 View，通过 requestDisallowInterceptTouchEvent 方法可以在子元素中干预父元素的事件分发过程，但是 ACTION_DOWN 事件除外（<em>解决滑动冲突，内部拦截法</em>）。</li><li>事件的传递过程：Activity -&gt; Window(PhoneWindow) -&gt; View -&gt; dispatchTouchEvent -&gt; onInterceptTouchEvent -&gt; onTouchEvent。</li><li>当一个 View 需要处理事件时，如果它设置了 onTouchListener，那么 onTouchListener 中的 onTouch 方法会被回调。这时事件如何处理要看 onTouch 的返回值，返回 false，则当前 View 的 onTouchEvent 被调用，true， 则不调用。View 的 onTouchListener 方法优先级高于 onTouchEvent；onClickListener（需要完成有 up 操作） 方法在 onTouchEvent 中被调用，因此，onClickListener 处于事件传递的尾端。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;事件分发&quot;&gt;&lt;a href=&quot;#事件分发&quot; class=&quot;headerlink&quot; title=&quot;事件分发&quot;&gt;&lt;/a&gt;事件分发&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;事件分发的三个方法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;dispatchTouchEvent(MotionEvent event) &lt;/p&gt;
&lt;p&gt; 判断当前 View 是否要消费此事件，消费，则不再向下传递，反之传递，以此来分发事件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;onInterceptTouchEvent(MotionEvent event) &lt;/p&gt;
&lt;p&gt; 通过 dispatchTouchEvent 调用， 返回值用来判断当前 View 是否要消费事件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;onTouchEvent(MotionEvent event) &lt;/p&gt;
&lt;p&gt; 当 View 决定消费事件，则将进行该方法的调用，依据具体的事件，及具体业务，实现不同的事件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://xiaoman.ren/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 在一个应用中启动另外一个应用</title>
    <link href="http://xiaoman.ren/2019/04/16/Android-%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E4%B8%AD%E5%90%AF%E5%8A%A8%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8/"/>
    <id>http://xiaoman.ren/2019/04/16/Android-在一个应用中启动另外一个应用/</id>
    <published>2019-04-16T09:45:20.000Z</published>
    <updated>2019-04-30T08:10:57.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-在一个应用中启动另外一个应用"><a href="#Android-在一个应用中启动另外一个应用" class="headerlink" title="Android 在一个应用中启动另外一个应用"></a>Android 在一个应用中启动另外一个应用</h1><p>Android 中,从当前 APP 启动另外一个 APP 的需求,不是很常见, 但确实存在着,比如说在某宝还没有现在这么强大时,支付需要启动他们的 APP. 再比如说,某米的钱包系统,需要和他们的金融 APP 在某些业务上是相互依赖的,需要相互启动.</p><p>综上所述, 从一个 APP 去启动另外一个 APP 的需求还是有它存在的价值.因此,一下是我在工作和学习中总结的如何通过一个 APP 去启动另外一个 APP 的方式.</p><a id="more"></a><h2 id="1-通过-APP-启动另一个-APP"><a href="#1-通过-APP-启动另一个-APP" class="headerlink" title="1. 通过 APP 启动另一个 APP"></a>1. 通过 APP 启动另一个 APP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String packageName = &quot;com.android.calendar&quot;;</span><br><span class="line">Intent intent = getPackageManager().getLaunchIntentForPackage(packageName);</span><br><span class="line">intent.putExtra(&quot;type&quot;, true);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>上面的代码,就可以完成从一个 APP 启动另一个 APP 的业务需求, 这里需要注意的是,我们需要检测一下要启动的 APP 是否已经安装,如果应用未安装, 则会 NullPointException.</p><p>通过这种方式, Android 虚拟机会自己在目标 APP 下寻找标签为 <code>android.intent.action.MAIN</code> 的 Activity 启动.</p><p>这里介绍两种方式,检测目标应用是否已经安装</p><p><strong> 方法一: </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = getPackageName().getLaunchIntentForPackage(packageName);</span><br><span class="line">if (intent == null) &#123;</span><br><span class="line">  // 这里判断 Intent 为空, 说明应用不存在 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PackageInfo packageInfo = getPackageManager(0.getPackageInfo(packageName, 0);</span><br><span class="line">if (packageInfo == null) &#123;</span><br><span class="line">    // 这里如果 packageInfo 为 null, 说明应用不存在</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-打开另外一个-APP-指定的-Activity"><a href="#2-打开另外一个-APP-指定的-Activity" class="headerlink" title="2. 打开另外一个 APP 指定的 Activity"></a>2. 打开另外一个 APP 指定的 Activity</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent();</span><br><span class="line">ComponentName componeneName = new ComponeneName(&quot;com.android.calendar&quot;, &quot;com.android.calendar.LaunchActivity&quot;);</span><br><span class="line">intent.setComponent(componeneName);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>值得注意: </p><ul><li>需要将目标 Activity 的 android:export=”true” 属性在所属应用的 AndroidMainfest 里设置为 true, 意思是当前 Activity 允许被外部应用访问, 否则会报错</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.SecurityException: Permission Denial: starting  Intent </span><br><span class="line">&#123; cmp=com.example.fm/.MainFragmentActivity (has extras) &#125; from ProcessRecord</span><br><span class="line">&#123;39282a97 11545:com.xing.toolbardemo1/u0a71&#125;  (pid=11545,     uid=10071) not exported from uid 10067</span><br></pre></td></tr></table></figure><ul><li>在 5.0 以前的设备上,需要在当前的 AndroidMainfest 里也生命目标Activity, 否则会报错; 但在 5.0 以后的设备上,就不会报错哦</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  Caused by: android.content.ActivityNotFoundException: Unable to find explicit activity class &#123;com.example.fm/com.example.fm.MainFragmentActivity&#125;; </span><br><span class="line">have you declared this activity in your AndroidManifest.xml?</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-在一个应用中启动另外一个应用&quot;&gt;&lt;a href=&quot;#Android-在一个应用中启动另外一个应用&quot; class=&quot;headerlink&quot; title=&quot;Android 在一个应用中启动另外一个应用&quot;&gt;&lt;/a&gt;Android 在一个应用中启动另外一个应用&lt;/h1&gt;&lt;p&gt;Android 中,从当前 APP 启动另外一个 APP 的需求,不是很常见, 但确实存在着,比如说在某宝还没有现在这么强大时,支付需要启动他们的 APP. 再比如说,某米的钱包系统,需要和他们的金融 APP 在某些业务上是相互依赖的,需要相互启动.&lt;/p&gt;
&lt;p&gt;综上所述, 从一个 APP 去启动另外一个 APP 的需求还是有它存在的价值.因此,一下是我在工作和学习中总结的如何通过一个 APP 去启动另外一个 APP 的方式.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://xiaoman.ren/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio Dependencies Library Resolve</title>
    <link href="http://xiaoman.ren/2019/04/16/Android-Studio-Dependencies-Library-Resolve/"/>
    <id>http://xiaoman.ren/2019/04/16/Android-Studio-Dependencies-Library-Resolve/</id>
    <published>2019-04-16T09:44:39.000Z</published>
    <updated>2019-04-30T08:10:57.567Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 Android Studio 开发时,使用 Gradle 脚本构建项目, 同 Maven 一样,所引用的包之间也存在着相互依赖的关系, 当你使用某个包之后,发现有包版本冲突, 那么解决方案就来了.</p><p>先说点不正经的:</p><ol><li>你可以把你自己引入的包去掉,使用依赖包</li><li>放弃治疗</li></ol><p>哈哈,言归正传:</p><p>当我们引入的包之间存在冲突(不是同一个)的关系时, 也就是说,我们需要保留一个项目依赖包使用,那么我们需要在 <code>build.gradle</code> 中将我们不需要的包删除掉.</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子:"></a>举个栗子:</h2><p>当我使用 <code>com.squareup.retrofit2:adapter-rxjava:2.1.0</code> 时, 它默认依赖使用 <code>RxJava 1.5.0</code> 版本. 当我使用 <code>io.reactivex.rxjava2:rxjava:2.0.6</code> 时, 就会引起包冲突.</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h2><p>build.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;)</span><br><span class="line"></span><br><span class="line">    compile (&apos;com.squareup.retrofit2:adapter-rxjava:2.1.0&apos;)&#123;</span><br><span class="line">        exclude group: &apos;io.reactivex&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    compile &apos;io.reactivex.rxjava2:rxjava:2.0.6&apos;</span><br><span class="line">    compile &apos;io.reactivex.rxjava2:rxandroid:2.0.1&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用 Android Studio 开发时,使用 Gradle 脚本构建项目, 同 Maven 一样,所引用的包之间也存在着相互依赖的关系, 当你使用某个包之后,发现有包版本冲突, 那么解决方案就来了.&lt;/p&gt;
&lt;p&gt;先说点不正经的:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你可以把你
      
    
    </summary>
    
    
      <category term="Android" scheme="http://xiaoman.ren/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>git command</title>
    <link href="http://xiaoman.ren/2019/04/16/git-command/"/>
    <id>http://xiaoman.ren/2019/04/16/git-command/</id>
    <published>2019-04-16T09:43:58.000Z</published>
    <updated>2019-04-30T08:10:57.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-命令"><a href="#Git-命令" class="headerlink" title="Git 命令"></a>Git 命令</h1><table><thead><tr><th style="text-align:center">修改记录</th><th style="text-align:center">修改时间</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">添加删除远程分支</td><td style="text-align:center">2018年07月26日13:59:22</td><td style="text-align:center">删除远程分支命令</td></tr><tr><td style="text-align:center">更新fork仓库</td><td style="text-align:center">2018年08月10日14:16:08</td><td style="text-align:center">添加fork的仓库，从主仓库更新代码的命令</td></tr></tbody></table><p>整理的还不够完善，以后工作中遇到了会不断补进，如有大神，有可以留言，我们一起来完善。欢迎各位留言^_^</p><a id="more"></a><h2 id="Git-文件的三种状态"><a href="#Git-文件的三种状态" class="headerlink" title="Git 文件的三种状态"></a>Git 文件的三种状态</h2><ol><li>已提交：表示该文件已经被安全地保存在本地版本库中，执行过git commit。</li><li>已修改：表示修改了某个文件，但还没有提交保存</li><li>已暂存：表示把已修改的文件房子啊下次提交时要保存的清单中，也就是执行了 git add 命令。</li></ol><h2 id="远程仓库与本地代码的配置"><a href="#远程仓库与本地代码的配置" class="headerlink" title="远程仓库与本地代码的配置"></a>远程仓库与本地代码的配置</h2><p>将本地已经有的项目上传到远程空仓库中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;project path&gt;</span><br><span class="line">git init</span><br><span class="line">git remote add origin &lt;远程仓库地址&gt;</span><br><span class="line">git add .</span><br><span class="line">git commit -m &apos;提交日志&apos;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="Git-基本配置"><a href="#Git-基本配置" class="headerlink" title="Git 基本配置"></a>Git 基本配置</h2><ol><li>配置个人的用户名称和电子邮件地址，每次提交时，都会引用这两条信息，以用来说明是谁提交的更新。</li></ol><p>使用 <code>--global</code> 选项，更改的未用户主目录下的配置，如果想在某个特定的项目中使用其他的名称和邮件，只需要去掉 <code>--global</code> 选项重新配置，新的配置位于当前项目的 <code>.git/config</code> 文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &apos;&apos;yourname&apos;&apos;</span><br><span class="line">git config --global user.email  yourname@gmail.com</span><br></pre></td></tr></table></figure><ol start="2"><li>基础命令</li></ol><blockquote><p>git init</p></blockquote><p>通过此命令会在当前目录创建一个<code>.git</code>的隐藏目录，这是<code>git</code>的第一步。</p><blockquote><p>git status</p></blockquote><p><code>git status</code>是最为常用的命令之一，用于检查本地项目的状态.仔细阅读红色/绿色部分，可以获得相关文件的操作信息，根据提示，判断是执行<code>git commit</code> 还是执行<code>git add</code> 操作。</p><blockquote><p>git add</p></blockquote><p>将一个或多个文件添加到 <code>git</code>仓库中，只有通过 <code>git add</code> 添加的文件才会被版本控制管理。</p><p>添加单个文件 <code>git add HelloWorld2.java</code></p><p>添加多个文件 <code>git add --a</code></p><p>添加当前目录所有文件 <code>git add .</code></p><blockquote><p>git rm –cached <file></file></p></blockquote><p>将文件从<code>git</code>追踪列表中移除，只是逻辑删除（从版本库中移除），并不会将本地文件删除</p><blockquote><p>git commit</p></blockquote><p>执行过 <code>git add</code> 命令后，需要将暂存的文件提交到本地仓库中，此时是真正的提交</p><p>带 log 的提交： <code>git commit -m &#39;first commit&#39;</code></p><p>通过编辑器提交: <code>git commit</code></p><p>带log 的提交比较方便，但当你的提交信息有一定格式或者需要提交的文字内容较多时，使用编辑器效果会更好.</p><blockquote><p>git log</p></blockquote><p>查看历史提交记录， 包括<strong>提交人</strong>、<strong>时间</strong>、<strong>信息</strong>、<strong>信息指纹</strong>等.</p><p>查看提交记录： <code>git log</code></p><p>单行展示记录： <code>git log --pretty=oneline</code></p><p>展示全部信息： <code>git log --pretty=fuller</code></p><blockquote><p>git clone &lt;远程仓库地址&gt;</p></blockquote><p>拉取远程仓库代码,此项目并不一定是你所创建</p><p>例如： <code>git clone git@github.com:bboyfeiyu/AndroidEventBus.git</code></p><p>执行完成后，会在本地当前目录创建一个AndroidEventBus的目录来存放仓库代码</p><blockquote><p>git remote</p></blockquote><p>将本地已经<code>init</code>过的工程链接到远程的空仓库中，以此来完成远程版本库的创建</p><p>链接远程版本库： <code>git remote add origin &lt;远程地址&gt;</code></p><blockquote><p>git branch</p></blockquote><p>分支是用来管理代码版本、类型的有效工具，可根据不同的服务对象、不同的上线版本等等，来做代码分离，版本管理操作</p><p>查看分支： <code>git branch</code></p><p>查看带提交信息的分支信息： <code>git branch -v</code></p><p>创建分支： <code>git branch &lt;分支名称&gt;</code></p><p>创建并切换分支： <code>git branch -b &lt;分支名称&gt;</code></p><p>切换分支： <code>git checkout &lt;分支名称&gt;</code></p><p>推送分支： <code>git push origin &lt;分支名称&gt;</code></p><p>删除分支： <code>git branch -d &lt;分支名称&gt;</code></p><p>删除远程分支： <code>git push origin :&lt;分支名称&gt;</code></p><p>合并分支： <code>git merge &lt;分支名称&gt;</code></p><blockquote><p>git tag </p></blockquote><p>会列出所有的 <code>tag</code> 标签信息</p><p>在完成了所有功能、并且经过测试之后，可以封板上线的版本，通常会打一个标签，<strong><em>这是一个很重要的功能</em></strong> </p><p>建议每次上线都要做一次，便于后续的版本检索与维护，通常一个标签就代表了一个正式版本。</p><p>查看本地/远程 tag 标签：<code>git tag</code></p><p>查看模糊 tag 标签： <code>git tag -l &#39;v1.4.2.*&#39;</code></p><p>查看备注 tag 标签： <code>git tag -ln</code></p><p>查看标签信息： <code>git show &lt;标签名&gt;</code></p><p>创建本地 tag 标签： <code>git tag -a &lt;标签名&gt; -m &quot;&lt;标签备注信息&gt;&quot;</code></p><p>删除本地 tag 标签： <code>git tag -d &lt;标签名&gt;</code></p><p>推送远程 tag 标签： <code>git push origin &lt;标签名&gt;</code></p><p>推送全部 tag 标签： <code>git push origin -tags</code></p><p>删除远程 tag 标签： <code>git push origin :refs/tags/&lt;标签名&gt;</code></p><p><strong>查看远程机状态</strong></p><blockquote><p>git remote 用来管理， fork 的项目，与主项目的更新操作</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">git remote add upstream git@github.com:XXX/XXX.git</span><br><span class="line">git fetch upstream</span><br><span class="line">git merge upstream/master</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="使用中的一些技巧"><a href="#使用中的一些技巧" class="headerlink" title="使用中的一些技巧"></a>使用中的一些技巧</h2><p><strong>命名别名</strong><br>复杂并超长的命令，可以通过起别名的方式方便在终端中书协</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.ck checkout</span><br><span class="line">git config --global alias.st status</span><br></pre></td></tr></table></figure><p>然后就可以很愉快的使用git命令了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git st</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git-命令&quot;&gt;&lt;a href=&quot;#Git-命令&quot; class=&quot;headerlink&quot; title=&quot;Git 命令&quot;&gt;&lt;/a&gt;Git 命令&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;修改记录&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;修改时间&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;添加删除远程分支&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2018年07月26日13:59:22&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;删除远程分支命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;更新fork仓库&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2018年08月10日14:16:08&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;添加fork的仓库，从主仓库更新代码的命令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;整理的还不够完善，以后工作中遇到了会不断补进，如有大神，有可以留言，我们一起来完善。欢迎各位留言^_^&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://xiaoman.ren/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>开发一个Android IoT App</title>
    <link href="http://xiaoman.ren/2019/04/16/%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAAndroid-IoT-App/"/>
    <id>http://xiaoman.ren/2019/04/16/开发一个Android-IoT-App/</id>
    <published>2019-04-16T09:43:18.000Z</published>
    <updated>2019-04-30T08:10:57.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构建-Android-IoT-App"><a href="#构建-Android-IoT-App" class="headerlink" title="构建 Android IoT App"></a>构建 Android IoT App</h1><p>本文翻译自<a href="http://www.survivingwithandroid.com/2017/01/building-iot-app-android-things-android-iot-appplication-development.html" target="_blank" rel="noopener">Building IoT APP for Android Things in 3 step</a></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章主要描述了，如何为 Android Things 构建 Android IoT App。 也许你早已经知道了，最近 Google 发布了一个新的 IoT 操作系统– Android Things。Android Things 系统，是由 Android 系统衍生出来的，更有意思的是，我们可以使用我们的 Android 知识来开发 Android IoT 应用程序。在开始之前，了解 <a href="http://www.survivingwithandroid.com/2017/01/android-things-android-internet-of-things.html" target="_blank" rel="noopener">Android Things and how it works</a> 是很有必要的。</p><h2 id="名词索引"><a href="#名词索引" class="headerlink" title="名词索引"></a>名词索引</h2><p>Android IoT App ： 安卓物联网应用</p><p>Raspberry Pi 3 ： 树莓派 3</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>这篇文章的目标是：</p><ol><li>使用 Android Things 构建一个简单的 RGB Led 控制器</li><li>使用 Android API 构建 Android IoT UI 开发</li></ol><p>我们会使用 <code>Raspberry Pi 3</code> 作为 <a href="http://www.survivingwithandroid.com/2016/08/iot-rapid-prototyping-board.html" target="_blank" rel="noopener">IoT 开发板</a>,你也可以使用其他的开发板去开发 Android Things。</p><p>此Android IoT应用可帮助您熟悉新的Android Things API。 此外，这个物联网应用程序对于开发Android IoT 应用 UI 的概述很有用。</p><h2 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h2><p>通常情况下，一个 IoT 工程有两部分， 电气/电子部分和软件部分。让事情变得简单，使我们可以集中精力在Android IoT App, 这个 IoT 应用控制着一个简单的 RGB LED （共阳极）灯。RGB Led 灯使用220Ω电阻链接到 <code>Raspberry</code>， 每个颜色一个，原理图如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-ce68329a358d9cb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="引脚原理图"> </p><p>共阳极 RGB LED 灯非常常见，因此 <code>Raspberry Pi 3</code> 为引脚阳极供电。控制 LED 颜色的 RGB 引脚连接到 <code>Raspberry</code> 引脚：</p><ul><li>Pin 29</li><li>Pin 31</li><li>Pin 33</li></ul><p>这些引脚索引是非常重要的，因为我们会在 Android IoT App 上使用它。 上电前，请仔细检查 Raspberry 链接是否有异常。</p><p>现在，我们使用  <code>Android Studio</code> 创建一个 IoT 应用，第一步，配置 Android IoT 工程， build.gradle :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    provided &apos;com.google.android.things:androidthings:0.1-devpreview&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android Things 使用 Activity ，就像我们在 Android 中使用一样。因此，让我们创建一个 <code>RGBThingsActivity</code> 类，并在 <code>onCreate</code> 方法中处理 <code>Pin</code> 通信。</p><h2 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h2><p>使用 <code>GPIO</code> 引脚与 RGB LED 传递信息。 <code>GPIO</code> 引脚使用可编程的接口去获取设备的状态或者设置输出值（高电平/低电平），使用 Respberry GPIO 音及哦啊，我们开启或关闭三个颜色的组件（红绿蓝）。</p><p>Android Things SDK 提供了一个 <code>PeripheralManagerService</code> 的服务，去抽象 GPIO 通信接口。每当我们想读写数据时都必须使用它。一开始， Android IoT App 初始化服务，并设置引脚值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">   PeripheralManagerService manager = new PeripheralManagerService();</span><br><span class="line">   blueIO = manager.openGpio(&quot;BCM5&quot;);</span><br><span class="line">   blueIO.setDirection(Gpio.DIRECTION_OUT_INITIALLY_LOW);</span><br><span class="line">   greenIO = manager.openGpio(&quot;BCM6&quot;);</span><br><span class="line">   greenIO.setDirection(Gpio.DIRECTION_OUT_INITIALLY_HIGH);</span><br><span class="line">   redIO = manager.openGpio(&quot;BCM13&quot;);</span><br><span class="line">   redIO.setDirection(Gpio.DIRECTION_OUT_INITIALLY_LOW);</span><br><span class="line">   redIO.setValue(false);</span><br><span class="line">   blueIO.setValue(false);</span><br><span class="line">   greenIO.setValue(false);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">   Log.w(TAG, &quot;Unable to access GPIO&quot;, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码介绍了一些新的重要的新方面。首先,我们必须选对引脚。如果使用的是 Respberry ，我们需要知道每一个引脚都有对应的序号。同样的方式，Android Things 使用相同的寻址模型，不管怎样，引脚的命名都是用不同的方式。通过 <a href="https://developer.android.com/things/hardware/raspberrypi-io.html" target="_blank" rel="noopener">Respberry Pin reference</a> ,下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-0957d79bc802bd94?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="树莓派引脚图"></p><p>可以了解到 <code>Respberry Pi 3</code> 的引脚地址。这些地址名称在上面的代码中使用。 例如，要使用引脚BCM5（或引脚29），代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blueIO = manager.openGpio(&quot;BCM5&quot;);</span><br></pre></td></tr></table></figure><p>开始， 我们设置所有的引脚为低电平状态（低电平即为关闭状态），此时 Led 灯为关闭状态。改变引脚的状态值，由低电平调整到高电平，或者有高电平调整为低电平，我们可以看到灯的颜色变化。</p><h2 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h2><p>Android Things 另外一个有趣的功能是，为我们提供了 UI Interface。 我们开发一个 UI Interface 给 Android IoT App 和开发 Android UI 一样。就像 Android app 一样， Android Things UI 同样是使用 xml 格式开发。 下面例子，我们去配置控制 RGB Led 显示的 3 个开关：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">  &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">            android:orientation=&quot;vertical&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;Switch android:text=&quot;Red&quot;</span><br><span class="line">         android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">         android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">         android:id=&quot;@+id/switchRed&quot;</span><br><span class="line">         android:layout_marginTop=&quot;20dp&quot;/&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;Switch android:text=&quot;Green&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:id=&quot;@+id/switchGreen&quot;</span><br><span class="line">        android:layout_marginTop=&quot;20dp&quot;/&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;Switch android:text=&quot;Blue&quot;</span><br><span class="line">         android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">         android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">         android:id=&quot;@+id/switchBlue&quot;</span><br><span class="line">         android:layout_marginTop=&quot;20dp&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>在 <code>onCreate</code> 方法中，我们设置 layout 布局：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onCreate (Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(saveInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理用户开关：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Switch switchRed = (Switch)findViewById(R.id.switchRed);</span><br><span class="line">switch.setOnCheckedChangedListener(new CompoundButton.OnCheckedChangedListener()&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onCheckedChanged (CompoundButton buttonView, boolean isChecked)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            redIO.setValue(!isChecked);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            Log.w(TAG,&quot;Red GPIO Error&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们必须为其他引脚重复同一段代码。最终结果如下：</p><p>因 MarkDown 模式下， 简书不支持视频播放，请点击一下链接观看。</p><p><a href="https://www.youtube.com/embed/KT_FAqMbbNQ" target="_blank" rel="noopener">最终结果展示–需要翻墙 youtube 上观看</a></p><iframe width="560" height="315" src="https://www.youtube.com/embed/KT_FAqMbbNQ" frameborder="0" allowfullscreen></iframe><p>最后，要使用我们的应用程序，我们必须在 <code>Manifest.xml</code> 文件中条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-library android:name=&quot;com.google.android.things&quot;/&gt;</span><br></pre></td></tr></table></figure><p>并且声明我的 <code>Activity</code> 是一个 IoT Activity， 启动脚本为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;intent-filter&gt;</span><br><span class="line">    &lt;category android:name=&quot;android.intent.category.IOT_LAUNCHER&quot;/&gt;</span><br><span class="line">    &lt;category android:name=&quot;android.intent.category.DEFAULT”/&gt;</span><br><span class="line">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>文章最后，你已经知道了如何更好的使用 Android Things。 有趣的是，使用一些新的 API Android 开发人员可以准备下一次技术革命成为物联网。此外，开发过程与 Android 应用程序相同。</p><p>使用简单的几行代码，一个 Android 开发者就可以构建 Android IoT App.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;构建-Android-IoT-App&quot;&gt;&lt;a href=&quot;#构建-Android-IoT-App&quot; class=&quot;headerlink&quot; title=&quot;构建 Android IoT App&quot;&gt;&lt;/a&gt;构建 Android IoT App&lt;/h1&gt;&lt;p&gt;本文翻译自&lt;a href=&quot;http://www.survivingwithandroid.com/2017/01/building-iot-app-android-things-android-iot-appplication-development.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Building IoT APP for Android Things in 3 step&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android Things" scheme="http://xiaoman.ren/tags/Android-Things/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins + gradle + git 构建 Android CI 构建环境</title>
    <link href="http://xiaoman.ren/2019/04/16/Jenkins-gradle-git-%E6%9E%84%E5%BB%BA-Android-CI-%E6%9E%84%E5%BB%BA%E7%8E%AF%E5%A2%83/"/>
    <id>http://xiaoman.ren/2019/04/16/Jenkins-gradle-git-构建-Android-CI-构建环境/</id>
    <published>2019-04-16T09:42:05.000Z</published>
    <updated>2019-04-30T08:10:57.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在项目开发中，我们需要将最新的代码更新，提供给测试人员进行测试，以及发布。</p><p>目前 Android 工作中都在使用很强大的开发、构建以及打包工具，例如： android-studio、Gradle、Git等。</p><p>然，在企业组织并不是很完善的公司里，开发打包发布等工作，时常会由开发人员进行操作，难免在一些地方疏忽掉。</p><p>因此，CI 构建的出现，使得这些繁琐的工作变得轻松起来。</p><p>对于开发工程师，只负责向版本库提交代码，不用关心打包，发布之类的流程。</p><p>对于产品和测试，只需要从发布页面下载 APK 安装文件，不需要每一次都去工程师哪里索取最新的安装文件。</p><p>CI 的基本工作流程如下：<br><img src="http://upload-images.jianshu.io/upload_images/1550996-5101eac8d87352a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1"></p><p>我们每一次提交代码（通过git/svn作为版本库）到主干上，根据 CI 的定时任务，检测到版本更新，通过 CI ，将进行打包发布等流程操作。</p><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>本文使用 Linux Ubuntu 系统为大家介绍环境的搭建</p><h2 id="环境工具"><a href="#环境工具" class="headerlink" title="环境工具"></a>环境工具</h2><pre><code>1. PC 机(mac/linux)2. Java JDK3. Android SDK4. Gradle5. Git6. Tomcat7. Jenkins</code></pre><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Java-环境-安装"><a href="#Java-环境-安装" class="headerlink" title="Java 环境 安装"></a>Java 环境 安装</h3><p>Java JDK, Android SDK, Gradle 可从<a href="http://androiddevtools.cn" target="_blank" rel="noopener">AndroidDevTools</a>处下载获取。</p><h3 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h3><p>git 可通过终端进行安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:git-core/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></p><p>安装完成之后通过<code>git --version</code> 检查是否成功</p><p>安装后 git 存储在 <code>/usr/bin/git</code>下</p><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p>通过 Jenkins <a href="https://jenkins.io/index.html" target="_blank" rel="noopener">官方网站</a>下载最新Jenkins.war包</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-d2654c0a1383423a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Jenkins 下载"></p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>打开 <code>vi /etc/profile</code></p><p>将下列语句添加在文件的末尾后， 执行 esc-&gt;:wq</p><p>其中环境位置根据自己的所在位置进行相应的更改</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-ffd5f1b87d0e5bbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="环境变量"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>激动的你，是不是已经被这些繁琐的东西搞的不耐烦了呢，下面我们开始启动 Jenkins</p><p>将下载好的 Jenkins.war 包， 放入 Tomcat 的 webapps 目录下，进入 bin 目录执行 ./startup.sh 启动 Tomcat。</p><p>启动后，在浏览器中输入： <code>localhost:8080/jenkins</code></p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-cbdb39d4f2f4a85f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="jenkinsmain.png"></p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>系统管理-&gt; 插件管理-&gt;可选插件：</p><p>在搜索框中搜索以下插件，并进行安装</p><p>git plugin<br>gitlab plugin<br>grade plugin<br>Android Lint Plugin<br>Build Pipeline plugin<br>build timeout plugin<br>build name plugin<br>change assembly-version plugin<br>credentials binding plugin<br>description setter plugin<br>Dynamic parameter plugin<br>Email Extension plugin<br>FindBugs plugin<br>JaCoco plugin<br>Unit attachments plugin<br>Project Description plugin<br>Timestamper<br>Workspace cleanup plugin</p><p>安装完成后，重启。</p><h3 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h3><p>系统管理-&gt;系统设置：</p><p>配置Android 环境，将地址指向本机的 SDK 目录<br><img src="http://upload-images.jianshu.io/upload_images/1550996-5987aabcffb290c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Android environment"></p><p>系统管理-&gt;全局工具配置</p><p>配置 Java， Git ， Gradle 目录等</p><p>JDK：</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-b9e29a1ec2b746e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Java JDK"></p><p>Git：</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-9c4e88d64fcc2ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git"></p><p>Gradle：</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-9fbabc7d5c7ca319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gradle"></p><p>到此，环境配置，已基本完成。</p><p>下面我们开始进行项目够将操作</p><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><h3 id="创建Job"><a href="#创建Job" class="headerlink" title="创建Job"></a>创建Job</h3><p>新建-&gt;构建一个自由风格的软件项目:</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-2390d86256678c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建CI工程"></p><h3 id="参数化构建"><a href="#参数化构建" class="headerlink" title="参数化构建"></a>参数化构建</h3><p>通常我们在使用 Android-studio 进行打包时以及签名时，都会用到build.gradle并在其中配置相关属性。再此，我们可以用Jenkins，配置我们的项目参数，例如发布的版本号，构建时间， 上传路径，发布地址，签名打包等等。</p><p>在这里我们先看看 build.gradle 中的构建信息:</p><p>在项目的 moudle 下 build.gradle 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">def getDate () &#123;</span><br><span class="line">    def date = new Date()</span><br><span class="line">    def formattedDate = date.format(&quot;yyyyMMddHHmm&quot;)</span><br><span class="line">    return formattedDate</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def verName = APP_VERSION</span><br><span class="line">def verCode = 14</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    ....</span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">          keyAlias &apos;&apos;</span><br><span class="line">          keyPassword &apos;&apos;</span><br><span class="line">          storeFile file (&apos;&apos;)</span><br><span class="line">          storePassword &apos;&apos;</span><br><span class="line">       &#125;   </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">      applicationId &quot;cn.zhuangbudong.example&quot;</span><br><span class="line">      minSdkVersion 18</span><br><span class="line">      targetSdkVersion 25</span><br><span class="line">      multiDexEnabled true</span><br><span class="line">      versionCode verCode</span><br><span class="line">      versionName verName</span><br><span class="line"></span><br><span class="line">      resValues(&quot;string&quot;, &apos;app_version&apos;, verName)</span><br><span class="line">  &#125;</span><br><span class="line">  buildTypes &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">      signingConfig signingConfigs.release</span><br><span class="line">      minifyEnabled false</span><br><span class="line">      proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   lintOptions &#123;</span><br><span class="line">    abortOnError false</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   dexOptions &#123;</span><br><span class="line">      javaMaxHeapSize &apos;2g&apos;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">applicationVariants.all &#123; variant -&gt;</span><br><span class="line">    variant.outputs.each &#123; output -&gt;</span><br><span class="line">        def newName</span><br><span class="line">        def timeNow</span><br><span class="line">        def oldFile = output.outputFile</span><br><span class="line">        def outDirectory = oldFile.parent</span><br><span class="line">        if (&quot;true&quot;.equals(IS_JENKINS)) &#123; </span><br><span class="line">            timeNow = JENKINS_TIME</span><br><span class="line">            outDirectory = &quot;/media/nexd/work/android/package/release/&quot;</span><br><span class="line">            newName = &apos;zhuangbudong_example_&apos; + verName + &quot;_&quot; + timeNow + &quot;_&quot; + variant.buildType.name + &quot;.apk&quot; </span><br><span class="line">       &#125; else &#123;</span><br><span class="line">            timeNow = getDate()</span><br><span class="line">            if (variant.buildType.name.equals(&apos;debug&apos;)) &#123; </span><br><span class="line">               newName = &apos;zhuangbudong_example_&apos; + verName + &quot;_debug.apk&quot;  </span><br><span class="line">          &#125; else &#123; </span><br><span class="line">               newName = &apos;zhuangbudong_example_&apos; + verName + &quot;_&quot; + timeNow + &quot;_&quot; + variant.buildType.name + &quot;.apk&quot; </span><br><span class="line">           &#125; </span><br><span class="line">       &#125; </span><br><span class="line">       output.outputFile = new File(outDirectory, newName)</span><br><span class="line">    &#125;&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>gradle.properties:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">APP_VERSION=2.0.2</span><br><span class="line">IS_JENKINS=false</span><br><span class="line">JENKINS_TIME=&apos;&apos;</span><br></pre></td></tr></table></figure><p>在工程中添加以上代码，并在Jenkins中为这些参数赋值。</p><p>下面介绍 Jenkins 参数配置</p><p>勾选参数化构建过程，如下图：<br><img src="http://upload-images.jianshu.io/upload_images/1550996-20f69e63a527814c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="参数化构建"></p><p>按照下图，添加相关类型的参数，此处注意，Jenkins 配置的参数名要和在android-studio中配置的参数名保持一致</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-e0f4ceb7015ac0da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="JENKINS_TIME"><br><img src="http://upload-images.jianshu.io/upload_images/1550996-6e3f8d0311399d74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="APP_VERSION"><br><img src="http://upload-images.jianshu.io/upload_images/1550996-673c2465bcdc9a89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IS_JENKINS"><br><img src="http://upload-images.jianshu.io/upload_images/1550996-a82221191b980ad7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ENVIRONMENT"></p><h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><p>此处负责从版本库中拉去最新的代码</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-6dcbd8dd2dd9456c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git 仓库"></p><p>此处如果需要验证，点击 Add， 选择： Username with password</p><p>在对应窗口输入用户名和密码信息<br><img src="http://upload-images.jianshu.io/upload_images/1550996-8af978712a010864.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="用户身份验证"></p><p>点击添加。</p><p>使用 gitlab 进行源码库管理。</p><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>触发器负责拉取代码，编译，打包，发布等操作。通过触发器，执行Jenkins。</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-beb6ff8faa9843f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="触发器构建"></p><h3 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h3><p>此处只是在Jenkins在打包时，配置任务名称即可。如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-45b210c5df916dbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建环境"></p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>这里是最重要滴，配置以下命令，才能进行打包签名等等。</p><p>如下配置，这里需要注意下，构建文件，根目录。在你的目录结构比较复杂的时候，即你的根目录没有 build.gradle 文件时，需要指定一下 build.gradle 目录的位置。</p><p>同时，也是最重要的，勾选上pass job parameters as gradle properties ，不然之前配置的参数无法传递给项目中的 gradle.properties。</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-4e4e6e139fc1e856.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建"></p><h3 id="构建后操作"><a href="#构建后操作" class="headerlink" title="构建后操作"></a>构建后操作</h3><p>当项目构建完成后，我们可以通过邮件的方式将产生的Apk文件，以及测试报告，构建日志等信息，发送出来 如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-63b6bcb7b2dfd551.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="邮件发送"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;hr/&gt;</span><br><span class="line">(本邮件是程序自动下发的，请勿回复！)&lt;br/&gt;&lt;hr/&gt;</span><br><span class="line">项目名称：$&#123;PROJECT_NAME&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class="line">构建编号：$&#123;BUILD_NUMBER&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class="line">构建状态：$&#123;BUILD_STATUS&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class="line">触发原因：$&#123;CAUSE&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class="line">测试报告：&lt;a href=&quot;$&#123;PROJECT_URL&#125;ws/$&#123;PROJECT_NAME&#125;app/build/reports/tests/release/index.html&quot;&gt;$&#123;PROJECT_URL&#125;ws/$&#123;PROJECT_NAME&#125;app/build/reports/tests/release/index.html&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class="line">构建日志地址：&lt;a href=&quot;$&#123;BUILD_URL&#125;console&quot;&gt;$&#123;BUILD_URL&#125;console/&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class="line">构建地址：&lt;a href=&quot;$&#123;PROJECT_URL&#125;&quot;&gt;$&#123;PROJECT_URL&#125;&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class="line">构建报告：&lt;a href=&quot;$&#123;BUILD_URL&#125;testReport&quot;&gt;$&#123;BUILD_URL&#125;testReport&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class="line">变更集:$&#123;JELLY_SCRIPT,template=&quot;html&quot;&#125;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr/&gt;</span><br></pre></td></tr></table></figure><h2 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h2><p>回到 Jenkins 首页，点击创建的项目，点击 build with parameters:</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-58ecc4965ab845ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Build with Parameters"></p><p>点击开始构建，启动 Jenkins 构建任务。</p><p>构建成功时，显示为蓝色， 失败为红色，如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/1550996-4b2fc4b1190ddcd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建结果"></p><p>构建后生成的 Apk 文件，存在 build.gradle 文件中配置的目录。同时也可以使用蒲公英或fir.im 进行发布管理。</p><p>谢谢~</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在项目开发中，我们需要将最新的代码更新，提供给测试人员进行测试，以及发布。&lt;/p&gt;
&lt;p&gt;目前 Android 工作中都在使用很强大的开发、构建以及打包工具，例如： android-studio、Gradle、Git等。&lt;/p&gt;
&lt;p&gt;然，在企业组织并不是很完善的公司里，开发打包发布等工作，时常会由开发人员进行操作，难免在一些地方疏忽掉。&lt;/p&gt;
&lt;p&gt;因此，CI 构建的出现，使得这些繁琐的工作变得轻松起来。&lt;/p&gt;
&lt;p&gt;对于开发工程师，只负责向版本库提交代码，不用关心打包，发布之类的流程。&lt;/p&gt;
&lt;p&gt;对于产品和测试，只需要从发布页面下载 APK 安装文件，不需要每一次都去工程师哪里索取最新的安装文件。&lt;/p&gt;
&lt;p&gt;CI 的基本工作流程如下：&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1550996-5101eac8d87352a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图1&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们每一次提交代码（通过git/svn作为版本库）到主干上，根据 CI 的定时任务，检测到版本更新，通过 CI ，将进行打包发布等流程操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://xiaoman.ren/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>adb command</title>
    <link href="http://xiaoman.ren/2019/04/16/adb-command/"/>
    <id>http://xiaoman.ren/2019/04/16/adb-command/</id>
    <published>2019-04-16T09:38:08.000Z</published>
    <updated>2019-04-30T08:10:57.567Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>查看PID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell ps</span><br></pre></td></tr></table></figure></li><li><p>查看日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">全部日志</span><br><span class="line">adb logcat</span><br><span class="line"></span><br><span class="line">按照 PID 筛选日志</span><br><span class="line">adb logcat | grep &lt;PID&gt;</span><br></pre></td></tr></table></figure></li><li><p>查询链接设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="4"><li><p>重启机器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot</span><br></pre></td></tr></table></figure></li><li><p>杀死进程服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure></li><li><p>重启进程服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb start-server</span><br></pre></td></tr></table></figure></li><li><p>获取机器 Mac 地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /sys/class/net/wlan0/address</span><br></pre></td></tr></table></figure></li><li><p>安装 APK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">普通安装</span><br><span class="line">adb install &lt;file path&gt;</span><br><span class="line"></span><br><span class="line">保留数据和缓存文件</span><br><span class="line">adb install -r &lt;file path&gt;</span><br><span class="line"></span><br><span class="line">安装到 SD 卡上</span><br><span class="line">adb install -s &lt;file path&gt;</span><br></pre></td></tr></table></figure></li><li><p>卸载 APK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">普通卸载</span><br><span class="line">adb uninstall &lt;package name&gt;</span><br><span class="line"></span><br><span class="line">保留数据和缓存文件</span><br><span class="line">adb uninstall -k &lt;package name&gt;</span><br></pre></td></tr></table></figure></li><li><p>启动应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n &lt;package name&gt;/.&lt;activity_class_name&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看 CPU 占用率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb shell top</span><br><span class="line"></span><br><span class="line">查看内存占用前 6 的 app</span><br><span class="line">adb shell top -m 6</span><br><span class="line"></span><br><span class="line">刷新一次内存</span><br><span class="line">adb shell top -n 1</span><br></pre></td></tr></table></figure></li><li><p>杀死进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell kill &lt;pid&gt;</span><br></pre></td></tr></table></figure></li><li><p>将 System 分区重新挂在为可读写分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb remount</span><br></pre></td></tr></table></figure></li><li><p>从本地复制文件到设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push &lt;local&gt; &lt;remote&gt;</span><br></pre></td></tr></table></figure></li><li><p>从设备复制文件到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull &lt;remote&gt; &lt;local&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看 WiFi 密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /data/misc/wifi/*.conf</span><br></pre></td></tr></table></figure></li><li><p>查看 bug 报告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb bugreport</span><br></pre></td></tr></table></figure></li><li><p>跑 monkey</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -v -p your.package.name 500</span><br></pre></td></tr></table></figure></li><li><p>截图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap -p /sdcard/screenshot.png</span><br></pre></td></tr></table></figure></li><li><p>录屏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screenrecord /sdcard/demo.mp4</span><br></pre></td></tr></table></figure></li><li><p>查看安装列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看PID&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb shell ps&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看日志&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;全部日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb logcat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;按照 PID 筛选日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb logcat | grep &amp;lt;PID&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询链接设备&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb devices&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://xiaoman.ren/tags/Android/"/>
    
  </entry>
  
</feed>
